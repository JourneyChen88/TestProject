<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MsaFx</name>
    </assembly>
    <members>
        <member name="T:ServiceStack.Authentication.OAuth2.FourSquareOAuth2Provider">
            <summary>
            More info at: https://developer.foursquare.com/overview/auth.html
            Create Foursquare App at: https://foursquare.com/developers/register
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.IAuthProvider.Logout(ServiceStack.IServiceBase,ServiceStack.Authenticate)">
            <summary>
            Remove the Users Session
            </summary>
            <param name="service"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Auth.IAuthProvider.Authenticate(ServiceStack.IServiceBase,ServiceStack.Auth.IAuthSession,ServiceStack.Authenticate)">
            <summary>
            The entry point for all AuthProvider providers. Runs inside the AuthService so exceptions are treated normally.
            Overridable so you can provide your own Auth implementation.
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.IAuthProvider.IsAuthorized(ServiceStack.Auth.IAuthSession,ServiceStack.Auth.IAuthTokens,ServiceStack.Authenticate)">
            <summary>
            Determine if the current session is already authenticated with this AuthProvider
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.AuthProvider.FallbackConfig(System.String)">
            <summary>
            Allows specifying a global fallback config that if exists is formatted with the Provider as the first arg.
            E.g. this appSetting with the TwitterAuthProvider: 
            oauth.CallbackUrl="http://localhost:11001/auth/{0}"
            Would result in: 
            oauth.CallbackUrl="http://localhost:11001/auth/twitter"
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Auth.AuthProvider.Logout(ServiceStack.IServiceBase,ServiceStack.Authenticate)">
            <summary>
            Remove the Users Session
            </summary>
            <param name="service"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Auth.AuthProvider.SaveUserAuth(ServiceStack.IServiceBase,ServiceStack.Auth.IAuthSession,ServiceStack.Auth.IAuthRepository,ServiceStack.Auth.IAuthTokens)">
            <summary>
            Saves the Auth Tokens for this request. Called in OnAuthenticated(). 
            Overrideable, the default behaviour is to call IUserAuthRepository.CreateOrMergeAuthSession().
            </summary>
        </member>
        <member name="T:ServiceStack.Authentication.OAuth2.InstagramOAuth2Provider">
            <summary>
            More info at: http://instagram.com/developer/authentication/
            </summary>
        </member>
        <member name="T:ServiceStack.Authentication.OAuth2.LinkedInOAuth2Provider">
            <summary>
            Create new App at: https://www.linkedin.com/secure/developer
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.OAuthProvider.Authenticate(ServiceStack.IServiceBase,ServiceStack.Auth.IAuthSession,ServiceStack.Authenticate)">
            <summary>
            The entry point for all AuthProvider providers. Runs inside the AuthService so exceptions are treated normally.
            Overridable so you can provide your own Auth implementation.
            </summary>
            <param name="authService"></param>
            <param name="session"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Auth.OAuthProvider.Init(ServiceStack.IServiceBase,ServiceStack.Auth.IAuthSession@,ServiceStack.Authenticate)">
            <summary>
            Sets the CallbackUrl and session.ReferrerUrl if not set and initializes the session tokens for this AuthProvider
            </summary>
            <param name="authService"></param>
            <param name="session"></param>
            <param name="request"> </param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Authentication.OpenId.OpenIdOAuthProvider.GetAttributeEx(DotNetOpenAuth.OpenId.RelyingParty.IAuthenticationResponse)">
            <summary>
            Extracts an Attribute Exchange response, if one exists
            </summary>
        </member>
        <member name="T:ServiceStack.Api.Swagger.Support.IOrderedDictionary`2">
            <summary>
            Represents a generic collection of key/value pairs that are ordered independently of the key and value.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary</typeparam>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.IOrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an entry with the specified key and value into the <see cref="T:ServiceStack.Api.Swagger.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> collection with the lowest available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add.</param>
            <returns>The index of the newly added entry</returns>
            <remarks>
            <para>You can also use the <see cref="P:System.Collections.Generic.IDictionary{TKey,TValue}.Item(TKey)"/> property to add new elements by setting the value of a key that does not exist in the <see cref="T:ServiceStack.Api.Swagger.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> collection; however, if the specified key already exists in the <see cref="T:ServiceStack.Api.Swagger.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see>, setting the <see cref="P:Item(TKey)"/> property overwrites the old value. In contrast, the <see cref="M:Add"/> method does not modify existing elements.</para></remarks>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:ServiceStack.Api.Swagger.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see></exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:ServiceStack.Api.Swagger.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> is read-only.<br/>
            -or-<br/>
            The <see cref="T:ServiceStack.Api.Swagger.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> has a fized size.</exception>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.IOrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts a new entry into the <see cref="T:ServiceStack.Api.Swagger.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> collection with the specified key and value at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. The value can be <null/> if the type of the values in the dictionary is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ICollection.Count"/>.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:ServiceStack.Api.Swagger.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:ServiceStack.Api.Swagger.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> is read-only.<br/>
            -or-<br/>
            The <see cref="T:ServiceStack.Api.Swagger.Support.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> has a fized size.</exception>
        </member>
        <member name="P:ServiceStack.Api.Swagger.Support.IOrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <value>The value of the item at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            <paramref name="index"/> is equal to or greater than <see cref="P:System.Collections.ICollection.Count"/>.</exception>
        </member>
        <member name="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">
            <summary>
            Represents a generic collection of key/value pairs that are ordered independently of the key and value.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary</typeparam>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class using the specified initial capacity.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0</exception>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">IEqualityComparer&lt;TKey&gt;</see> to use when comparing keys, or <null/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1">EqualityComparer&lt;TKey&gt;</see> for the type of the key.</param>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class using the specified initial capacity and comparer.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">IEqualityComparer&lt;TKey&gt;</see> to use when comparing keys, or <null/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1">EqualityComparer&lt;TKey&gt;</see> for the type of the key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0</exception>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.ConvertToKeyType(System.Object)">
            <summary>
            Converts the object passed as a key to the key type of the dictionary
            </summary>
            <param name="keyObject">The key object to check</param>
            <returns>The key object, cast as the key type of the dictionary</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyObject"/> is <null/>.</exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="keyObject"/>.</exception>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.ConvertToValueType(System.Object)">
            <summary>
            Converts the object passed as a value to the value type of the dictionary
            </summary>
            <param name="value">The object to convert to the value type of the dictionary</param>
            <returns>The value object, converted to the value type of the dictionary</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueObject"/> is <null/>, and the value type of the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The value type of the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="valueObject"/>.</exception>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts a new entry into the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the specified key and value at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. The value can be <null/> if the type of the values in the dictionary is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            <paramref name="index"/> is greater than <see cref="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/>.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</exception>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.System#Collections#Specialized#IOrderedDictionary#Insert(System.Int32,System.Object,System.Object)">
            <summary>
            Inserts a new entry into the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the specified key and value at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. The value can be <null/> if the type of the values in the dictionary is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            <paramref name="index"/> is greater than <see cref="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/>.<br/>
            -or-<br/>
            <paramref name="value"/> is <null/>, and the value type of the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="key"/>.<br/>
            -or-<br/>
            The value type of the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="value"/>.<br/>
            -or-<br/>
            An element with the same key already exists in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</exception>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Removes the entry at the specified index from the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <param name="index">The zero-based index of the entry to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            index is equal to or greater than <see cref="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.Count"/>.</exception>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
            <summary>
            Adds an entry with the specified key and value into the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the lowest available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. This value can be <null/>.</param>
            <remarks>A key cannot be <null/>, but a value can be.
            <para>You can also use the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property to add new elements by setting the value of a key that does not exist in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection; however, if the specified key already exists in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>, setting the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property overwrites the old value. In contrast, the <see cref="M:Add"/> method does not modify existing elements.</para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></exception>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an entry with the specified key and value into the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the lowest available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. This value can be <null/>.</param>
            <returns>The index of the newly added entry</returns>
            <remarks>A key cannot be <null/>, but a value can be.
            <para>You can also use the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property to add new elements by setting the value of a key that does not exist in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection; however, if the specified key already exists in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>, setting the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property overwrites the old value. In contrast, the <see cref="M:Add"/> method does not modify existing elements.</para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></exception>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds an entry with the specified key and value into the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the lowest available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. This value can be <null/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/>.<br/>
            -or-<br/>
            <paramref name="value"/> is <null/>, and the value type of the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="key"/>.<br/>
            -or-<br/>
            The value type of the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="value"/>.</exception>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.Clear">
            <summary>
            Removes all elements from the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <remarks>The capacity is not changed as a result of calling this method.</remarks>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</param>
            <returns><see langword="true"/> if the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</param>
            <returns><see langword="true"/> if the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="key"/>.</exception>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.IndexOfKey(`0)">
            <summary>
            Returns the zero-based index of the specified key in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>
            </summary>
            <param name="key">The key to locate in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></param>
            <returns>The zero-based index of <paramref name="key"/>, if <paramref name="ley"/> is found in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>; otherwise, -1</returns>
            <remarks>This method performs a linear search; therefore it has a cost of O(n) at worst.</remarks>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.Remove(`0)">
            <summary>
            Removes the entry with the specified key from the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <param name="key">The key of the entry to remove</param>
            <returns><see langword="true"/> if the key was found and the corresponding element was removed; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the entry with the specified key from the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <param name="key">The key of the entry to remove</param>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> elements to a one-dimensional Array object at the specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> object that is the destination of the <see cref="T:KeyValuePair`2&gt;"/> objects copied from the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <remarks>The <see cref="M:CopyTo"/> method preserves the order of the elements in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></remarks>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of <paramref name="value"/>. This parameter can be passed uninitialized.</param>
            <returns><see langword="true"/> if the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified value to the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> with the specified key.
            </summary>
            <param name="item">The <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> structure representing the key and value to add to the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</param>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> contains a specific key and value.
            </summary>
            <param name="item">The <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> structure to locate in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</param>
            <returns><see langword="true"/> if <paramref name="keyValuePair"/> is found in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> to an array of type <see cref="T:KeyValuePair`2&gt;"/>, starting at the specified index.
            </summary>
            <param name="array">The one-dimensional array of type <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> that is the destination of the <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> elements copied from the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes a key and value from the dictionary.
            </summary>
            <param name="item">The <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> structure representing the key and value to remove from the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</param>
            <returns><see langword="true"/> if the key and value represented by <paramref name="keyValuePair"/> is successfully found and removed; otherwise, <see langword="false"/>. This method returns <see langword="false"/> if <paramref name="keyValuePair"/> is not found in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</returns>
        </member>
        <member name="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.Dictionary">
            <summary>
            Gets the dictionary object that stores the keys and values
            </summary>
            <value>The dictionary object that stores the keys and values for the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></value>
            <remarks>Accessing this property will create the dictionary object if necessary</remarks>
        </member>
        <member name="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.List">
            <summary>
            Gets the list object that stores the key/value pairs.
            </summary>
            <value>The list object that stores the key/value pairs for the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></value>
            <remarks>Accessing this property will create the list object if necessary.</remarks>
        </member>
        <member name="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <value>The value of the item at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            index is equal to or greater than <see cref="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.Count"/>.</exception>
        </member>
        <member name="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.System#Collections#Specialized#IOrderedDictionary#Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <value>The value of the item at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            index is equal to or greater than <see cref="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueObject"/> is a null reference, and the value type of the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The value type of the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="valueObject"/>.</exception>
        </member>
        <member name="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.System#Collections#IDictionary#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> has a fixed size.
            </summary>
            <value><see langword="true"/> if the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> has a fixed size; otherwise, <see langword="false"/>. The default is <see langword="false"/>.</value>
        </member>
        <member name="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection is read-only.
            </summary>
            <value><see langword="true"/> if the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is read-only; otherwise, <see langword="false"/>. The default is <see langword="false"/>.</value>
            <remarks>
            A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modification of the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</para>
            </remarks>
        </member>
        <member name="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the keys in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> object containing the keys in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</value>
            <remarks>The returned <see cref="T:System.Collections.ICollection"/> object is not a static copy; instead, the collection refers back to the keys in the original <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. Therefore, changes to the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the key collection.</remarks>
        </member>
        <member name="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</value>
            <remarks>The returned <see cref="T:System.Collections.ICollection"/> object is not a static copy; instead, the <see cref="T:System.Collections.ICollection"/> refers back to the values in the original <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection. Therefore, changes to the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the <see cref="T:System.Collections.ICollection"/>.</remarks>
        </member>
        <member name="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <value>The value associated with the specified key. If the specified key is not found, attempting to get it returns <null/>, and attempting to set it creates a new element using the specified key.</value>
        </member>
        <member name="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <value>The value associated with the specified key. If the specified key is not found, attempting to get it returns <null/>, and attempting to set it creates a new element using the specified key.</value>
        </member>
        <member name="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.Count">
            <summary>
            Gets the number of key/values pairs contained in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <value>The number of key/value pairs contained in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</value>
        </member>
        <member name="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> object is synchronized (thread-safe).
            </summary>
            <value>This method always returns false.</value>
        </member>
        <member name="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> object.
            </summary>
            <value>An object that can be used to synchronize access to the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> object.</value>
        </member>
        <member name="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection{TKey}">ICollection&lt;TKey&gt;</see> object containing the keys in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection{TKey}">ICollection&lt;TKey&gt;</see> object containing the keys in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</value>
            <remarks>The returned <see cref="T:System.Collections.Generic.ICollection{TKey}">ICollection&lt;TKey&gt;</see> object is not a static copy; instead, the collection refers back to the keys in the original <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. Therefore, changes to the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the key collection.</remarks>
        </member>
        <member name="P:ServiceStack.Api.Swagger.Support.OrderedDictionary`2.Values">
            <summary>
            Gets an <see cref="T:ICollection{TValue}">ICollection&lt;TValue&gt;</see> object containing the values in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.
            </summary>
            <value>An <see cref="T:ICollection{TValue}">ICollection&lt;TValue&gt;</see> object containing the values in the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</value>
            <remarks>The returned <see cref="T:ICollection{TValue}">ICollection&lt;TKey&gt;</see> object is not a static copy; instead, the collection refers back to the values in the original <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. Therefore, changes to the <see cref="T:ServiceStack.Api.Swagger.Support.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the value collection.</remarks>
        </member>
        <member name="T:ServiceStack.Service">
            <summary>
            Generic + Useful IService base class
            </summary>
        </member>
        <member name="M:ServiceStack.IServiceBase.ResolveService``1">
            <summary>
            Resolve an alternate Web Service from ServiceStack's IOC container.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:ServiceStack.Service.session">
            <summary>
            Dynamic Session Bag
            </summary>
        </member>
        <member name="M:ServiceStack.Service.SessionAs``1">
            <summary>
            Typed UserSession
            </summary>
        </member>
        <member name="P:ServiceStack.Service.VirtualFileSources">
            <summary>
            Cascading collection of virtual file sources, inc. Embedded Resources, File System, In Memory, S3
            </summary>
        </member>
        <member name="P:ServiceStack.Service.VirtualFiles">
            <summary>
            Read/Write Virtual FileSystem. Defaults to FileSystemVirtualPathProvider
            </summary>
        </member>
        <member name="T:ServiceStack.IPlugin">
            <summary>
            Callback for Plugins to register necessary handlers with ServiceStack
            </summary>
        </member>
        <member name="T:ServiceStack.IPreInitPlugin">
            <summary>
            Callback to pre-configure any logic before IPlugin.Register() is fired
            </summary>
        </member>
        <member name="P:ServiceStack.Api.Swagger.SwaggerFeature.ResourceFilterPattern">
            <summary>
            Gets or sets <see cref="T:System.Text.RegularExpressions.Regex"/> pattern to filter available resources. 
            </summary>
        </member>
        <member name="M:ServiceStack.MsgPack.MsgPackFormat.HandleException(System.Exception,System.Type)">
            <summary>
            MsgPack throws an exception for empty DTO's - normalizing the behavior to 
            follow other types and return an empty instance.
            </summary>
            <param name="ex"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.ServiceClientBase">
            Need to provide async request options
            http://msdn.microsoft.com/en-us/library/86wf6409(VS.71).aspx
        </member>
        <member name="F:ServiceStack.ServiceClientBase.globalRequestFilter">
            <summary>
            The request filter is called before any request.
            This request filter is executed globally.
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceClientBase.globalResponseFilter">
            <summary>
            The response action is called once the server response is available.
            It will allow you to access raw response information. 
            This response action is executed globally.
            Note that you should NOT consume the response stream as this is handled by ServiceStack
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceClientBase.SetBaseUri(System.String)">
            <summary>
            Sets all baseUri properties, using the Format property for the SyncReplyBaseUri and AsyncOneWayBaseUri
            </summary>
            <param name="baseUri">Base URI of the service</param>
        </member>
        <member name="F:ServiceStack.ServiceClientBase.disableAutoCompression">
            <summary>
            Whether to Accept Gzip,Deflate Content-Encoding and to auto decompress responses
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceClientBase.username">
            <summary>
            The user name for basic authentication
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceClientBase.password">
            <summary>
            The password for basic authentication
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceClientBase.SetCredentials(System.String,System.String)">
            <summary>
            Sets the username and the password for basic authentication.
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceClientBase.bearerToken">
            <summary>
            The Authorization Bearer Token to send with this request
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceClientBase.alwaysSendBasicAuthHeader">
            <summary>
            Determines if the basic auth header should be sent with every request.
            By default, the basic auth header is only sent when "401 Unauthorized" is returned.
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceClientBase.storeCookies">
            <summary>
            Specifies if cookies should be stored
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceClientBase.resultsFilter">
            <summary>
            The ResultsFilter is called before the Request is sent allowing you to return a cached response.
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceClientBase.resultsFilterResponse">
            <summary>
            The ResultsFilterResponse is called before returning the response allowing responses to be cached.
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceClientBase.exceptionFilter">
            <summary>
            Called with requestUri, ResponseType when server returns 304 NotModified
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceClientBase.HandleResponseException``1(System.Exception,System.Object,System.String,System.Func{System.Net.WebRequest},System.Func{System.Net.WebRequest,System.Net.WebResponse},``0@)">
            <summary>
            Called by Send method if an exception occurs, for instance a System.Net.WebException because the server
            returned an HTTP error code. Override if you want to handle specific exceptions or always want to parse the
            response to a custom ErrorResponse DTO type instead of ServiceStack's ErrorResponse class. In case ex is a
            <c>System.Net.WebException</c>, do not use
            <c>createWebRequest</c>/<c>getResponse</c>/<c>HandleResponse&lt;TResponse&gt;</c> to parse the response
            because that will result in the same exception again. Use
            <c>ThrowWebServiceException&lt;YourErrorResponseType&gt;</c> to parse the response and to throw a
            <c>WebServiceException</c> containing the parsed DTO. Then override Send to handle that exception.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceClientBase.Get(System.Object)">
            <summary>
            APIs returning HttpWebResponse must be explicitly Disposed, e.g using (var res = client.Get(url)) { ... }
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceClientBase.Get(System.String)">
            <summary>
            APIs returning HttpWebResponse must be explicitly Disposed, e.g using (var res = client.Get(url)) { ... }
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceClientBase.Headers">
            <summary>
            Gets the collection of headers to be added to outgoing requests.
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceClientBase.CaptureSynchronizationContext">
            <summary>
            Whether to execute async callbacks on the same Synchronization Context it was called from.
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceClientBase.Credentials">
            <summary>
            Gets or sets authentication information for the request.
            Warning: It's recommened to use <see cref="P:ServiceStack.ServiceClientBase.UserName"/> and <see cref="P:ServiceStack.ServiceClientBase.Password"/> for basic auth.
            This property is only used for IIS level authentication.
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceClientBase.onAuthenticationRequired">
            <summary>
            Called before request resend, when the initial request required authentication
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceClientBase.requestFilter">
            <summary>
            The request filter is called before any request.
            This request filter only works with the instance where it was set (not global).
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceClientBase.responseFilter">
            <summary>
            The response action is called once the server response is available.
            It will allow you to access raw response information. 
            Note that you should NOT consume the response stream as this is handled by ServiceStack
            </summary>
        </member>
        <member name="T:ServiceStack.AsyncServiceClient">
            Need to provide async request options
            http://msdn.microsoft.com/en-us/library/86wf6409(VS.71).aspx
        </member>
        <member name="P:ServiceStack.AsyncServiceClient.GlobalRequestFilter">
            <summary>
            The request filter is called before any request.
            This request filter is executed globally.
            </summary>
        </member>
        <member name="P:ServiceStack.AsyncServiceClient.GlobalResponseFilter">
            <summary>
            The response action is called once the server response is available.
            It will allow you to access raw response information. 
            This response action is executed globally.
            Note that you should NOT consume the response stream as this is handled by ServiceStack
            </summary>
        </member>
        <member name="P:ServiceStack.AsyncServiceClient.OnAuthenticationRequired">
            <summary>
            Called before request resend, when the initial request required authentication
            </summary>
        </member>
        <member name="P:ServiceStack.AsyncServiceClient.RequestFilter">
            <summary>
            The request filter is called before any request.
            This request filter only works with the instance where it was set (not global).
            </summary>
        </member>
        <member name="P:ServiceStack.AsyncServiceClient.ResponseFilter">
            <summary>
            The response action is called once the server response is available.
            It will allow you to access raw response information. 
            Note that you should NOT consume the response stream as this is handled by ServiceStack
            </summary>
        </member>
        <member name="P:ServiceStack.AsyncServiceClient.ResultsFilter">
            <summary>
            The ResultsFilter is called before the Request is sent allowing you to return a cached response.
            </summary>
        </member>
        <member name="P:ServiceStack.AsyncServiceClient.ResultsFilterResponse">
            <summary>
            The ResultsFilterResponse is called before returning the response allowing responses to be cached.
            </summary>
        </member>
        <member name="P:ServiceStack.AsyncServiceClient.ExceptionFilter">
            <summary>
            Called with requestUri, ResponseType when server returns 304 NotModified
            </summary>
        </member>
        <member name="T:ServiceStack.RsaUtils">
            <summary>
            Useful .NET Encryption Utils from:
            https://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider(v=vs.110).aspx
            </summary>
        </member>
        <member name="T:ServiceStack.GenericProxy`1">
            <summary>
            Generic Proxy for service calls.
            </summary>
            <typeparam name="T">The service Contract</typeparam>
        </member>
        <member name="P:ServiceStack.GenericProxy`1.Proxy">
            <summary>
            Returns the transparent proxy for the service call
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.MessageQueueClientFactory.GetMessageAsync(System.String)">
            <summary>
            Returns the next message from queueName or null if no message
            </summary>
            <param name="queueName"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ResponseStatusUtils.CreateResponseStatus(System.String,System.String,System.Collections.Generic.IEnumerable{ServiceStack.Validation.ValidationErrorField})">
            <summary>
            Creates the error response from the values provided.
            
            If the errorCode is empty it will use the first validation error code, 
            if there is none it will throw an error.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="errorMessage">The error message.</param>
            <param name="validationErrors">The validation errors.</param>
            <returns></returns>
        </member>
        <member name="F:ServiceStack.Serialization.DataContractSerializer.quotas">
            <summary>
            Default MaxStringContentLength is 8k, and throws an exception when reached
            </summary>
        </member>
        <member name="T:ServiceStack.Serialization.StringMapTypeDeserializer">
            <summary>
            Serializer cache of delegates required to create a type from a string map (e.g. for REST urls)
            </summary>
        </member>
        <member name="M:ServiceStack.Serialization.XmlSerializerWrapper.GetNamespace(System.Type)">
            <summary>
            Gets the namespace from an attribute marked on the type's definition
            </summary>
            <param name="type"></param>
            <returns>Namespace of type</returns>
        </member>
        <member name="P:ServiceStack.WcfServiceClient.StoreCookies">
            <summary>
            Specifies if cookies should be stored
            </summary>
        </member>
        <member name="M:ServiceStack.StreamExt.Compress(System.String,System.String)">
            <summary>
            Compresses the specified text using the default compression method: Deflate
            </summary>
            <param name="text">The text.</param>
            <param name="compressionType">Type of the compression.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.StreamExt.CompressBytes(System.Byte[],System.String)">
            <summary>
            Compresses the specified text using the default compression method: Deflate
            </summary>
        </member>
        <member name="M:ServiceStack.StreamExt.Decompress(System.Byte[],System.String)">
            <summary>
            Decompresses the specified gz buffer using the default compression method: Inflate
            </summary>
            <param name="gzBuffer">The gz buffer.</param>
            <param name="compressionType">Type of the compression.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.StreamExt.DecompressBytes(System.Byte[],System.String)">
            <summary>
            Decompresses the specified gz buffer using the default compression method: Inflate
            </summary>
        </member>
        <member name="T:ServiceStack.UrlExtensions">
            <summary>
            Donated by Ivan Korneliuk from his post:
            http://korneliuk.blogspot.com/2012/08/servicestack-reusing-dtos.html
            
            Modified to only allow using routes matching the supplied HTTP Verb
            </summary>
        </member>
        <member name="M:ServiceStack.UrlExtensions.ToUrl(ServiceStack.IReturn,System.String,System.String)">
            <summary>
            Generate a url from a Request DTO. Pretty URL generation require Routes to be defined using `[Route]` on the Request DTO
            </summary>
        </member>
        <member name="T:ServiceStack.Validation.ValidationError">
            <summary>
            The exception which is thrown when a validation error occurred.
            This validation is serialized in a extra clean and human-readable way by ServiceStack.
            </summary>
        </member>
        <member name="M:ServiceStack.Validation.ValidationError.ToXml">
            <summary>
            Used if we need to serialize this exception to XML
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Validation.ValidationError.ErrorCode">
            <summary>
            Returns the first error code
            </summary>
            <value>The error code.</value>
        </member>
        <member name="T:ServiceStack.Validation.ValidationErrorResult">
            <summary>
            Encapsulates a validation result.
            </summary>
        </member>
        <member name="M:ServiceStack.Validation.ValidationErrorResult.#ctor">
            <summary>
            Constructs a new ValidationResult
            </summary>
        </member>
        <member name="M:ServiceStack.Validation.ValidationErrorResult.#ctor(System.Collections.Generic.IList{ServiceStack.Validation.ValidationErrorField})">
            <summary>
            Constructs a new ValidationResult
            </summary>
            <param name="errors">A list of validation results</param>
        </member>
        <member name="M:ServiceStack.Validation.ValidationErrorResult.#ctor(System.Collections.Generic.IList{ServiceStack.Validation.ValidationErrorField},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Validation.ValidationErrorResult"/> class.
            </summary>
            <param name="errors">The errors.</param>
            <param name="successCode">The success code.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:ServiceStack.Validation.ValidationErrorResult.Merge(ServiceStack.Validation.ValidationErrorResult)">
            <summary>
            Merge errors from another <see cref="T:ServiceStack.Validation.ValidationErrorResult"/>
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:ServiceStack.Validation.ValidationErrorResult.SuccessCode">
            <summary>
            Gets or sets the success code.
            </summary>
            <value>The success code.</value>
        </member>
        <member name="P:ServiceStack.Validation.ValidationErrorResult.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="P:ServiceStack.Validation.ValidationErrorResult.SuccessMessage">
            <summary>
            Gets or sets the success message.
            </summary>
            <value>The success message.</value>
        </member>
        <member name="P:ServiceStack.Validation.ValidationErrorResult.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:ServiceStack.Validation.ValidationErrorResult.Errors">
            <summary>
            The errors generated by the validation.
            </summary>
        </member>
        <member name="P:ServiceStack.Validation.ValidationErrorResult.IsValid">
            <summary>
            Returns True if the validation was successful (errors list is empty).
            </summary>
        </member>
        <member name="T:ServiceStack.CookieManagerEndpointBehavior">
            <summary>
            Adds the singleton instance of <see cref="T:ServiceStack.CookieManagerMessageInspector"/> to an endpoint on the client.
            </summary>
            <remarks>
            Based on http://megakemp.wordpress.com/2009/02/06/managing-shared-cookies-in-wcf/
            </remarks>
        </member>
        <member name="M:ServiceStack.CookieManagerEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            Adds the singleton of the <see cref="!:ClientIdentityMessageInspector"/> class to the client endpoint's message inspectors.
            </summary>
            <param name="endpoint">The endpoint that is to be customized.</param>
            <param name="clientRuntime">The client runtime to be customized.</param>
        </member>
        <member name="T:ServiceStack.CookieManagerMessageInspector">
            <summary>
            Maintains a copy of the cookies contained in the incoming HTTP response received from any service
            and appends it to all outgoing HTTP requests.
            </summary>
            <remarks>
            This class effectively allows to send any received HTTP cookies to different services,
            reproducing the same functionality available in ASMX Web Services proxies with the <see cref="T:System.Net.CookieContainer"/> class.
            Based on http://megakemp.wordpress.com/2009/02/06/managing-shared-cookies-in-wcf/
            </remarks>
        </member>
        <member name="M:ServiceStack.CookieManagerMessageInspector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:ClientIdentityMessageInspector"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.CookieManagerMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            Inspects a message after a reply message is received but prior to passing it back to the client application.
            </summary>
            <param name="reply">The message to be transformed into types and handed back to the client application.</param>
            <param name="correlationState">Correlation state data.</param>
        </member>
        <member name="M:ServiceStack.CookieManagerMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
            <summary>
            Inspects a message before a request message is sent to a service.
            </summary>
            <param name="request">The message to be sent to the service.</param>
            <param name="channel">The client object channel.</param>
            <returns>
            <strong>Null</strong> since no message correlation is used.
            </returns>
        </member>
        <member name="P:ServiceStack.CookieManagerMessageInspector.Instance">
            <summary>
            Gets the singleton <see cref="!:ClientIdentityMessageInspector"/> instance.
            </summary>
        </member>
        <member name="F:ServiceStack.WebRequestUtils.ResponseDtoSuffix">
            <summary>
            Naming convention for the request's Response DTO
            </summary>
        </member>
        <member name="M:ServiceStack.WebRequestUtils.GetResponseStatus(System.Object)">
            <summary>
            Shortcut to get the ResponseStatus whether it's bare or inside a IHttpResult
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:FluentValidation.Mvc.CustomizeValidatorAttribute.ToValidatorSelector">
            <summary>
            Builds a validator selector from the options specified in the attribute's properties.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Validators.IPropertyValidator">
            <summary>
            A custom property validator.
            This interface should not be implemented directly in your code as it is subject to change.
            Please inherit from <see cref="T:ServiceStack.FluentValidation.Validators.PropertyValidator">PropertyValidator</see> instead.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.IRuleBuilder`2">
            <summary>
            Rule builder 
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="M:ServiceStack.FluentValidation.IRuleBuilder`2.SetValidator(ServiceStack.FluentValidation.Validators.IPropertyValidator)">
            <summary>
            Associates a validator with this the property for this rule builder.
            </summary>
            <param name="validator">The validator to set</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.IRuleBuilder`2.SetValidator(ServiceStack.FluentValidation.IValidator{`1})">
            <summary>
            Associates an instance of IValidator with the current property rule.
            </summary>
            <param name="validator">The validator to use</param>
        </member>
        <member name="T:FluentValidation.Mvc.FluentValidationModelValidator">
            <summary>
            ModelValidator implementation that uses FluentValidation.
            </summary>
        </member>
        <member name="T:FluentValidation.Mvc.FluentValidationModelValidatorProvider">
            <summary>
            Implementation of ModelValidatorProvider that uses FluentValidation.
            </summary>
        </member>
        <member name="M:FluentValidation.Mvc.FluentValidationModelValidatorProvider.Configure(System.Action{FluentValidation.Mvc.FluentValidationModelValidatorProvider})">
            <summary>
            Initializes the FluentValidationModelValidatorProvider using the default options and adds it in to the ModelValidatorProviders collection.
            </summary>
        </member>
        <member name="T:FluentValidation.Mvc.IValidatorInterceptor">
            <summary>
            Specifies an interceptor that can be used to provide hooks that will be called before and after MVC validation occurs.
            </summary>
        </member>
        <member name="M:FluentValidation.Mvc.IValidatorInterceptor.BeforeMvcValidation(System.Web.Mvc.ControllerContext,ServiceStack.FluentValidation.ValidationContext)">
            <summary>
            Invoked before MVC validation takes place which allows the ValidationContext to be customized prior to validation.
            It should return a ValidationContext object.
            </summary>
            <param name="controllerContext">Controller Context</param>
            <param name="validationContext">Validation Context</param>
            <returns>Validation Context</returns>
        </member>
        <member name="M:FluentValidation.Mvc.IValidatorInterceptor.AfterMvcValidation(System.Web.Mvc.ControllerContext,ServiceStack.FluentValidation.ValidationContext,ServiceStack.FluentValidation.Results.ValidationResult)">
            <summary>
            Invoked after MVC validation takes place which allows the result to be customized.
            It should return a ValidationResult.
            </summary>
            <param name="controllerContext">Controller Context</param>
            <param name="validationContext">Validation Context</param>
            <param name="result">The result of validation.</param>
            <returns>Validation Context</returns>
        </member>
        <member name="T:FluentValidation.Mvc.RuleSetForClientSideMessagesAttribute">
            <summary>
            Specifies which ruleset should be used when deciding which validators should be used to generate client-side messages.
            </summary>
        </member>
        <member name="M:FluentValidation.Mvc.ValidationResultExtension.AddToModelState(ServiceStack.FluentValidation.Results.ValidationResult,System.Web.Mvc.ModelStateDictionary,System.String)">
            <summary>
            Stores the errors in a ValidationResult object to the specified modelstate dictionary.
            </summary>
            <param name="result">The validation result to store</param>
            <param name="modelState">The ModelStateDictionary to store the errors in.</param>
            <param name="prefix">An optional prefix. If ommitted, the property names will be the keys. If specified, the prefix will be concatenatd to the property name with a period. Eg "user.Name"</param>
        </member>
        <member name="M:ServiceStack.Mvc.FunqControllerFactory.#ctor(Funq.Container,System.Reflection.Assembly[])">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Mvc.FunqControllerFactory"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="assemblies">The assemblies to reflect for IController discovery.</param>
        </member>
        <member name="T:ServiceStack.FluentValidation.IValidatorFactory">
            <summary>
            Gets validators for a particular type.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidatorFactory.GetValidator``1">
            <summary>
            Gets the validator for the specified type.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidatorFactory.GetValidator(System.Type)">
            <summary>
            Gets the validator for the specified type.
            </summary>
        </member>
        <member name="T:ServiceStack.Mvc.MiniProfiler.ProfilingActionFilter">
            <summary>
            This filter can be applied globally to hook up automatic action profiling
            </summary>
        </member>
        <member name="M:ServiceStack.Mvc.MiniProfiler.ProfilingActionFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Happens before the action starts running
            </summary>
        </member>
        <member name="M:ServiceStack.Mvc.MiniProfiler.ProfilingActionFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Happens after the action executes
            </summary>
        </member>
        <member name="T:ServiceStack.Mvc.MiniProfiler.ProfilingViewEngine">
            <summary>
            You can wrap your view engines with this view to enable profiling on views and partial
            </summary>
        </member>
        <member name="M:ServiceStack.Mvc.MiniProfiler.ProfilingViewEngine.#ctor(System.Web.Mvc.IViewEngine)">
            <summary>
            Wrap your view engines with this to allow profiling
            </summary>
            <param name="wrapped"></param>
        </member>
        <member name="M:ServiceStack.Mvc.MiniProfiler.ProfilingViewEngine.FindPartialView(System.Web.Mvc.ControllerContext,System.String,System.Boolean)">
            <summary>
            Find a partial
            </summary>
        </member>
        <member name="M:ServiceStack.Mvc.MiniProfiler.ProfilingViewEngine.FindView(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean)">
            <summary>
            Find a view
            </summary>
        </member>
        <member name="M:ServiceStack.Mvc.MiniProfiler.ProfilingViewEngine.ReleaseView(System.Web.Mvc.ControllerContext,System.Web.Mvc.IView)">
            <summary>
            Find a partial
            </summary>
        </member>
        <member name="P:ServiceStack.Mvc.ServiceStackController.UnauthorizedRedirectUrl">
            <summary>
            Default redirct URL if [Authenticate] attribute doesn't permit access.
            </summary>
        </member>
        <member name="P:ServiceStack.Mvc.ServiceStackController.AuthenticationErrorResult">
            <summary>
            To change the error result when authentication (<see cref="T:ServiceStack.AuthenticateAttribute"/>) fails.
            Override this property and return the appropriate result.
            </summary>
        </member>
        <member name="P:ServiceStack.Mvc.ServiceStackController.ForbiddenRedirectUrl">
            <summary>
            Default redirct URL if Required Role or Permission attributes doesn't permit access.
            </summary>
        </member>
        <member name="P:ServiceStack.Mvc.ServiceStackController.ForbiddenErrorResult">
            <summary>
            To change the error result when user doesn't have required role or permissions (<see cref="T:ServiceStack.RequiredRoleAttribute"/>).
            Override this property and return the appropriate result.
            </summary>
        </member>
        <member name="P:ServiceStack.Mvc.ServiceStackController.AuthorizationErrorResult">
            <summary>
            To change the error result when authorization fails
            to something else, override this property and return the appropriate result.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.NativeValueOrmLiteConverter">
            <summary>
            For Types that are natively supported by RDBMS's and shouldn't be quoted
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConverter.ToQuotedString(System.Type,System.Object)">
            <summary>
            Quoted Value in SQL Statement
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConverter.InitDbParam(System.Data.IDbDataParameter,System.Type)">
            <summary>
            Customize how DB Param is initialized. Useful for supporting RDBMS-specific Types.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConverter.ToDbValue(System.Type,System.Object)">
            <summary>
            Parameterized value in parameterized queries
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConverter.FromDbValue(System.Type,System.Object)">
            <summary>
            Value from DB to Populate on POCO Data Model with
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConverter.GetValue(System.Data.IDataReader,System.Int32,System.Object[])">
            <summary>
            Retrieve Value from ADO.NET IDataReader. Defaults to reader.GetValue()
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConverter.DialectProvider">
            <summary>
            RDBMS Dialect this Converter is for. Injected at registration.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConverter.ColumnDefinition">
            <summary>
            SQL Column Definiton used in CREATE Table. 
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConverter.DbType">
            <summary>
            Used in DB Params. Defaults to DbType.String
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetConverter(System.Type)">
            <summary>
            Gets the explicit Converter registered for a specific type
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetConverterBestMatch(System.Type)">
            <summary>
            Return best matching converter, falling back to Enum, Value or Ref Type Converters
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetQuotedValue(System.String)">
            <summary>
            Quote the string so that it can be used inside an SQL-expression
            Escape quotes inside the string
            </summary>
            <param name="paramValue"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select">
            <summary>
            Clear select expression. All properties will be selected.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select(System.String)">
            <summary>
            set the specified selectExpression.
            </summary>
            <param name='selectExpression'>
            raw Select expression: "Select SomeField1, SomeField2 from SomeTable"
            </param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select(System.String[])">
            <summary>
            Set the specified selectExpression using matching fields.
            </summary>
            <param name='fields'>
            Matching Fields: "SomeField1, SomeField2"
            </param>
        </member>
        <!-- 对于成员“M:ServiceStack.OrmLite.SqlExpression`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})”忽略有格式错误的 XML 注释 -->
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Skip(System.Nullable{System.Int32})">
            <summary>
            Offset of the first row to return. The offset of the initial row is 0
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Take(System.Nullable{System.Int32})">
            <summary>
            Number of rows returned by a SELECT statement
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Limit(System.Int32,System.Int32)">
            <summary>
            Set the specified offset and rows for SQL Limit clause.
            </summary>
            <param name='skip'>
            Offset of the first row to return. The offset of the initial row is 0
            </param>
            <param name='rows'>
            Number of rows returned by a SELECT statement
            </param>	
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Limit(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Set the specified offset and rows for SQL Limit clause where they exist.
            </summary>
            <param name='skip'>
            Offset of the first row to return. The offset of the initial row is 0
            </param>
            <param name='rows'>
            Number of rows returned by a SELECT statement
            </param>	
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Limit(System.Int32)">
            <summary>
            Set the specified rows for Sql Limit clause.
            </summary>
            <param name='rows'>
            Number of rows returned by a SELECT statement
            </param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Limit">
            <summary>
            Clear Sql Limit clause
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ClearLimits">
            <summary>
            Clear Offset and Limit clauses. Alias for Limit()
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Update(System.Collections.Generic.List{System.String})">
            <summary>
            Fields to be updated.
            </summary>
            <param name='updatefields'>
            List&lt;string&gt; containing Names of properties to be updated
            </param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Update(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Fields to be updated.
            </summary>
            <param name='updatefields'>
            IEnumerable&lt;string&gt; containing Names of properties to be updated
            </param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Fields to be updated.
            </summary>
            <param name='fields'>
            x=> x.SomeProperty1 or x=> new { x.SomeProperty1, x.SomeProperty2 }
            </param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Update">
            <summary>
            Clear UpdateFields list ( all fields will be updated)
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Insert``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Fields to be inserted.
            </summary>
            <param name='fields'>
            x=> x.SomeProperty1 or x=> new{ x.SomeProperty1, x.SomeProperty2}
            </param>
            <typeparam name='TKey'>
            objectWithProperties
            </typeparam>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Insert(System.Collections.Generic.List{System.String})">
            <summary>
            fields to be inserted.
            </summary>
            <param name='insertFields'>
            IList&lt;string&gt; containing Names of properties to be inserted
            </param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Insert">
            <summary>
            Clear InsertFields list ( all fields will be inserted)
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.SqlServer.Converters.SqlServerGeographyTypeConverter">
            <summary>
            SqlServer Database Converter for the Geometry data type
            https://msdn.microsoft.com/en-us/library/microsoft.sqlserver.types.sqlgeography.aspx
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.SqlServer.Converters.SqlServerGeometryTypeConverter">
            <summary>
            SqlServer Database Converter for the Geometry data type
            https://msdn.microsoft.com/en-us/library/microsoft.sqlserver.types.sqlgeometry.aspx
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.SqlServer.Converters.SqlServerHierarchyIdTypeConverter">
            <summary>
            SqlServer Database Converter for the HierarchyId data type
            https://msdn.microsoft.com/en-us/library/microsoft.sqlserver.types.sqlhierarchyid.aspx
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.CommandDefinition">
            <summary>
            Represents the key aspects of a sql operation
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.CommandDefinition.#ctor(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},ServiceStack.OrmLite.Dapper.CommandFlags)">
            <summary>
            Initialize the command definition
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.CommandDefinition.CommandText">
            <summary>
            The command (sql or a stored-procedure name) to execute
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.CommandDefinition.Parameters">
            <summary>
            The parameters associated with the command
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.CommandDefinition.Transaction">
            <summary>
            The active transaction for the command
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.CommandDefinition.CommandTimeout">
            <summary>
            The effective timeout for the command
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.CommandDefinition.CommandType">
            <summary>
            The type of command that the command-text represents
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.CommandDefinition.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.CommandDefinition.AddToCache">
            <summary>
            Should the plan for this query be cached?
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.CommandDefinition.Flags">
            <summary>
            Additional state flags against this command
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.CommandDefinition.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.CommandFlags">
            <summary>
            Additional state flags that control command behaviour
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.CommandFlags.None">
            <summary>
            No additional flags
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.CommandFlags.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.CommandFlags.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.CommandFlags.NoCache">
            <summary>
            Should the plan cache be bypassed?
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.CustomPropertyTypeMap">
            <summary>
            Implements custom property mapping by user provided criteria (usually presence of some custom attribute with column to member mapping)
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.ITypeMap">
            <summary>
            Implement this interface to change default mapping of reader columns to type members
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper">
            <summary>
            Dapper, a light weight object mapper for ADO.NET
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.SqlMapper.DataTableTypeNameKey">
            <summary>
            Key used to indicate the type name associated with a DataTable
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.PurgeQueryCache">
            <summary>
            Purge the query cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GetCachedSQLCount">
            <summary>
            Return a count of all the cached queries by dapper
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GetCachedSQL(System.Int32)">
            <summary>
            Return a list of all the queries cached by dapper
            </summary>
            <param name="ignoreHitCountAbove"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GetHashCollissions">
            <summary>
            Deep diagnostics only: find any hash collisions in the cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ResetTypeHandlers">
            <summary>
            Clear the registered type handlers
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.AddTypeMap(System.Type,System.Data.DbType)">
            <summary>
            Configure the specified type to be mapped to a given db-type
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.AddTypeHandler(System.Type,ServiceStack.OrmLite.Dapper.SqlMapper.ITypeHandler)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.AddTypeHandlerImpl(System.Type,ServiceStack.OrmLite.Dapper.SqlMapper.ITypeHandler,System.Boolean)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.AddTypeHandler``1(ServiceStack.OrmLite.Dapper.SqlMapper.TypeHandler{``0})">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GetDbType(System.Object)">
            <summary>
            Get the DbType that maps to a given value
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.LookupDbType(System.Type,System.String,System.Boolean,ServiceStack.OrmLite.Dapper.SqlMapper.ITypeHandler@)">
            <summary>
            OBSOLETE: For internal usage only. Lookup the DbType and handler for a given Type and member
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Obtains the data as a list; if it is *already* a list, the original object is returned without
            any duplication; otherwise, ToList() is invoked.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Execute(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Execute(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteScalar(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            DataTable table = new DataTable("MyTable");
            using (var reader = ExecuteReader(cnn, sql, param))
            {
                table.Load(reader);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition,System.Data.CommandBehavior)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a sequence of dynamic objects with properties matching the columns
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirst(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirstOrDefault(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingle(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingleOrDefault(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirst``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirstOrDefault``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingle``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingleOrDefault``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirst(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirstOrDefault(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingle(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingleOrDefault(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query``1(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirst``1(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A single instance or null of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirstOrDefault``1(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A single or null instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingle``1(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A single instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingleOrDefault``1(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A single instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryMultiple(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryMultiple(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query``3(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst">The first type in the record set</typeparam>
            <typeparam name="TSecond">The second type in the record set</typeparam>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query``4(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query``5(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 4 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query``6(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 5 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query``7(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 6 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query``8(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 7 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TSeventh"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Type[],System.Func{System.Object[],``0},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with arbitrary input parameters
            </summary>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="types">array of types in the record set</param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ReadChar(System.Object)">
            <summary>
            Internal use only
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ReadNullableChar(System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.FindOrAddParameter(System.Data.IDataParameterCollection,System.Data.IDbCommand,System.String)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.PackListParameters(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.SanitizeParameterValue(System.Object)">
            <summary>
            OBSOLETE: For internal usage only. Sanitizes the paramter value with proper type casting.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ReplaceLiterals(ServiceStack.OrmLite.Dapper.SqlMapper.IParameterLookup,System.Data.IDbCommand)">
            <summary>
            Replace all literal tokens with their text form
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Format(System.Object)">
            <summary>
            Convert numeric values to their string form for SQL literal purposes
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.CreateParamInfoGenerator(ServiceStack.OrmLite.Dapper.SqlMapper.Identity,System.Boolean,System.Boolean)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.SqlMapper.TypeMapProvider">
            <summary>
            Gets type-map for the given type
            </summary>
            <returns>Type map instance, default is to create new instance of DefaultTypeMap</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GetTypeMap(System.Type)">
            <summary>
            Gets type-map for the given type
            </summary>
            <returns>Type map implementation, DefaultTypeMap instance if no override present</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.SetTypeMap(System.Type,ServiceStack.OrmLite.Dapper.SqlMapper.ITypeMap)">
            <summary>
            Set custom mapping for type deserializers
            </summary>
            <param name="type">Entity type to override</param>
            <param name="map">Mapping rules impementation, null to remove custom map</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GetTypeDeserializer(System.Type,System.Data.IDataReader,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Internal use only
            </summary>
            <param name="type"></param>
            <param name="reader"></param>
            <param name="startBound"></param>
            <param name="length"></param>
            <param name="returnNullIfFirstMissing"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ThrowDataException(System.Exception,System.Int32,System.Data.IDataReader,System.Object)">
            <summary>
            Throws a data exception, only used internally
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.AsTableValuedParameter(System.Data.DataTable,System.String)">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.SetTypeName(System.Data.DataTable,System.String)">
            <summary>
            Associate a DataTable with a type name
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GetTypeName(System.Data.DataTable)">
            <summary>
            Fetch the type name associated with a DataTable
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.AsTableValuedParameter(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Server.SqlDataRecord},System.String)">
            <summary>
            Used to pass a IEnumerable&lt;SqlDataRecord&gt; as a TableValuedParameter
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Parse``1(System.Data.IDataReader)">
            <summary>
            Parses a data reader to a sequence of data of the supplied type. Used for deserializing a reader without a connection, etc.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Parse(System.Data.IDataReader,System.Type)">
            <summary>
            Parses a data reader to a sequence of data of the supplied type (as object). Used for deserializing a reader without a connection, etc.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Parse(System.Data.IDataReader)">
            <summary>
            Parses a data reader to a sequence of dynamic. Used for deserializing a reader without a connection, etc.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GetRowParser(System.Data.IDataReader,System.Type,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the row parser for a specific row on a data reader. This allows for type switching every row based on, for example, a TypeId column.
            You could return a collection of the base type but have each more specific.
            </summary>
            <param name="reader">The data reader to get the parser for the current row from</param>
            <param name="type">The type to get the parser for</param>
            <param name="startIndex">The start column index of the object (default 0)</param>
            <param name="length">The length of columns to read (default -1 = all fields following startIndex)</param>
            <param name="returnNullIfFirstMissing">Return null if we can't find the first column? (default false)</param>
            <returns>A parser for this specific object from this row.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GetRowParser``1(System.Data.IDataReader,System.Type,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the row parser for a specific row on a data reader. This allows for type switching every row based on, for example, a TypeId column.
            You could return a collection of the base type but have each more specific.
            </summary>
            <param name="reader">The data reader to get the parser for the current row from</param>
            <param name="concreteType">The type to get the parser for</param>
            <param name="startIndex">The start column index of the object (default 0)</param>
            <param name="length">The length of columns to read (default -1 = all fields following startIndex)</param>
            <param name="returnNullIfFirstMissing">Return null if we can't find the first column? (default false)</param>
            <returns>A parser for this specific object from this row.</returns>
            <example>
            var result = new List&lt;BaseType&gt;();
            using (var reader = connection.ExecuteReader(@"
              select 'abc' as Name, 1 as Type, 3.0 as Value
              union all
              select 'def' as Name, 2 as Type, 4.0 as Value"))
            {
                if (reader.Read())
                {
                    var toFoo = reader.GetRowParser&lt;BaseType&gt;(typeof(Foo));
                    var toBar = reader.GetRowParser&lt;BaseType&gt;(typeof(Bar));
                    var col = reader.GetOrdinal("Type");
                    do
                    {
                        switch (reader.GetInt32(col))
                        {
                            case 1:
                                result.Add(toFoo(reader));
                                break;
                            case 2:
                                result.Add(toBar(reader));
                                break;
                        }
                    } while (reader.Read());
                }
            }
             
            abstract class BaseType
            {
                public abstract int Type { get; }
            }
            class Foo : BaseType
            {
                public string Name { get; set; }
                public override int Type =&gt; 1;
            }
            class Bar : BaseType
            {
                public float Value { get; set; }
                public override int Type =&gt; 2;
            }
            </example>
        </member>
        <member name="E:ServiceStack.OrmLite.Dapper.SqlMapper.QueryCachePurged">
            <summary>
            Called if the query cache is purged via PurgeQueryCache
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.ConnectionStringComparer">
            <summary>
            How should connection strings be compared for equivalence? Defaults to StringComparer.Ordinal.
            Providing a custom implementation can be useful for allowing multi-tenancy databases with identical
            schema to share strategies. Note that usual equivalence rules apply: any equivalent connection strings
            <b>MUST</b> yield the same hash-code.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.DontMap">
            <summary>
            Dummy type for excluding from multi-map
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader">
            <summary>
            The grid reader provides interfaces for reading multiple result sets from a Dapper query
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read(System.Boolean)">
            <summary>
            Read the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadFirst">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadFirstOrDefault">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadSingle">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadSingleOrDefault">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read``1(System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadFirst``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadFirstOrDefault``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadSingle``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadSingleOrDefault``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read(System.Type,System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadFirst(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadFirstOrDefault(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadSingle(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadSingleOrDefault(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read``3(System.Func{``0,``1,``2},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read``4(System.Func{``0,``1,``2,``3},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read``1(System.Type[],System.Func{System.Object[],``0},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Dispose">
            <summary>
            Dispose the grid, closing and disposing both the underlying reader and command.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.IsConsumed">
            <summary>
            Has the underlying reader been consumed?
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Command">
            <summary>
            The command associated with the reader
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.ICustomQueryParameter">
            <summary>
            Implement this interface to pass an arbitrary db specific parameter to Dapper
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ICustomQueryParameter.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter needed to the command before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="name">Parameter name</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.Identity">
            <summary>
            Identity of a cached query in Dapper, used for extensibility
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.ForDynamicParameters(System.Type)">
            <summary>
            Create an identity for use with DynamicParameters, internal use only
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.Equals(System.Object)">
             <summary>
            
             </summary>
             <param name="obj"></param>
             <returns></returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.sql">
            <summary>
            The sql
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.commandType">
            <summary>
            The command type
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.hashCode">
             <summary>
            
             </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.gridIndex">
             <summary>
            
             </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.type">
             <summary>
            
             </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.connectionString">
             <summary>
            
             </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.parametersType">
             <summary>
            
             </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.GetHashCode">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.Equals(ServiceStack.OrmLite.Dapper.SqlMapper.Identity)">
            <summary>
            Compare 2 Identity objects
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.IDynamicParameters">
            <summary>
            Implement this interface to pass an arbitrary db specific set of parameters to Dapper
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.IDynamicParameters.AddParameters(System.Data.IDbCommand,ServiceStack.OrmLite.Dapper.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.IMemberMap">
            <summary>
            Implements this interface to provide custom member mapping
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.IMemberMap.ColumnName">
            <summary>
            Source DataReader column name
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.IMemberMap.MemberType">
            <summary>
             Target member type
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.IMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.IMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.IMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.IParameterCallbacks">
            <summary>
            Extends IDynamicParameters with facilities for executing callbacks after commands have completed
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.IParameterCallbacks.OnCompleted">
            <summary>
            Invoked when the command has executed
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.IParameterLookup">
            <summary>
            Extends IDynamicParameters providing by-name lookup of parameter values
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.IParameterLookup.Item(System.String)">
            <summary>
            Get the value of the specified parameter (return null if not found)
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.ITypeHandler">
            <summary>
            Implement this interface to perform custom type-based parameter handling and value parsing
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ITypeHandler.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ITypeHandler.Parse(System.Type,System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <param name="destinationType">The type to parse to</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.ITypeMap">
            <summary>
            Implement this interface to change default mapping of reader columns to type members
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ITypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ITypeMap.FindExplicitConstructor">
            <summary>
            Returns a constructor which should *always* be used.
            
            Parameters will be default values, nulls for reference types and zero'd for value types.
            
            Use this class to force object creation away from parameterless constructors you don't control.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ITypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ITypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.Link`2">
            <summary>
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.LiteralToken">
            <summary>
            Represents a placeholder for a value that should be replaced as a literal value in the resulting sql
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.LiteralToken.Token">
            <summary>
            The text in the original command that should be replaced
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.LiteralToken.Member">
            <summary>
            The name of the member referred to by the token
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.Settings">
            <summary>
            Permits specifying certain SqlMapper values globally.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Settings.SetDefaults">
            <summary>
            Resets all Settings to their default values
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.Settings.CommandTimeout">
            <summary>
            Specifies the default Command Timeout for all Queries
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.Settings.ApplyNullValues">
            <summary>
            Indicates whether nulls in data are silently ignored (default) vs actively applied and assigned to members
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.Settings.PadListExpansions">
            <summary>
            Should list expansions be padded with null-valued parameters, to prevent query-plan saturation? For example,
            an 'in @foo' expansion with 7, 8 or 9 values will be sent as a list of 10 values, with 3, 2 or 1 of them null.
            The padding size is relative to the size of the list; "next 10" under 150, "next 50" under 500,
            "next 100" under 1500, etc.
            </summary>
            <remarks>
            Caution: this should be treated with care if your DB provider (or the specific configuration) allows for null
            equality (aka "ansi nulls off"), as this may change the intent of your query; as such, this is disabled by 
            default and must be enabled.
            </remarks>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.TypeHandler`1">
            <summary>
            Base-class for simple type-handlers
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.TypeHandler`1.SetValue(System.Data.IDbDataParameter,`0)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.TypeHandler`1.Parse(System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.StringTypeHandler`1">
            <summary>
            Base-class for simple type-handlers that are based around strings
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.StringTypeHandler`1.Parse(System.String)">
            <summary>
            Parse a string into the expected type (the string will never be null)
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.StringTypeHandler`1.Format(`0)">
            <summary>
            Format an instace into a string (the instance will never be null)
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.StringTypeHandler`1.SetValue(System.Data.IDbDataParameter,`0)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.StringTypeHandler`1.Parse(System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.TypeHandlerCache`1">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.TypeHandlerCache`1.Parse(System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.TypeHandlerCache`1.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.UdtTypeHandler">
            <summary>
            A type handler for data-types that are supported by the underlying provider, but which need
            a well-known UdtTypeName to be specified
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.UdtTypeHandler.#ctor(System.String)">
            <summary>
            Creates a new instance of UdtTypeHandler with the specified UdtTypeName
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.CustomPropertyTypeMap.#ctor(System.Type,System.Func{System.Type,System.String,System.Reflection.PropertyInfo})">
            <summary>
            Creates custom property mapping
            </summary>
            <param name="type">Target entity type</param>
            <param name="propertySelector">Property selector based on target type and DataReader column name</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.CustomPropertyTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Always returns default constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Default constructor</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.CustomPropertyTypeMap.FindExplicitConstructor">
            <summary>
            Always returns null
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.CustomPropertyTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Not implemented as far as default constructor used for all cases
            </summary>
            <param name="constructor"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.CustomPropertyTypeMap.GetMember(System.String)">
            <summary>
            Returns property based on selector strategy
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Poperty member map</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.DbString">
            <summary>
            This class represents a SQL string, it can be used if you need to denote your parameter is a Char vs VarChar vs nVarChar vs nChar
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.DbString.DefaultLength">
            <summary>
            A value to set the default value of strings
            going through Dapper. Default is 4000, any value larger than this
            field will not have the default value applied.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DbString.#ctor">
            <summary>
            Create a new DbString
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DbString.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter to the command... internal use only
            </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.DbString.IsAnsiDefault">
            <summary>
            Default value for IsAnsi.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.DbString.IsAnsi">
            <summary>
            Ansi vs Unicode 
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.DbString.IsFixedLength">
            <summary>
            Fixed length 
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.DbString.Length">
            <summary>
            Length of the string -1 for max
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.DbString.Value">
            <summary>
            The value of the string
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.DefaultTypeMap">
            <summary>
            Represents default type mapping strategy used by Dapper
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DefaultTypeMap.#ctor(System.Type)">
            <summary>
            Creates default type map
            </summary>
            <param name="type">Entity type</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DefaultTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DefaultTypeMap.FindExplicitConstructor">
            <summary>
            Returns the constructor, if any, that has the ExplicitConstructorAttribute on it.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DefaultTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DefaultTypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.DefaultTypeMap.MatchNamesWithUnderscores">
            <summary>
            Should column names like User_Id be allowed to match properties/fields like UserId ?
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.DefaultTypeMap.Properties">
            <summary>
            The settable properties for this typemap
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.DynamicParameters">
            <summary>
            A bag of parameters that can be passed to the Dapper Query and Execute methods
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DynamicParameters.#ctor">
            <summary>
            construct a dynamic parameter bag
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DynamicParameters.#ctor(System.Object)">
            <summary>
            construct a dynamic parameter bag
            </summary>
            <param name="template">can be an anonymous type or a DynamicParameters bag</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DynamicParameters.AddDynamicParams(System.Object)">
            <summary>
            Append a whole object full of params to the dynamic
            EG: AddDynamicParams(new {A = 1, B = 2}) // will add property A and B to the dynamic
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DynamicParameters.AddParameters(System.Data.IDbCommand,ServiceStack.OrmLite.Dapper.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DynamicParameters.Get``1(System.String)">
            <summary>
            Get the value of a parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns>The value, note DBNull.Value is not returned, instead the value is returned as null</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DynamicParameters.Output``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Data.DbType},System.Nullable{System.Int32})">
            <summary>
            Allows you to automatically populate a target property/field from output parameters. It actually
            creates an InputOutput parameter, so you can still pass data in.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The object whose property/field you wish to populate.</param>
            <param name="expression">A MemberExpression targeting a property/field of the target (or descendant thereof.)</param>
            <param name="dbType"></param>
            <param name="size">The size to set on the parameter. Defaults to 0, or DbString.DefaultLength in case of strings.</param>
            <returns>The DynamicParameters instance</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.DynamicParameters.RemoveUnused">
            <summary>
            If true, the command-text is inspected and only values that are clearly used are included on the connection
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.DynamicParameters.ParameterNames">
            <summary>
            All the names of the param in the bag, use Get to yank them out
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.ExplicitConstructorAttribute">
            <summary>
            Tell Dapper to use an explicit constructor, passing nulls or 0s for all parameters
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.FeatureSupport">
            <summary>
            Handles variances in features per DBMS
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.FeatureSupport.Get(System.Data.IDbConnection)">
            <summary>
            Gets the feature set based on the passed connection
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.FeatureSupport.Arrays">
            <summary>
            True if the db supports array columns e.g. Postgresql
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SimpleMemberMap">
            <summary>
            Represents simple member map for one of target parameter or property or field to source DataReader column
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Creates instance for simple property mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="property">Target property</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.FieldInfo)">
            <summary>
            Creates instance for simple field mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="field">Target property</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.ParameterInfo)">
            <summary>
            Creates instance for simple constructor parameter mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="parameter">Target constructor parameter</param>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SimpleMemberMap.ColumnName">
            <summary>
            DataReader column name
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SimpleMemberMap.MemberType">
            <summary>
            Target member type
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SimpleMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SimpleMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SimpleMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlDataRecordListTVPParameter">
            <summary>
            Used to pass a IEnumerable&lt;SqlDataRecord&gt; as a SqlDataRecordListTVPParameter
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlDataRecordListTVPParameter.#ctor(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Server.SqlDataRecord},System.String)">
            <summary>
            Create a new instance of SqlDataRecordListTVPParameter
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.TableValuedParameter">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.TableValuedParameter.#ctor(System.Data.DataTable)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.TableValuedParameter.#ctor(System.Data.DataTable,System.String)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.IWrappedDataReader">
            <summary>
            Describes a reader that controls the lifetime of both a command and a reader,
            exposing the downstream command/reader as properties.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.IWrappedDataReader.Reader">
            <summary>
            Obtain the underlying reader
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.IWrappedDataReader.Command">
            <summary>
            Obtain the underlying command
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.PredicateBuilder">
            <summary>
            Enables the efficient, dynamic composition of query predicates.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.True``1">
            <summary>
            Creates a predicate that evaluates to true.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.False``1">
            <summary>
            Creates a predicate that evaluates to false.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a predicate expression from the specified lambda expression.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines the first predicate with the second using the logical "and".
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines the first predicate with the second using the logical "or".
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Negates the predicate.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Combines the first expression with the second using the specified merge function.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.SelectFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Returns results from using an SqlFormat query. E.g:
            <para>db.SelectFmt&lt;Person&gt;("Age &gt; {0}", 40)</para>
            <para>db.SelectFmt&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; {0}", 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.SelectFmt``1(System.Data.IDbConnection,System.Type,System.String,System.Object[])">
            <summary>
            Returns a partial subset of results from the specified tableType using a SqlFormat query. E.g:
            <para>db.SelectFmt&lt;EntityWithId&gt;(typeof(Person), "Age &gt; {0}", 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.SelectLazyFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Returns a lazyily loaded stream of results using an SqlFilter query. E.g:
            <para>db.SelectLazyFmt&lt;Person&gt;("Age &gt; {0}", 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.SingleFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Returns the first result using a SqlFormat query. E.g:
            <para>db.SingleFmt&lt;Person&gt;("Age = {0}", 42)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.ScalarFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Returns a single scalar value using an SqlFormat query. E.g:
            <para>db.ScalarFmt&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &gt; {0}", 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.ColumnFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Returns the first column in a List using a SqlFormat query. E.g:
            <para>db.ColumnFmt&lt;string&gt;("SELECT LastName FROM Person WHERE Age = {0}", 27)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.ColumnDistinctFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlFormat query. E.g:
            <para>db.ColumnDistinctFmt&lt;int&gt;("SELECT Age FROM Person WHERE Age &lt; {0}", 50)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.LookupFmt``2(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an SqlFormat query. E.g:
            <para>db.LookupFmt&lt;int, string&gt;("SELECT Age, LastName FROM Person WHERE Age &lt; {0}", 50)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.DictionaryFmt``2(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Returns a Dictionary from the first 2 columns: Column 1 (Keys), Column 2 (Values) using an SqlFormat query. E.g:
            <para>db.DictionaryFmt&lt;int, string&gt;("SELECT Id, LastName FROM Person WHERE Age &lt; {0}", 50)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.ExistsFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Returns true if the Query returns any records, using an SqlFormat query. E.g:
            <para>db.ExistsFmt&lt;Person&gt;("Age = {0}", 42)</para>
            <para>db.ExistsFmt&lt;Person&gt;("SELECT * FROM Person WHERE Age = {0}", 50)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.Exists``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}})">
            <summary>
            Returns true if the Query returns any records that match the SqlExpression lambda, E.g:
            <para>db.Exists&lt;Person&gt;(q =&gt; q.Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiLegacy.SqlExpression``1(System.Data.IDbConnection)">
            <summary>
            Create a new SqlExpression builder allowing typed LINQ-like queries.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiLegacy.Select``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}})">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.Select&lt;Person&gt;(q =&gt; q.Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiLegacy.Select``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``1})">
            <summary>
            Project results from a number of joined tables into a different model
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiLegacy.Select``2(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``1},ServiceStack.OrmLite.SqlExpression{``1}})">
            <summary>
            Project results from a number of joined tables into a different model
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiLegacy.Single``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}})">
            <summary>
            Returns a single result from using an SqlExpression lambda. E.g:
            <para>db.Single&lt;Person&gt;(q =&gt; q.Where(x =&gt; x.Age == 42))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiLegacy.Count``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}})">
            <summary>
            Returns the count of rows that match the SqlExpression lambda, E.g:
            <para>db.Count&lt;Person&gt;(q =&gt; q.Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiLegacy.LoadSelect``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns results with references from using an SqlExpression lambda. E.g:
            <para>db.LoadSelect&lt;Person&gt;(q =&gt; q.Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiLegacy.LoadSelect``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}},System.Func{``0,System.Object})">
            <summary>
            Returns results with references from using an SqlExpression lambda. E.g:
            <para>db.LoadSelect&lt;Person&gt;(q =&gt; q.Where(x =&gt; x.Age &gt; 40), include: x => new { x.PrimaryAddress })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteCommandExtensionsLegacy.DeleteFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Delete rows using a SqlFormat filter. E.g:
            <para>db.Delete&lt;Person&gt;("Age > {0}", 42)</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteCommandExtensionsLegacy.DeleteFmt(System.Data.IDbConnection,System.Type,System.String,System.Object[])">
            <summary>
            Delete rows from the runtime table type using a SqlFormat filter. E.g:
            </summary>
            <para>db.DeleteFmt(typeof(Person), "Age = {0}", 27)</para>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiLegacy.InsertOnly``1(System.Data.IDbConnection,``0,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}})">
            <summary>
            Insert only fields in POCO specified by the SqlExpression lambda. E.g:
            <para>db.InsertOnly(new Person { FirstName = "Amy", Age = 27 }, q =&gt; q.Insert(p =&gt; new { p.FirstName, p.Age }))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiLegacy.UpdateOnly``1(System.Data.IDbConnection,``0,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}})">
            <summary>
            Use an SqlExpression to select which fields to update and construct the where expression, E.g: 
            
              db.UpdateOnly(new Person { FirstName = "JJ" }, ev => ev.Update(p => p.FirstName).Where(x => x.FirstName == "Jimi"));
              UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')
            
              What's not in the update expression doesn't get updated. No where expression updates all rows. E.g:
            
              db.UpdateOnly(new Person { FirstName = "JJ", LastName = "Hendo" }, ev => ev.Update(p => p.FirstName));
              UPDATE "Person" SET "FirstName" = 'JJ'
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiLegacy.UpdateFmt``1(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Flexible Update method to succinctly execute a free-text update statement using optional params. E.g:
            
              db.Update&lt;Person&gt;(set:"FirstName = {0}".Params("JJ"), where:"LastName = {0}".Params("Hendrix"));
              UPDATE "Person" SET FirstName = 'JJ' WHERE LastName = 'Hendrix'
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiLegacy.UpdateFmt(System.Data.IDbConnection,System.String,System.String,System.String)">
            <summary>
            Flexible Update method to succinctly execute a free-text update statement using optional params. E.g.
            
              db.Update(table:"Person", set: "FirstName = {0}".Params("JJ"), where: "LastName = {0}".Params("Hendrix"));
              UPDATE "Person" SET FirstName = 'JJ' WHERE LastName = 'Hendrix'
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiLegacy.DeleteFmt``1(System.Data.IDbConnection,System.String)">
            <summary>
            Flexible Delete method to succinctly execute a delete statement using free-text where expression. E.g.
            
              db.Delete&lt;Person&gt;(where:"Age = {0}".Params(27));
              DELETE FROM "Person" WHERE Age = 27
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiLegacy.DeleteFmt(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Flexible Delete method to succinctly execute a delete statement using free-text where expression. E.g.
            
              db.Delete(table:"Person", where: "Age = {0}".Params(27));
              DELETE FROM "Person" WHERE Age = 27
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiLegacy.Delete``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}})">
            <summary>
            Delete the rows that matches the where expression, e.g:
            
              db.Delete&lt;Person&gt;(ev => ev.Where(p => p.Age == 27));
              DELETE FROM "Person" WHERE ("Age" = 27)
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiLegacy.InsertOnly``1(System.Data.IDbConnection,``0,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Using an SqlExpression to only Insert the fields specified, e.g:
            
              db.InsertOnly(new Person { FirstName = "Amy" }, q => q.Insert(p => new { p.FirstName }));
              INSERT INTO "Person" ("FirstName") VALUES ('Amy');
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteConnection">
            <summary>
            Wrapper IDbConnection class to allow for connection sharing, mocking, etc.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteConnectionFactory">
            <summary>
            Allow for mocking and unit testing by providing non-disposing 
            connection factory with injectable IDbCommand and IDbTransaction proxies
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnectionFactory.AlwaysReturnCommand">
            <summary>
            Force the IDbConnection to always return this IDbCommand
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnectionFactory.AlwaysReturnTransaction">
            <summary>
            Force the IDbConnection to always return this IDbTransaction
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.Open(ServiceStack.Data.IDbConnectionFactory)">
            <summary>
            Alias for OpenDbConnection
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.Open(ServiceStack.Data.IDbConnectionFactory,System.String)">
            <summary>
            Alias for OpenDbConnection
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteContext.UseThreadStatic">
            <summary>
            Tell ServiceStack to use ThreadStatic Items Collection for Context Scoped items.
            Warning: ThreadStatic Items aren't pinned to the same request in async services which callback on different threads.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteContext.Items">
            <summary>
            Gets a list of items for this context. 
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLitePersistenceProvider">
            <summary>
            Allow for code-sharing between OrmLite, IPersistenceProvider and ICacheClient
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection)">
            <summary>
            Returns results from the active connection.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.String)">
            <summary>
            Returns results from using sql. E.g:
            <para>db.Select&lt;Person&gt;("Age &gt; 40")</para>
            <para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; 40")</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns results from using sql. E.g:
            <para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new[] { db.CreateParam("age", 40) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns results from using a parameterized query. E.g:
            <para>db.Select&lt;Person&gt;("Age &gt; @age", new { age = 40})</para>
            <para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new { age = 40})</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns results from using a parameterized query. E.g:
            <para>db.Select&lt;Person&gt;("Age &gt; @age", new Dictionary&lt;string, object&gt; { { "age", 40 } })</para>
            <para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new Dictionary&lt;string, object&gt; { { "age", 40 } })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.Type,System.String,System.Object)">
            <summary>
            Returns a partial subset of results from the specified tableType. E.g:
            <para>db.Select&lt;EntityWithId&gt;(typeof(Person))</para>
            <para></para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.Type)">
            <summary>
            Returns a partial subset of results from the specified tableType. E.g:
            <para>db.Select&lt;EntityWithId&gt;(typeof(Person))</para>
            <para></para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Where``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns results from using a single name, value filter. E.g:
            <para>db.Where&lt;Person&gt;("Age", 27)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Where``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Returns results from using an anonymous type filter. E.g:
            <para>db.Where&lt;Person&gt;(new { Age = 27 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SelectByIds``1(System.Data.IDbConnection,System.Collections.IEnumerable)">
            <summary>
            Returns results using the supplied primary key ids. E.g:
            <para>db.SelectByIds&lt;Person&gt;(new[] { 1, 2, 3 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SelectNonDefaults``1(System.Data.IDbConnection,``0)">
            <summary>
            Query results using the non-default values in the supplied partially populated POCO example. E.g:
            <para>db.SelectNonDefaults(new Person { Id = 1 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SelectNonDefaults``1(System.Data.IDbConnection,System.String,``0)">
            <summary>
            Query results using the non-default values in the supplied partially populated POCO example. E.g:
            <para>db.SelectNonDefaults("Age &gt; @Age", new Person { Age = 42 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SelectLazy``1(System.Data.IDbConnection)">
            <summary>
            Returns a lazyily loaded stream of results. E.g:
            <para>db.SelectLazy&lt;Person&gt;()</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SelectLazy``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns a lazyily loaded stream of results using a parameterized query. E.g:
            <para>db.SelectLazy&lt;Person&gt;("Age &gt; @age", new { age = 40 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SelectLazy``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Returns a lazyily loaded stream of results using a parameterized query. E.g:
            <para>db.SelectLazy(db.From&lt;Person&gt;().Where(x =&gt; x == 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.WhereLazy``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Returns a stream of results that are lazily loaded using a parameterized query. E.g:
            <para>db.WhereLazy&lt;Person&gt;(new { Age = 27 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Single``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Returns the first result using a parameterized query. E.g:
            <para>db.Single&lt;Person&gt;(new { Age = 42 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Single``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns results from using a single name, value filter. E.g:
            <para>db.Single&lt;Person&gt;("Age = @age", new[] { db.CreateParam("age",40) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Single``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns results from using a single name, value filter. E.g:
            <para>db.Single&lt;Person&gt;("Age = @age", new { age = 42 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SingleById``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Returns the first result using a primary key id. E.g:
            <para>db.SingleById&lt;Person&gt;(1)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SingleWhere``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns the first result using a name, value filter. E.g:
            <para>db.SingleWhere&lt;Person&gt;("Age", 42)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Scalar``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Returns a single scalar value using an SqlExpression. E.g:
            <para>db.Column&lt;int&gt;(db.From&lt;Persion&gt;().Select(x => Sql.Count("*")).Where(q => q.Age > 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Scalar``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns a single scalar value using a parameterized query. E.g:
            <para>db.Scalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &gt; @age", new[] { db.CreateParam("age",40) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Scalar``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns a single scalar value using a parameterized query. E.g:
            <para>db.Scalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &gt; @age", new { age = 40 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Column``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlExpression. E.g:
            <para>db.Column&lt;int&gt;(db.From&lt;Persion&gt;().Select(x => x.LastName).Where(q => q.Age == 27))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Column``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns the first column in a List using a SqlFormat query. E.g:
            <para>db.Column&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new[] { db.CreateParam("age",27) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ColumnLazy``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlExpression. E.g:
            <para>db.ColumnLazy&lt;int&gt;(db.From&lt;Persion&gt;().Select(x => x.LastName).Where(q => q.Age == 27))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ColumnLazy``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns the first column in a List using a SqlFormat query. E.g:
            <para>db.ColumnLazy&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new[] { db.CreateParam("age",27) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ColumnLazy``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns the first column in a List using a SqlFormat query. E.g:
            <para>db.ColumnLazy&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new { age = 27 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Column``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns the first column in a List using a SqlFormat query. E.g:
            <para>db.Column&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new { age = 27 })</para>
            </summary>
        </member>
        <!-- 对于成员“M:ServiceStack.OrmLite.OrmLiteReadApi.ColumnDistinct``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)”忽略有格式错误的 XML 注释 -->
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ColumnDistinct``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlFormat query. E.g:
            <para>db.ColumnDistinct&lt;int&gt;("SELECT Age FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ColumnDistinct``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlFormat query. E.g:
            <para>db.ColumnDistinct&lt;int&gt;("SELECT Age FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <!-- 对于成员“M:ServiceStack.OrmLite.OrmLiteReadApi.Lookup``2(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)”忽略有格式错误的 XML 注释 -->
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Lookup``2(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an parameterized query. E.g:
            <para>db.Lookup&lt;int, string&gt;("SELECT Age, LastName FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Lookup``2(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an parameterized query. E.g:
            <para>db.Lookup&lt;int, string&gt;("SELECT Age, LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <!-- 对于成员“M:ServiceStack.OrmLite.OrmLiteReadApi.Dictionary``2(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)”忽略有格式错误的 XML 注释 -->
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Dictionary``2(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns a Dictionary from the first 2 columns: Column 1 (Keys), Column 2 (Values) using sql. E.g:
            <para>db.Dictionary&lt;int, string&gt;("SELECT Id, LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Exists``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns true if the Query returns any records that match the LINQ expression, E.g:
            <para>db.Exists&lt;Person&gt;(x =&gt; x.Age &lt; 50)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Exists``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Returns true if the Query returns any records that match the supplied SqlExpression, E.g:
            <para>db.Exists(db.From&lt;Person&gt;().Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Exists``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Returns true if the Query returns any records, using an SqlFormat query. E.g:
            <para>db.Exists&lt;Person&gt;(new { Age = 42 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Exists``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns true if the Query returns any records, using a parameterized query. E.g:
            <para>db.Exists&lt;Person&gt;("Age = @age", new { age = 42 })</para>
            <para>db.Exists&lt;Person&gt;("SELECT * FROM Person WHERE Age = @age", new { age = 42 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Returns results from an arbitrary SqlExpression. E.g:
            <para>db.SqlList&lt;Person&gt;(db.From&lt;Person&gt;().Select("*").Where(q => q.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns results from an arbitrary parameterized raw sql query. E.g:
            <para>db.SqlList&lt;Person&gt;("EXEC GetRockstarsAged @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns results from an arbitrary parameterized raw sql query. E.g:
            <para>db.SqlList&lt;Person&gt;("EXEC GetRockstarsAged @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns results from an arbitrary parameterized raw sql query. E.g:
            <para>db.SqlList&lt;Person&gt;("EXEC GetRockstarsAged @age", new Dictionary&lt;string, object&gt; { { "age", 42 } })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,System.String,System.Action{System.Data.IDbCommand})">
            <summary>
            Returns results from an arbitrary parameterized raw sql query with a dbCmd filter. E.g:
            <para>db.SqlList&lt;Person&gt;("EXEC GetRockstarsAged @age", dbCmd => ...)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlProc(System.Data.IDbConnection,System.String,System.Object,System.Boolean)">
            <summary>
            Prepare Stored Procedure with Input parameters, optionally populated with Input Params. E.g:
            <para>var cmd = db.SqlProc("GetRockstarsAged", new { age = 42 })</para>
            </summary>
        </member>
        <!-- 对于成员“M:ServiceStack.OrmLite.OrmLiteReadApi.SqlColumn``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)”忽略有格式错误的 XML 注释 -->
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlColumn``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns the first column in a List using a parameterized query. E.g:
            <para>db.SqlColumn&lt;string&gt;("SELECT LastName FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlColumn``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns the first column in a List using a parameterized query. E.g:
            <para>db.SqlColumn&lt;string&gt;("SELECT LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlColumn``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns the first column in a List using a parameterized query. E.g:
            <para>db.SqlColumn&lt;string&gt;("SELECT LastName FROM Person WHERE Age &lt; @age", new Dictionary&lt;string, object&gt; { { "age", 50 } })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlScalar``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Returns a single Scalar value using an SqlExpression. E.g:
            <para>db.SqlScalar&lt;int&gt;(db.From&lt;Person&gt;().Select(Sql.Count("*")).Where(q => q.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlScalar``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns a single Scalar value using a parameterized query. E.g:
            <para>db.SqlScalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new[]{ db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlScalar``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns a single Scalar value using a parameterized query. E.g:
            <para>db.SqlScalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlScalar``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns a single Scalar value using a parameterized query. E.g:
            <para>db.SqlScalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new Dictionary&lt;string, object&gt; { { "age", 50 } })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.LastInsertId(System.Data.IDbConnection)">
            <summary>
            Returns the last insert Id made from this connection.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ExecuteNonQuery(System.Data.IDbConnection,System.String)">
            <summary>
            Executes a raw sql non-query using sql. E.g:
            <para>var rowsAffected = db.ExecuteNonQuery("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFormat("WaterHouse", 7))</para>
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Executes a raw sql non-query using a parameterized query. E.g:
            <para>var rowsAffected = db.ExecuteNonQuery("UPDATE Person SET LastName=@name WHERE Id=@id", new { name = "WaterHouse", id = 7 })</para>
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes a raw sql non-query using a parameterized query.
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlProcedure``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Returns results from a Stored Procedure, using a parameterized query.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlProcedure``1(System.Data.IDbConnection,System.Object,System.String,System.Object[])">
            <summary>
            Returns results from a Stored Procedure using an SqlFormat query. E.g:
            <para></para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.LongScalar(System.Data.IDbConnection)">
            <summary>
            Returns the scalar result as a long.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.LoadSingleById``1(System.Data.IDbConnection,System.Object,System.String[])">
            <summary>
            Returns the first result with all its references loaded, using a primary key id. E.g:
            <para>db.LoadSingleById&lt;Person&gt;(1, include = new[]{ "Address" })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.LoadSingleById``1(System.Data.IDbConnection,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns the first result with all its references loaded, using a primary key id. E.g:
            <para>db.LoadSingleById&lt;Person&gt;(1, include = x => new{ x.Address })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.LoadReferences``1(System.Data.IDbConnection,``0)">
            <summary>
            Loads all the related references onto the instance. E.g:
            <para>db.LoadReferences(customer)</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.From``1(System.Data.IDbConnection)">
            <summary>
            Creates a new SqlExpression builder allowing typed LINQ-like queries.
            Alias for SqlExpression.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.From``1(System.Data.IDbConnection,System.String)">
            <summary>
            Creates a new SqlExpression builder for the specified type using a user-defined FROM sql expression.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.OpenTransaction(System.Data.IDbConnection)">
            <summary>
            Open a Transaction in OrmLite
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.OpenTransaction(System.Data.IDbConnection,System.Data.IsolationLevel)">
            <summary>
            Open a Transaction in OrmLite
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.OpenCommand(System.Data.IDbConnection)">
            <summary>
            Create a managed OrmLite IDbCommand
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Select``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns results from using a LINQ Expression. E.g:
            <para>db.Select&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Select``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.Select(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Select``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Object)">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.Select(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Single``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a single result from using a LINQ Expression. E.g:
            <para>db.Single&lt;Person&gt;(x =&gt; x.Age == 42)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Single``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.Select&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Single``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.Single(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Scalar``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns a scalar result from using an SqlExpression lambda. E.g:
            <para>db.Scalar&lt;Person, int&gt;(x =&gt; Sql.Max(x.Age))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Scalar``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a scalar result from using an SqlExpression lambda. E.g:
            <para>db.Scalar&lt;Person, int&gt;(x =&gt; Sql.Max(x.Age), , x =&gt; x.Age &lt; 50)</para>
            </summary>        
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Count``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns the count of rows that match the LINQ expression, E.g:
            <para>db.Count&lt;Person&gt;(x =&gt; x.Age &lt; 50)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Count``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Returns the count of rows that match the supplied SqlExpression, E.g:
            <para>db.Count(db.From&lt;Person&gt;().Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.RowCount``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Return the number of rows returned by the supplied expression
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.RowCount(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Return the number of rows returned by the supplied sql
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.RowCount(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Return the number of rows returned by the supplied sql and db params
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[])">
            <summary>
            Returns results with references from using a LINQ Expression. E.g:
            <para>db.LoadSelect&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns results with references from using a LINQ Expression. E.g:
            <para>db.LoadSelect&lt;Person&gt;(x =&gt; x.Age &gt; 40, include: x => new { x.PrimaryAddress })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.String[])">
            <summary>
            Returns results with references from using an SqlExpression lambda. E.g:
            <para>db.LoadSelect(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns results with references from using an SqlExpression lambda. E.g:
            <para>db.LoadSelect(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40), include:q.OnlyFields)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns results with references from using an SqlExpression lambda. E.g:
            <para>db.LoadSelect(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40), include: x => new { x.PrimaryAddress })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``1},System.String[])">
            <summary>
            Project results with references from a number of joined tables into a different model
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``1},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Project results with references from a number of joined tables into a different model
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``1},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Project results with references from a number of joined tables into a different model
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.TableExists(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Checks whether a Table Exists. E.g:
            <para>db.TableExists("Person")</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.TableExists``1(System.Data.IDbConnection)">
            <summary>
            Checks whether a Table Exists. E.g:
            <para>db.TableExists&lt;Person&gt;()</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.ColumnExists(System.Data.IDbConnection,System.String,System.String,System.String)">
            <summary>
            Checks whether a Table Column Exists. E.g:
            <para>db.ColumnExists("Age", "Person")</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.ColumnExists``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Checks whether a Table Column Exists. E.g:
            <para>db.ColumnExists&lt;Person&gt;(x =&gt; x.Age)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateTables(System.Data.IDbConnection,System.Boolean,System.Type[])">
            <summary>
            Create DB Tables from the schemas of runtime types. E.g:
            <para>db.CreateTables(typeof(Table1), typeof(Table2))</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateTable(System.Data.IDbConnection,System.Boolean,System.Type)">
            <summary>
            Create DB Table from the schema of the runtime type. Use overwrite to drop existing Table. E.g:
            <para>db.CreateTable(true, typeof(Table))</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateTableIfNotExists(System.Data.IDbConnection,System.Type[])">
            <summary>
            Only Create new DB Tables from the schemas of runtime types if they don't already exist. E.g:
            <para>db.CreateTableIfNotExists(typeof(Table1), typeof(Table2))</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.DropAndCreateTables(System.Data.IDbConnection,System.Type[])">
            <summary>
            Drop existing DB Tables and re-create them from the schemas of runtime types. E.g:
            <para>db.DropAndCreateTables(typeof(Table1), typeof(Table2))</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateTable``1(System.Data.IDbConnection,System.Boolean)">
            <summary>
            Create a DB Table from the generic type. Use overwrite to drop the existing table or not. E.g:
            <para>db.CreateTable&lt;Person&gt;(overwrite=false) //default</para> 
            <para>db.CreateTable&lt;Person&gt;(overwrite=true)</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateTableIfNotExists``1(System.Data.IDbConnection)">
            <summary>
            Only create a DB Table from the generic type if it doesn't already exist. E.g:
            <para>db.CreateTableIfNotExists&lt;Person&gt;()</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateTableIfNotExists(System.Data.IDbConnection,System.Type)">
            <summary>
            Only create a DB Table from the runtime type if it doesn't already exist. E.g:
            <para>db.CreateTableIfNotExists(typeof(Person))</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.DropAndCreateTable``1(System.Data.IDbConnection)">
            <summary>
            Drop existing table if exists and re-create a DB Table from the generic type. E.g:
            <para>db.DropAndCreateTable&lt;Person&gt;()</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.DropAndCreateTable(System.Data.IDbConnection,System.Type)">
            <summary>
            Drop existing table if exists and re-create a DB Table from the runtime type. E.g:
            <para>db.DropAndCreateTable(typeof(Person))</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.DropTables(System.Data.IDbConnection,System.Type[])">
            <summary>
            Drop any existing tables from their runtime types. E.g:
            <para>db.DropTables(typeof(Table1),typeof(Table2))</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.DropTable(System.Data.IDbConnection,System.Type)">
            <summary>
            Drop any existing tables from the runtime type. E.g:
            <para>db.DropTable(typeof(Person))</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.DropTable``1(System.Data.IDbConnection)">
            <summary>
            Drop any existing tables from the generic type. E.g:
            <para>db.DropTable&lt;Person&gt;()</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.GetLastSql(System.Data.IDbConnection)">
            <summary>
            Get the last SQL statement that was executed.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.ExecuteSql(System.Data.IDbConnection,System.String)">
            <summary>
            Execute any arbitrary raw SQL.
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.ExecuteSql(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Execute any arbitrary raw SQL with db params.
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Insert``1(System.Data.IDbConnection,``0,System.Boolean)">
            <summary>
            Insert 1 POCO, use selectIdentity to retrieve the last insert AutoIncrement id (if any). E.g:
            <para>var id = db.Insert(new Person { Id = 1, FirstName = "Jimi }, selectIdentity:true)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Insert``1(System.Data.IDbConnection,``0[])">
            <summary>
            Insert 1 or more POCOs in a transaction. E.g:
            <para>db.Insert(new Person { Id = 1, FirstName = "Tupac", LastName = "Shakur", Age = 25 },</para>
            <para>          new Person { Id = 2, FirstName = "Biggie", LastName = "Smalls", Age = 24 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.InsertAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Insert a collection of POCOs in a transaction. E.g:
            <para>db.InsertAll(new[] { new Person { Id = 9, FirstName = "Biggie", LastName = "Smalls", Age = 24 } })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Update``1(System.Data.IDbConnection,``0)">
            <summary>
            Updates 1 POCO. All fields are updated except for the PrimaryKey which is used as the identity selector. E.g:
            <para>db.Update(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Update``1(System.Data.IDbConnection,``0[])">
            <summary>
            Updates 1 or more POCOs in a transaction. E.g:
            <para>db.Update(new Person { Id = 1, FirstName = "Tupac", LastName = "Shakur", Age = 25 },</para>
            <para>new Person { Id = 2, FirstName = "Biggie", LastName = "Smalls", Age = 24 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.UpdateAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Updates 1 or more POCOs in a transaction. E.g:
            <para>db.UpdateAll(new[] { new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 } })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Delete``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Delete rows using an anonymous type filter. E.g:
            <para>db.Delete&lt;Person&gt;(new { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Delete``1(System.Data.IDbConnection,``0)">
            <summary>
            Delete 1 row using all fields in the filter. E.g:
            <para>db.Delete(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Delete``1(System.Data.IDbConnection,``0[])">
            <summary>
            Delete 1 or more rows in a transaction using all fields in the filter. E.g:
            <para>db.Delete(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteNonDefaults``1(System.Data.IDbConnection,``0)">
            <summary>
            Delete 1 or more rows using only field with non-default values in the filter. E.g:
            <para>db.DeleteNonDefaults(new Person { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteNonDefaults``1(System.Data.IDbConnection,``0[])">
            <summary>
            Delete 1 or more rows in a transaction using only field with non-default values in the filter. E.g:
            <para>db.DeleteNonDefaults(new Person { FirstName = "Jimi", Age = 27 }, 
            new Person { FirstName = "Janis", Age = 27 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteById``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Delete 1 row by the PrimaryKey. E.g:
            <para>db.DeleteById&lt;Person&gt;(1)</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteById``1(System.Data.IDbConnection,System.Object,System.UInt64)">
            <summary>
            Delete 1 row by the PrimaryKey where the rowVersion matches the optimistic concurrency field. 
            Will throw <exception cref="T:ServiceStack.Data.OptimisticConcurrencyException">RowModefiedExeption</exception> if the 
            row does not exist or has a different row version.
            E.g: <para>db.DeleteById&lt;Person&gt;(1)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteByIds``1(System.Data.IDbConnection,System.Collections.IEnumerable)">
            <summary>
            Delete all rows identified by the PrimaryKeys. E.g:
            <para>db.DeleteById&lt;Person&gt;(new[] { 1, 2, 3 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteAll``1(System.Data.IDbConnection)">
            <summary>
            Delete all rows in the generic table type. E.g:
            <para>db.DeleteAll&lt;Person&gt;()</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Delete all rows provided. E.g:
            <para>db.DeleteAll&lt;Person&gt;(people)</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteAll(System.Data.IDbConnection,System.Type)">
            <summary>
            Delete all rows in the runtime table type. E.g:
            <para>db.DeleteAll(typeof(Person))</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Delete``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Delete rows using a SqlFormat filter. E.g:
            <para>db.Delete&lt;Person&gt;("Age > @age", new { age = 42 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Delete(System.Data.IDbConnection,System.Type,System.String,System.Object)">
            <summary>
            Delete rows using a SqlFormat filter. E.g:
            <para>db.Delete&lt;Person&gt;("Age > @age", new { age = 42 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Save``1(System.Data.IDbConnection,``0,System.Boolean)">
            <summary>
            Insert a new row or update existing row. Returns true if a new row was inserted. 
            Optional references param decides whether to save all related references as well. E.g:
            <para>db.Save(customer, references:true)</para>
            </summary>
            <returns>true if a row was inserted; false if it was updated</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Save``1(System.Data.IDbConnection,``0[])">
            <summary>
            Insert new rows or update existing rows. Return number of rows added E.g:
            <para>db.Save(new Person { Id = 10, FirstName = "Amy", LastName = "Winehouse", Age = 27 })</para>
            </summary>
            <returns>number of rows added</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.SaveAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Insert new rows or update existing rows. Return number of rows added E.g:
            <para>db.SaveAll(new [] { new Person { Id = 10, FirstName = "Amy", LastName = "Winehouse", Age = 27 } })</para>
            </summary>
            <returns>number of rows added</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.SaveAllReferences``1(System.Data.IDbConnection,``0)">
            <summary>
            Populates all related references on the instance with its primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveAllReferences(customer)</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.SaveReferences``2(System.Data.IDbConnection,``0,``1[])">
            <summary>
            Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveReference(customer, customer.Orders)</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.SaveReferences``2(System.Data.IDbConnection,``0,System.Collections.Generic.List{``1})">
            <summary>
            Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveReference(customer, customer.Orders)</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.SaveReferences``2(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveReferences(customer, customer.Orders)</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnly``1(System.Data.IDbConnection,``0,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Use an SqlExpression to select which fields to update and construct the where expression, E.g: 
            
              var q = db.From&gt;Person&lt;());
              db.UpdateOnly(new Person { FirstName = "JJ" }, q.Update(p => p.FirstName).Where(x => x.FirstName == "Jimi"));
              UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')
            
              What's not in the update expression doesn't get updated. No where expression updates all rows. E.g:
            
              db.UpdateOnly(new Person { FirstName = "JJ", LastName = "Hendo" }, ev.Update(p => p.FirstName));
              UPDATE "Person" SET "FirstName" = 'JJ'
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnly``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
             <summary>
             Update only fields in the specified expression that matches the where condition (if any), E.g:
             
               db.UpdateOnly(() => new Person { FirstName = "JJ" }, where: p => p.LastName == "Hendrix");
               UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            
               db.UpdateOnly(() => new Person { FirstName = "JJ" });
               UPDATE "Person" SET "FirstName" = 'JJ'
             </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnly``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Update only fields in the specified expression that matches the where condition (if any), E.g:
            
              db.UpdateOnly(() => new Person { FirstName = "JJ" }, db.From&gt;Person&lt;().Where(p => p.LastName == "Hendrix"));
              UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnly``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
             <summary>
             Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
             
               db.UpdateOnly(new Person { FirstName = "JJ" }, p => p.FirstName, p => p.LastName == "Hendrix");
               UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            
               db.UpdateOnly(new Person { FirstName = "JJ" }, p => p.FirstName);
               UPDATE "Person" SET "FirstName" = 'JJ'
            
               db.UpdateOnly(new Person { FirstName = "JJ", Age = 27 }, p => new { p.FirstName, p.Age );
               UPDATE "Person" SET "FirstName" = 'JJ', "Age" = 27
             </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnly``1(System.Data.IDbConnection,``0,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
            
              db.UpdateOnly(new Person { FirstName = "JJ" }, new[]{ "FirstName" }, p => p.LastName == "Hendrix");
              UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateAdd``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
             <summary>
             Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
             Numeric fields generates an increment sql which is usefull to increment counters, etc...
             avoiding concurrency conflicts
             
               db.UpdateAdd(() => new Person { Age = 5 }, where: p => p.LastName == "Hendrix");
               UPDATE "Person" SET "Age" = "Age" + 5 WHERE ("LastName" = 'Hendrix')
            
               db.UpdateAdd(() => new Person { Age = 5 });
               UPDATE "Person" SET "Age" = "Age" + 5
             </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateAdd``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
            Numeric fields generates an increment sql which is usefull to increment counters, etc...
            avoiding concurrency conflicts
            
              db.UpdateAdd(() => new Person { Age = 5 }, db.From&lt;Person&gt;().Where(p => p.LastName == "Hendrix"));
              UPDATE "Person" SET "Age" = "Age" + 5 WHERE ("LastName" = 'Hendrix')
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateNonDefaults``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Updates all non-default values set on item matching the where condition (if any). E.g
            
              db.UpdateNonDefaults(new Person { FirstName = "JJ" }, p => p.FirstName == "Jimi");
              UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.Update``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Updates all values set on item matching the where condition (if any). E.g
            
              db.Update(new Person { Id = 1, FirstName = "JJ" }, p => p.LastName == "Hendrix");
              UPDATE "Person" SET "Id" = 1,"FirstName" = 'JJ',"LastName" = NULL,"Age" = 0 WHERE ("LastName" = 'Hendrix')
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.Update``1(System.Data.IDbConnection,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Updates all matching fields populated on anonymousType that matches where condition (if any). E.g:
            
              db.Update&lt;Person&gt;(new { FirstName = "JJ" }, p => p.LastName == "Hendrix");
              UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.InsertOnly``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Using an SqlExpression to only Insert the fields specified, e.g:
            
              db.InsertOnly(new Person { FirstName = "Amy" }, p => p.FirstName));
              INSERT INTO "Person" ("FirstName") VALUES ('Amy');
            
              db.InsertOnly(new Person { Id =1 , FirstName="Amy" }, p => new { p.Id, p.FirstName }));
              INSERT INTO "Person" ("Id", "FirstName") VALUES (1, 'Amy');
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.InsertOnly``1(System.Data.IDbConnection,``0,System.String[])">
            <summary>
            Using an SqlExpression to only Insert the fields specified, e.g:
            
              db.InsertOnly(new Person { FirstName = "Amy" }, new[]{ "FirstName" }));
              INSERT INTO "Person" ("FirstName") VALUES ('Amy');
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.InsertOnly``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Using an SqlExpression to only Insert the fields specified, e.g:
            
              db.InsertOnly(() => new Person { FirstName = "Amy" }));
              INSERT INTO "Person" ("FirstName") VALUES (@FirstName);
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.Delete``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Delete the rows that matches the where expression, e.g:
            
              db.Delete&lt;Person&gt;(p => p.Age == 27);
              DELETE FROM "Person" WHERE ("Age" = 27)
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.Delete``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Delete the rows that matches the where expression, e.g:
            
              var q = db.From&lt;Person&gt;());
              db.Delete&lt;Person&gt;(q.Where(p => p.Age == 27));
              DELETE FROM "Person" WHERE ("Age" = 27)
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.SqlBuilder">
            <summary>
            Nice SqlBuilder class by @samsaffron from Dapper.Contrib:
            http://samsaffron.com/archive/2011/09/05/Digging+ourselves+out+of+the+mess+Linq-2-SQL+created
            Modified to work in .NET 3.5
            </summary>
        </member>
        <member name="T:ServiceStack.Razor.Compilation.CompilerServices">
            <summary>
            Provides service methods for compilation.
            </summary>
        </member>
        <member name="M:ServiceStack.Razor.Compilation.CompilerServices.IsAnonymousType(System.Type)">
            <summary>
            Determines if the specified type is an anonymous type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is an anonymous type, otherwise false.</returns>
        </member>
        <member name="M:ServiceStack.Razor.Compilation.CompilerServices.IsDynamicType(System.Type)">
            <summary>
            Determines if the specified type is a dynamic type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is an anonymous type, otherwise false.</returns>
        </member>
        <member name="M:ServiceStack.Razor.Compilation.CompilerServices.GetConstructors(System.Type)">
            <summary>
            Gets the public or protected constructors of the specified type.
            </summary>
            <param name="type">The target type.</param>
            <returns>An enumerable of constructors.</returns>
        </member>
        <member name="M:ServiceStack.Razor.Compilation.CompilerServices.GetLoadedAssemblies">
            <summary>
            Gets an enumerable of all assemblies loaded in the current domain.
            </summary>
            <returns>An enumerable of loaded assemblies.</returns>
        </member>
        <member name="M:ServiceStack.Razor.Compilation.DirectivesParser.TryFindGlobalDirectivesFile(System.String,System.String,System.String@)">
            <summary>
            Attempts to locate the nearest global directive file by 
            </summary>
        </member>
        <member name="P:ServiceStack.Razor.Compilation.RazorPageHost.RootNamespace">
            <summary>
            Gets or sets the root namespace used when the full namespace is inferred from the VirtualPath.
            </summary>
        </member>
        <member name="F:ServiceStack.Razor.Managers.FileSystemWatcherLiveReload.FileSystemWatcher">
            <summary>
            The purpose of the FileSystemWatcher is to ensure razor pages are
            consistent with the code generated by the razor engine. The file
            system watcher will invalidate pages and queue them for recompilation.
            </summary>
        </member>
        <member name="M:ServiceStack.Razor.Managers.FileSystemWatcherLiveReload.FileSystemWatcher_Error(System.Object,System.IO.ErrorEventArgs)">
            <summary>
            Avoid throwing unhandled exception when shutting down ASP.NET host
            </summary>
        </member>
        <member name="T:ServiceStack.Razor.Managers.RazorPageResolver">
            <summary>
            A common hook into ServiceStack and the hosting infrastructure used to resolve requests.
            </summary>
        </member>
        <member name="M:ServiceStack.Razor.Managers.RazorPageResolver.ProcessRequest(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.String)">
            <summary>
            This is called by the hosting environment via CatchAll usually for content pages.
            </summary>
        </member>
        <member name="M:ServiceStack.Razor.Managers.RazorPageResolver.ProcessRequest(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.Object)">
            <summary>
            Called by the HtmlFormat:IPlugin who checks to see if any registered view engines can handle the response DTO.
            If this view engine can handle the response DTO, then process it, otherwise, returning false will
            allow another view engine to attempt to process it. If no view engines can process the DTO,
            HtmlFormat will simply handle it itself.
            </summary>
        </member>
        <member name="T:ServiceStack.Razor.Managers.RazorViewManager">
            <summary>
            This view manager is responsible for keeping track of all the 
            available Razor views and states of Razor pages.
            </summary>
        </member>
        <member name="T:ServiceStack.Razor.AttributeValue">
            <summary>
            Class to represent attribute values and, more importantly, 
            decipher them from tuple madness slightly.
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.IManageApiKeys">
            <summary>
            The Interface Auth Repositories need to implement to support API Keys
            </summary>
        </member>
        <member name="T:ServiceStack.IPostInitPlugin">
            <summary>
            Callback to post-configure any logic after IPlugin.Register() is fired
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ISettings.Get(System.String)">
            <summary>
            Provides a common interface for Settings providers such as
            ConfigurationManager or Azure's RoleEnvironment. The only
            requirement is that if the implementation cannot find the
            specified key, the return value must be null
            </summary>
            <param name="key">The key for the setting</param>
            <returns>The string value of the specified key, or null if the key
            was invalid</returns>
        </member>
        <member name="M:ServiceStack.Configuration.ISettings.GetAllKeys">
            <summary>
            Return all keys in this configuration source.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.Client">
            <summary>
            Base rcon class.
            </summary>
        </member>
        <member name="F:ServiceStack.Messaging.Rcon.Client._sock">
            <summary>
            Rcon connection socket. Always set to null when not connected.
            </summary>
        </member>
        <member name="F:ServiceStack.Messaging.Rcon.Client._sequenceID">
            <summary>
            Unique ID for each message.
            </summary>
        </member>
        <member name="F:ServiceStack.Messaging.Rcon.Client._registeredCallbacks">
            <summary>
            Registered callbacks.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.#ctor(System.Net.IPEndPoint)">
            <summary>
            Create a new instance of rcon.
            </summary>
            <param name="rconEndpoint">Endpoint to connect to, usually the game server with query port.</param>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.Connect">
            <summary>
            Attempts to connect to the game server for rcon operations.
            </summary>
            <returns>True if connection established, false otherwise.</returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.ProcessPacket(System.Byte[],ServiceStack.Messaging.Rcon.ClientSocketState)">
            <summary>
            Processes a received packet.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.Disconnect">
            <summary>
            Disconnects from rcon.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.InternalSend(System.Byte[][])">
            <summary>
            Sends message to the server.
            </summary>
            <param name="words">Words to send.</param>
        </member>
        <member name="E:ServiceStack.Messaging.Rcon.Client.OnDisconnected">
            <summary>
            Disconnected event.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Client.Endpoint">
            <summary>
            Game server endpoint.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Client.LastException">
            <summary>
            Last exception that occured during operation.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Client.Connected">
            <summary>
            Connected?
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Client.SequenceID">
            <summary>
            Gets the next unique ID to be used for transmisson. Read this before sending to pair responses to sent messages.
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.Client.OnDisconnectedHandler">
            <summary>
            Event delegate when disconnected from the server.
            </summary>
            <param name="rcon"></param>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.Client.AsyncCallback">
            <summary>
            Delegate for async callbacks.
            </summary>
            <param name="rcon"></param>
            <param name="packet"></param>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.NotConnectedException">
            <summary>
            Exception thrown when attempting to send on a non-connected service client.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Packet.FromServer">
            <summary>
            True if the packet originated on the server.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Packet.IsResponse">
            <summary>
            True if the packet is a response from a sent packet.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Packet.Sequence">
            <summary>
            Sequence identifier. Unique to the connection.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Packet.Words">
            <summary>
            Words.
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.PacketCodec">
            <summary>
            Contains methods required for encoding and decoding rcon packets.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.DecodePacket(System.Byte[])">
            <summary>
            Decodes a packet.
            </summary>
            <param name="packet">The packet.</param>
            <returns>A packet object.</returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.DecodeHeader(System.Byte[])">
            <summary>
            Decodes the packet header.
            </summary>
            <param name="packet"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.DecodeWords(System.Byte[])">
            <summary>
            Decodes words in a packet.
            </summary>
            <param name="packet"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.EncodePacket(System.Boolean,System.Boolean,System.UInt32,System.Byte[][])">
            <summary>
            Encodes a packet for transmission to the server.
            </summary>
            <param name="fromServer"></param>
            <param name="isResponse"></param>
            <param name="id"></param>
            <param name="words"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.EncodeHeader(System.Boolean,System.Boolean,System.UInt32)">
            <summary>
            Encodes a packet header.
            </summary>
            <param name="fromServer"></param>
            <param name="isResponse"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.EncodeWords(System.Byte[][])">
            <summary>
            Encodes words.
            </summary>
            <param name="words"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.ProcessingClient">
            <summary>
            Processing client used to interface with ServiceStack and allow a message to be processed.
            Not an actual client.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.ProcessingClient.Publish(System.String,ServiceStack.Messaging.IMessage)">
            <summary>
            Publish the specified message into the durable queue @queueName
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.ProcessingClient.Notify(System.String,ServiceStack.Messaging.IMessage)">
            <summary>
            Publish the specified message into the transient queue @queueName
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.ProcessingClient.Get``1(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Synchronous blocking get.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.ProcessingClient.GetAsync``1(System.String)">
            <summary>
            Non blocking get message
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.Server">
            <summary>
            Hosting services via a binary-safe TCP-based protocol.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Server.RegisterHandler``1(System.Func{ServiceStack.Messaging.IMessage{``0},System.Object})">
            <summary>
            Register DTOs and hanlders the MQ Host will process
            </summary>
            <typeparam name="T"></typeparam>
            <param name="processMessageFn"></param>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Server.GetStatus">
            <summary>
            Get Total Current Stats for all Message Handlers
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Server.GetStatsDescription">
            <summary>
            Get a Stats dump
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Server.Start">
            <summary>
            Start the MQ Host. Stops the server and restarts if already started.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Server.Stop">
            <summary>
            Stop the MQ Host if not already stopped. 
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Server.ProcessPacket(System.Byte[],System.Net.Sockets.Socket,ServiceStack.Messaging.Rcon.ClientSocketState)">
            <summary>
            Processes a received packet.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Server.MessageFactory">
            <summary>
            Factory to create consumers and producers that work with this service
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.Redis.RedisMqServer">
            <summary>
            Creates a Redis MQ Server that processes each message on its own background thread.
            i.e. if you register 3 handlers it will create 7 background threads:
              - 1 listening to the Redis MQ Subscription, getting notified of each new message
              - 3x1 Normal InQ for each message handler
              - 3x1 PriorityQ for each message handler (Turn off with DisablePriorityQueues)
            
            When RedisMqServer Starts it creates a background thread subscribed to the Redis MQ Topic that
            listens for new incoming messages. It also starts 2 background threads for each message type:
             - 1 for processing the services Priority Queue and 1 processing the services normal Inbox Queue.
            
            Priority Queue's can be enabled on a message-per-message basis by specifying types in the 
            OnlyEnablePriortyQueuesForTypes property. The DisableAllPriorityQueues property disables all Queues.
            
            The Start/Stop methods are idempotent i.e. It's safe to call them repeatedly on multiple threads 
            and the Redis MQ Server will only have Started or Stopped once.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Redis.RedisMqServer.RequestFilter">
            <summary>
            Execute global transformation or custom logic before a request is processed.
            Must be thread-safe.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Redis.RedisMqServer.ResponseFilter">
            <summary>
            Execute global transformation or custom logic on the response.
            Must be thread-safe.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Redis.RedisMqServer.ErrorHandler">
            <summary>
            Execute global error handler logic. Must be thread-safe.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Redis.RedisMqServer.PriortyQueuesWhitelist">
            <summary>
            If you only want to enable priority queue handlers (and threads) for specific msg types
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Redis.RedisMqServer.DisablePriorityQueues">
            <summary>
            Don't listen on any Priority Queues
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Redis.RedisMqServer.PublishResponsesWhitelist">
            <summary>
            Opt-in to only publish responses on this white list. 
            Publishes all responses by default.
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.Redis.RedisTransientMessageFactory">
            <summary>
            Transient message queues are a one-pass message queue service that starts
            processing messages when Start() is called. Any subsequent Start() calls 
            while the service is running is ignored.
            
            The transient service will continue to run until all messages have been 
            processed after which time it will shutdown all processing until Start() is called again.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Storage.SqlServerStorage">
            <summary>
            Understands how to store a <see cref="T:ServiceStack.MiniProfiler.Profiler"/> to a MSSQL database.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Storage.DatabaseStorageBase">
            <summary>
            Understands how to save MiniProfiler results to a MSSQL database, allowing more permanent storage and
            querying of slow results.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Storage.IStorage">
            <summary>
            Provides saving and loading <see cref="T:ServiceStack.MiniProfiler.Profiler"/>s to a storage medium.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.IStorage.Save(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Stores <paramref name="profiler"/> under its <see cref="P:ServiceStack.MiniProfiler.Profiler.Id"/>.
            </summary>
            <param name="profiler">The results of a profiling session.</param>
            <remarks>
            Should also ensure the profiler is stored as being unviewed by its profiling <see cref="P:ServiceStack.MiniProfiler.Profiler.User"/>.
            </remarks>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.IStorage.Load(System.Guid)">
            <summary>
            Returns a <see cref="T:ServiceStack.MiniProfiler.Profiler"/> from storage based on <paramref name="id"/>, which should map to <see cref="P:ServiceStack.MiniProfiler.Profiler.Id"/>.
            </summary>
            <remarks>
            Should also update that the resulting profiler has been marked as viewed by its profiling <see cref="P:ServiceStack.MiniProfiler.Profiler.User"/>.
            </remarks>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.IStorage.GetUnviewedIds(System.String)">
            <summary>
            Returns a list of <see cref="P:ServiceStack.MiniProfiler.Profiler.Id"/>s that haven't been seen by <paramref name="user"/>.
            </summary>
            <param name="user">User identified by the current <see cref="!:Profiler.Settings.UserProvider"/>.</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.DatabaseStorageBase.#ctor(System.String)">
            <summary>
            Returns a new SqlServerDatabaseStorage object that will insert into the database identified by connectionString.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.DatabaseStorageBase.Save(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Saves 'profiler' to a database under its <see cref="P:ServiceStack.MiniProfiler.Profiler.Id"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.DatabaseStorageBase.Load(System.Guid)">
            <summary>
            Returns the MiniProfiler identified by 'id' from the database or null when no MiniProfiler exists under that 'id'.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.DatabaseStorageBase.GetUnviewedIds(System.String)">
            <summary>
            Returns a list of <see cref="P:ServiceStack.MiniProfiler.Profiler.Id"/>s that haven't been seen by <paramref name="user"/>.
            </summary>
            <param name="user">User identified by the current <see cref="!:Profiler.Settings.UserProvider"/>.</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.DatabaseStorageBase.GetConnection">
            <summary>
            Returns a DbConnection for your specific provider.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.DatabaseStorageBase.GetOpenConnection">
            <summary>
            Returns a DbConnection already opened for execution.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Storage.DatabaseStorageBase.ConnectionString">
            <summary>
            How we connect to the database used to save/load MiniProfiler results.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Storage.SqlServerStorage.TableCreationScript">
            <summary>
            Creates needed tables. Run this once on your database.
            </summary>
            <remarks>
            Works in sql server and sqlite (with documented removals).
            </remarks>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.SqlServerStorage.#ctor(System.String)">
            <summary>
            Returns a new <see cref="T:ServiceStack.MiniProfiler.Storage.SqlServerStorage"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.SqlServerStorage.Save(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Stores <param name="profiler"/> to dbo.MiniProfilers under its <see cref="P:ServiceStack.MiniProfiler.Profiler.Id"/>; 
            stores all child Timings and SqlTimings to their respective tables.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.SqlServerStorage.Load(System.Guid)">
            <summary>
            Loads the MiniProfiler identifed by 'id' from the database.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.SqlServerStorage.GetUnviewedIds(System.String)">
            <summary>
            Returns a list of <see cref="P:ServiceStack.MiniProfiler.Profiler.Id"/>s that haven't been seen by <paramref name="user"/>.
            </summary>
            <param name="user">User identified by the current <see cref="!:Profiler.Settings.UserProvider"/>.</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.SqlServerStorage.GetConnection">
            <summary>
            Returns a connection to Sql Server.
            </summary>
        </member>
        <member name="T:ServiceStack.RequestFilterAttribute">
            <summary>
            Base class to create request filter attributes only for specific HTTP methods (GET, POST...)
            </summary>
        </member>
        <member name="M:ServiceStack.RequestFilterAttribute.#ctor(ServiceStack.ApplyTo)">
            <summary>
            Creates a new <see cref="T:ServiceStack.RequestFilterAttribute"/>
            </summary>
            <param name="applyTo">Defines when the filter should be executed</param>
        </member>
        <member name="M:ServiceStack.RequestFilterAttribute.Execute(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.Object)">
            <summary>
            This method is only executed if the HTTP method matches the <see cref="P:ServiceStack.RequestFilterAttribute.ApplyTo"/> property.
            </summary>
            <param name="req">The http request wrapper</param>
            <param name="res">The http response wrapper</param>
            <param name="requestDto">The request DTO</param>
        </member>
        <member name="M:ServiceStack.RequestFilterAttribute.Copy">
            <summary>
            Create a ShallowCopy of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.AppHostBase">
            <summary>
            Inherit from this class if you want to host your web services inside an
            ASP.NET application.
            </summary>
        </member>
        <member name="T:ServiceStack.IAppHost">
            <summary>
            ASP.NET or HttpListener ServiceStack host
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.Register``1(``0)">
            <summary>
            Register dependency in AppHost IOC on Startup
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.RegisterAs``2">
            <summary>
            AutoWired Registration of an interface with a concrete type in AppHost IOC on Startup.
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.Release(System.Object)">
            <summary>
            Allows the clean up for executed autowired services and filters.
            Calls directly after services and filters are executed.
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.OnEndRequest(ServiceStack.Web.IRequest)">
            <summary>
            Called at the end of each request. Enables Request Scope.
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.RegisterTypedRequestFilter``1(System.Action{ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,``0})">
            <summary>
            Add Request Filter for a specific Request DTO Type
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.RegisterTypedResponseFilter``1(System.Action{ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,``0})">
            <summary>
            Add Request Filter for a specific Response DTO Type
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.RegisterTypedMessageRequestFilter``1(System.Action{ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,``0})">
            <summary>
            Add Request Filter for a specific MQ Request DTO Type
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.RegisterTypedMessageResponseFilter``1(System.Action{ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,``0})">
            <summary>
            Add Request Filter for a specific MQ Response DTO Type
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.RegisterService(System.Type,System.String[])">
            <summary>
            Register an Adhoc web service on Startup
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.RegisterServicesInAssembly(System.Reflection.Assembly)">
            <summary>
            Register all Services in Assembly
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.LoadPlugin(ServiceStack.IPlugin[])">
            <summary>
            Apply plugins to this AppHost
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.CreateServiceRunner``1(ServiceStack.Host.ActionContext)">
            <summary>
            Create a service runner for IService actions
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.ResolveAbsoluteUrl(System.String,ServiceStack.Web.IRequest)">
            <summary>
            Resolve the absolute url for this request
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.ResolveLocalizedString(System.String,ServiceStack.Web.IRequest)">
            <summary>
            Resolve localized text, returns itself by default.
            The Request is provided when exists.
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.Routes">
            <summary>
            Register user-defined custom routes.
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.Metadata">
            <summary>
            Inferred Metadata available from existing services 
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.ContentTypes">
            <summary>
            Register custom ContentType serializers
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.PreRequestFilters">
            <summary>
            Add Request Filters, to be applied before the dto is deserialized
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.RequestConverters">
            <summary>
            Add Request Converter to convert Request DTO's
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.ResponseConverters">
            <summary>
            Add Response Converter to convert Response DTO's
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.GlobalRequestFilters">
            <summary>
            Add Request Filters for HTTP Requests
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.GlobalResponseFilters">
            <summary>
            Add Response Filters for HTTP Responses
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.GlobalMessageRequestFilters">
            <summary>
            Add Request Filters for MQ/TCP Requests
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.GlobalMessageResponseFilters">
            <summary>
            Add Response Filters for MQ/TCP Responses
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.ViewEngines">
            <summary>
            Add alternative HTML View Engines
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.ServiceExceptionHandlers">
            <summary>
            Provide an exception handler for unhandled exceptions
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.UncaughtExceptionHandlers">
            <summary>
            Provide an exception handler for un-caught exceptions
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.AfterInitCallbacks">
            <summary>
            Provide callbacks to be fired after the AppHost has finished initializing
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.OnDisposeCallbacks">
            <summary>
            Provide callbacks to be fired when AppHost is being disposed
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.RawHttpHandlers">
            <summary>
            Skip the ServiceStack Request Pipeline and process the returned IHttpHandler instead
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.CatchAllHandlers">
            <summary>
            Provide a catch-all handler that doesn't match any routes
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.GlobalHtmlErrorHttpHandler">
            <summary>
            Use a fall-back Error Handler for handling global errors
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.CustomErrorHttpHandlers">
            <summary>
            Use a Custom Error Handler for handling specific error HttpStatusCodes
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.RequestBinders">
            <summary>
            Provide a custom model minder for a specific Request DTO
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.Config">
            <summary>
            The AppHost config
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.AppSettings">
            <summary>
            The AppHost AppSettings. Defaults to App or Web.config appSettings.
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.Plugins">
            <summary>
            List of pre-registered and user-defined plugins to be enabled in this AppHost
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.VirtualFileSources">
            <summary>
            Cascading number of file sources, inc. Embedded Resources, File System, In Memory, S3
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.VirtualFiles">
            <summary>
            Read/Write Virtual FileSystem. Defaults to FileSystemVirtualPathProvider
            </summary>
        </member>
        <member name="T:Funq.IFunqlet">
            <summary>
            Funqlets are a set of components provided as a package 
            to an existing container (like a module).
            </summary>
        </member>
        <member name="M:Funq.IFunqlet.Configure(Funq.Container)">
            <summary>
            Configure the given container with the 
            registrations provided by the funqlet.
            </summary>
            <param name="container">Container to register.</param>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.RedirectDirectory(ServiceStack.Web.IHttpRequest)">
            <summary>
            Retain the same behavior as ASP.NET and redirect requests to directores 
            without a trailing '/'
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.OnPreExecuteServiceFilter(ServiceStack.IService,System.Object,ServiceStack.Web.IRequest,ServiceStack.Web.IResponse)">
            <summary>
            Executed immediately before a Service is executed. Use return to change the request DTO used, must be of the same type.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.OnPostExecuteServiceFilter(ServiceStack.IService,System.Object,ServiceStack.Web.IRequest,ServiceStack.Web.IResponse)">
            <summary>
            Executed immediately after a service is executed. Use return to change response used.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.OnServiceException(ServiceStack.Web.IRequest,System.Object,System.Exception)">
            <summary>
            Occurs when the Service throws an Exception.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.OnUncaughtException(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.String,System.Exception)">
            <summary>
            Occurs when an exception is thrown whilst processing a request.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.ApplyCustomHandlerRequestFilters(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse)">
            <summary>
            Apply PreRequest Filters for participating Custom Handlers, e.g. RazorFormat, MarkdownFormat, etc
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.ApplyPreAuthenticateFilters(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse)">
            <summary>
            Apply PreAuthenticate Filters from IAuthWithRequest AuthProviders
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.ApplyPreRequestFilters(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse)">
            <summary>
            Applies the raw request filters. Returns whether or not the request has been handled 
            and no more processing should be done.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.ApplyRequestFilters(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.Object)">
            <summary>
            Applies the request filters. Returns whether or not the request has been handled 
            and no more processing should be done.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.ApplyResponseFilters(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.Object)">
            <summary>
            Applies the response filters. Returns whether or not the request has been handled 
            and no more processing should be done.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.OnSessionFilter(ServiceStack.Auth.IAuthSession,System.String)">
            <summary>
            Inspect or modify ever new UserSession created or resolved from cache. 
            return null if Session is invalid to create new Session.
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceStackHost.Container">
            <summary>
            The AppHost.Container. Note: it is not thread safe to register dependencies after AppStart.
            </summary>
        </member>
        <member name="M:ServiceStack.AppHostExtensions.GetContainer(ServiceStack.IAppHost)">
            <summary>
            Get an IAppHost container. 
            Note: Registering dependencies should only be done during setup/configuration 
            stage and remain immutable there after for thread-safety.
            </summary>
            <param name="appHost"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.AppHostHttpListenerBase">
            <summary>
            Inherit from this class if you want to host your web services inside a 
            Console Application, Windows Service, etc.
            
            Usage of HttpListener allows you to host webservices on the same port (:80) as IIS 
            however it requires admin user privillages.
            </summary>
        </member>
        <member name="T:ServiceStack.Host.HttpListener.HttpListenerBase">
            <summary>
            Wrapper class for the HTTPListener to allow easier access to the
            server, for start and stop management and event routing of the actual
            inbound requests.
            </summary>
        </member>
        <member name="M:ServiceStack.Host.HttpListener.HttpListenerBase.Start(System.String,System.Threading.WaitCallback)">
            <summary>
            Starts the Web Service
            </summary>
            <param name="urlBase">
            A Uri that acts as the base that the server is listening on.
            Format should be: http://127.0.0.1:8080/ or http://127.0.0.1:8080/somevirtual/
            Note: the trailing slash is required! For more info see the
            HttpListener.Prefixes property on MSDN.
            </param>
        </member>
        <member name="M:ServiceStack.Host.HttpListener.HttpListenerBase.Stop">
            <summary>
            Shut down the Web Service
            </summary>
        </member>
        <member name="M:ServiceStack.Host.HttpListener.HttpListenerBase.ProcessRequestAsync(System.Net.HttpListenerContext)">
            <summary>
            Overridable method that can be used to implement a custom hnandler
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ServiceStack.Host.HttpListener.HttpListenerBase.AddUrlReservationToAcl(System.String)">
            <summary>
            Reserves the specified URL for non-administrator users and accounts. 
            http://msdn.microsoft.com/en-us/library/windows/desktop/cc307223(v=vs.85).aspx
            </summary>
            <returns>Reserved Url if the process completes successfully</returns>
        </member>
        <member name="M:ServiceStack.AppHostHttpListenerPoolBase.ThreadPoolManager.Dispose">
            <summary>
            Exécute les tâches définies par l'application associées à la libération ou à la redéfinition des ressources non managées.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ServiceStack.AspNet.ServiceStackPage.UnauthorizedRedirectUrl">
            <summary>
            Default redirct URL if [Authenticate] attribute doesn't permit access.
            </summary>
        </member>
        <member name="P:ServiceStack.AspNet.ServiceStackPage.ForbiddenRedirectUrl">
            <summary>
            Default redirct URL if Required Role or Permission attributes doesn't permit access.
            </summary>
        </member>
        <member name="T:ServiceStack.AuthenticateAttribute">
            <summary>
            Indicates that the request dto, which is associated with this attribute,
            requires authentication.
            </summary>
        </member>
        <member name="P:ServiceStack.AuthenticateAttribute.Provider">
            <summary>
            Restrict authentication to a specific <see cref="T:ServiceStack.Auth.IAuthProvider"/>.
            For example, if this attribute should only permit access
            if the user is authenticated with <see cref="T:ServiceStack.Auth.BasicAuthProvider"/>,
            you should set this property to <see cref="F:ServiceStack.Auth.BasicAuthProvider.Name"/>.
            </summary>
        </member>
        <member name="P:ServiceStack.AuthenticateAttribute.HtmlRedirect">
            <summary>
            Redirect the client to a specific URL if authentication failed.
            If this property is null, simply `401 Unauthorized` is returned.
            </summary>
        </member>
        <member name="T:ServiceStack.AuthFeature">
            <summary>
            Enable the authentication feature and configure the AuthService.
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.ApiKey">
            <summary>
            The POCO Table used to persist API Keys
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.ApiKeyAuthProvider">
            <summary>
            Enable access to protected Services using API Keys
            </summary>
        </member>
        <member name="T:ServiceStack.IAuthPlugin">
            <summary>
            Callback for AuthProviders to register callbacks with AuthFeature
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.ServiceRoutes">
            <summary>
            Modify the registration of GetApiKeys and RegenrateApiKeys Services
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.KeySizeBytes">
            <summary>
            How much entropy should the generated keys have. (default 24)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.Environments">
            <summary>
            Generate different keys for different environments. (default live,test)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.KeyTypes">
            <summary>
            Different types of Keys each user can have. (default secret)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.ExpireKeysAfter">
            <summary>
            Whether to automatically expire keys. (default no expiry)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.InitSchema">
            <summary>
            Automatically create the ApiKey Table for AuthRepositories which need it. (default true)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.RequireSecureConnection">
            <summary>
            Whether to only allow access via API Key from a secure connection. (default true)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.GenerateApiKey">
            <summary>
            Change how API Key is generated
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.CreateApiKeyFilter">
            <summary>
            Run custom filter after API Key is created
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.AuthEvents">
            <summary>
            Conveneint base class with empty virtual methods so subclasses only need to override the hooks they need.
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.AspNetWindowsAuthProvider.AllRoles">
            <summary>
            Specify all roles to be used by this application
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.AspNetWindowsAuthProvider.LimitAccessToRoles">
            <summary>
            Only allow access to users in specified roles
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.ValidateFn">
            <summary>
            Inject logic into existing services by introspecting the request and injecting your own
            validation logic. Exceptions thrown will have the same behaviour as if the service threw it.
            
            If a non-null object is returned the request will short-circuit and return that response.
            </summary>
            <param name="service">The instance of the service</param>
            <param name="httpMethod">GET,POST,PUT,DELETE</param>
            <param name="requestDto"></param>
            <returns>Response DTO; non-null will short-circuit execution and return that response</returns>
        </member>
        <member name="M:ServiceStack.Auth.AuthenticateService.Authenticate(ServiceStack.Authenticate)">
            <summary>
            Public API entry point to authenticate via code
            </summary>
            <param name="request"></param>
            <returns>null; if already autenticated otherwise a populated instance of AuthResponse</returns>
        </member>
        <member name="M:ServiceStack.Auth.AuthenticateService.Authenticate(ServiceStack.Authenticate,System.String,ServiceStack.Auth.IAuthSession,ServiceStack.Auth.IAuthProvider)">
            <summary>
            The specified <paramref name="session"/> may change as a side-effect of this method. If
            subsequent code relies on current <see cref="T:ServiceStack.Auth.IAuthSession"/> data be sure to reload
            the session istance via <see cref="M:ServiceStack.ServiceExtensions.GetSession(ServiceStack.IServiceBase,System.Boolean)"/>.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.AbstractValidator`1">
            <summary>
            Base class for entity validator classes.
            </summary>
            <typeparam name="T">The type of the object being validated</typeparam>
        </member>
        <member name="T:ServiceStack.FluentValidation.IValidator`1">
            <summary>
            Defines a validator for a particualr type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.FluentValidation.IValidator">
            <summary>
            Defines a validator for a particular type.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidator.Validate(System.Object)">
            <summary>
            Validates the specified instance
            </summary>
            <param name="instance"></param>
            <returns>A ValidationResult containing any validation failures</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidator.Validate(ServiceStack.FluentValidation.ValidationContext)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="context">A ValidationContext</param>
            <returns>A ValidationResult object containy any validation failures.</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidator.CreateDescriptor">
            <summary>
            Creates a hook to access various meta data properties
            </summary>
            <returns>A IValidatorDescriptor object which contains methods to access metadata</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidator.CanValidateInstancesOfType(System.Type)">
            <summary>
            Checks to see whether the validator can validate objects of the specified type
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidator`1.Validate(`0)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance to validate</param>
            <returns>A ValidationResult object containing any validation failures.</returns>
        </member>
        <member name="P:ServiceStack.FluentValidation.IValidator`1.CascadeMode">
            <summary>
            Sets the cascade mode for all rules within this validator.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.Validate(`0)">
            <summary>
            Validates the specified instance
            </summary>
            <param name="instance">The object to validate</param>
            <returns>A ValidationResult object containing any validation failures</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.Validate(ServiceStack.FluentValidation.ValidationContext{`0})">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="context">Validation Context</param>
            <returns>A ValidationResult object containing any validation failures.</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.AddRule(ServiceStack.FluentValidation.IValidationRule)">
            <summary>
            Adds a rule to the current validator.
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.CreateDescriptor">
            <summary>
            Creates a <see cref="T:ServiceStack.FluentValidation.IValidatorDescriptor"/> that can be used to obtain metadata about the current validator.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Defines a validation rule for a specify property.
            </summary>
            <example>
            RuleFor(x => x.Surname)...
            </example>
            <typeparam name="TProperty">The type of property being validated</typeparam>
            <param name="expression">The expression representing the property to validate</param>
            <returns>an IRuleBuilder instance on which validators can be defined</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.Custom(System.Func{`0,ServiceStack.FluentValidation.Results.ValidationFailure})">
            <summary>
            Defines a custom validation rule using a lambda expression.
            If the validation rule fails, it should return a instance of a <see cref="T:ServiceStack.FluentValidation.Results.ValidationFailure">ValidationFailure</see>
            If the validation rule succeeds, it should return null.
            </summary>
            <param name="customValidator">A lambda that executes custom validation rules.</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.Custom(System.Func{`0,ServiceStack.FluentValidation.ValidationContext{`0},ServiceStack.FluentValidation.Results.ValidationFailure})">
            <summary>
            Defines a custom validation rule using a lambda expression.
            If the validation rule fails, it should return an instance of <see cref="T:ServiceStack.FluentValidation.Results.ValidationFailure">ValidationFailure</see>
            If the validation rule succeeds, it should return null.
            </summary>
            <param name="customValidator">A lambda that executes custom validation rules</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)">
            <summary>
            Defines a RuleSet that can be used to group together several validators.
            </summary>
            <param name="ruleSetName">The name of the ruleset.</param>
            <param name="action">Action that encapsulates the rules in the ruleset.</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.RuleSet(ServiceStack.ApplyTo,System.Action)">
            <summary>
            Defines a RuleSet that can be used to provide specific validation rules for specific HTTP methods (GET, POST...)
            </summary>
            <param name="appliesTo">The HTTP methods where this rule set should be used.</param>
            <param name="action">Action that encapuslates the rules in the ruleset.</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)">
            <summary>
            Defines a condition that applies to several rules
            </summary>
            <param name="predicate">The condition that should apply to multiple rules</param>
            <param name="action">Action that encapsulates the rules.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)">
            <summary>
            Defiles an inverse condition that applies to several rules
            </summary>
            <param name="predicate">The condition that should be applied to multiple rules</param>
            <param name="action">Action that encapsulates the rules</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of validation rules.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:ServiceStack.FluentValidation.AbstractValidator`1.CascadeMode">
            <summary>
            Sets the cascade mode for all rules within this validator.
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.FacebookAuthProvider">
            <summary>
            Create a Facebook App at: https://developers.facebook.com/apps
            The Callback URL for your app should match the CallbackUrl provided.
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.GithubAuthProvider">
            <summary>
              Create an App at: https://github.com/settings/applications/new
              The Callback URL for your app should match the CallbackUrl provided.
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.GithubAuthProvider.UserRequestFilter(System.Net.HttpWebRequest)">
            <summary>
              Calling to Github API without defined Useragent throws
              exception "The server committed a protocol violation. Section=ResponseStatusLine"
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.AuthHttpGateway.DownloadYammerUserInfo(System.String)">
            <summary>
            Download Yammer User Info given its ID.
            </summary>
            <param name="yammerUserId">
            The Yammer User ID.
            </param>
            <returns>
            The User info in JSON format.
            </returns>
            <remarks>
            <para>
            Yammer provides a method to retrieve current user information via
            "https://www.yammer.com/api/v1/users/current.json".
            </para>
            <para>
            However, to ensure consistency with the rest of the Auth codebase,
            the explicit URL will be used, where [:id] denotes the User ID: 
            "https://www.yammer.com/api/v1/users/[:id].json"
            </para>
            <para>
            Refer to: https://developer.yammer.com/restapi/ for full documentation.
            </para>
            </remarks>
        </member>
        <member name="T:ServiceStack.Auth.InMemoryAuthRepository">
            <summary>
            Thread-safe In memory UserAuth data store so it can be used without a dependency on Redis.
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.JwtAuthProvider">
            <summary>
            Used to Issue and process JWT Tokens and registers ConvertSessionToToken Service to convert Sessions to JWT Tokens
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.JwtAuthProviderReader">
            <summary>
            Enable access to protected Services using JWT Tokens
            </summary>
        </member>
        <member name="F:ServiceStack.Auth.JwtAuthProviderReader.HmacAlgorithms">
            <summary>
            Different HMAC Algorithms supported
            </summary>
        </member>
        <member name="F:ServiceStack.Auth.JwtAuthProviderReader.RsaSignAlgorithms">
            <summary>
            Different RSA Signing Algorithms supported
            </summary>
        </member>
        <member name="F:ServiceStack.Auth.JwtAuthProviderReader.privateKey">
            <summary>
            The RSA Private Key used to Sign the JWT Token when RSA is used
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.RequireSecureConnection">
            <summary>
            Whether to only allow access via API Key from a secure connection. (default true)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.CreateHeaderFilter">
            <summary>
            Run custom filter after JWT Header is created
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.CreatePayloadFilter">
            <summary>
            Run custom filter after JWT Payload is created
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.PopulateSessionFilter">
            <summary>
            Run custom filter after session is restored from a JWT Token
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.EncryptPayload">
            <summary>
            Whether to encrypt JWE Payload (default false). 
            Uses RSA-OAEP for Key Encryption and AES/128/CBC HMAC SHA256 for Conent Encryption
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.HashAlgorithm">
            <summary>
            Which Hash Algorithm should be used to sign the JWT Token. (default HS256)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.RequireHashAlgorithm">
            <summary>
            Whether to only allow processing of JWT Tokens using the configured HashAlgorithm. (default true)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.Issuer">
            <summary>
            The Issuer to embed in the token. (default ssjwt)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.Audience">
            <summary>
            The Audience to embed in the token. (default null)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.KeyId">
            <summary>
            What Id to use to identify the Key used to sign the token. (default First 3 chars of Base64 Key)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.AuthKey">
            <summary>
            The AuthKey used to sign the JWT Token
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.PrivateKeyXml">
            <summary>
            Convenient overload to intialize the Private Key via exported XML
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.PublicKey">
            <summary>
            The RSA Public Key used to Verify the JWT Token when RSA is used
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.PublicKeyXml">
            <summary>
            Convenient overload to intialize the Public Key via exported XML
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.ExpireTokensIn">
            <summary>
            How long should JWT Tokens be valid for. (default 14 days)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.ExpireTokensInDays">
            <summary>
            Convenient overload to initialize ExpireTokensIn with an Integer
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.InvalidateTokensIssuedBefore">
            <summary>
            Whether to invalidate all JWT Tokens issued before a specified date.
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.ServiceRoutes">
            <summary>
            Modify the registration of ConvertSessionToToken Service
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.OdnoklassnikiAuthProvider">
            <summary>
              Create Odnoklassniki App at: http://www.odnoklassniki.ru/devaccess
              The Callback URL for your app should match the CallbackUrl provided.
              
              NB: They claim they use OAuth 2.0, but they in fact don't. 
              http://apiok.ru/wiki/display/api/Authorization+OAuth+2.0
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.RegisterService`1.Put(ServiceStack.Register)">
            <summary>
            Update an existing registraiton
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.RegisterService`1.Post(ServiceStack.Register)">
            <summary>
                Create new Registration
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.RegisterService`1.UpdateUserAuth(ServiceStack.Register)">
            <summary>
            Logic to update UserAuth from Registration info, not enabled on PUT because of security.
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.SaltedHash">
            <summary>
            Thank you Martijn
            http://www.dijksterhuis.org/creating-salted-hash-values-in-c/
            
            Stronger/Slower Alternative: 
            https://github.com/defuse/password-hashing/blob/master/PasswordStorage.cs
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.TwitterAuthProvider">
            <summary>
            Create an app at https://dev.twitter.com/apps to get your ConsumerKey and ConsumerSecret for your app.
            The Callback URL for your app should match the CallbackUrl provided.
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.UserAuthRepositoryExtensions.AssignRoles(ServiceStack.Auth.IAuthRepository,ServiceStack.Auth.IUserAuth,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Creates the required missing tables or DB schema 
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.VkAuthProvider">
            <summary>
              Create VK App at: http://vk.com/editapp?act=create
              The Callback URL for your app should match the CallbackUrl provided.
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.VkAuthProvider.EnsureLatestCode(System.String)">
            <summary>
            If previous attemts failes, the subsequential calls 
            build up code value like "code1,code2,code3"
            so we need the last one only
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Auth.YammerAuthProvider">
            <summary>
            The ServiceStack Yammer OAuth provider.
            </summary>
            <remarks>
            <para>
            This provider is loosely based on the existing ServiceStack's Facebook OAuth provider.
            </para>
            <para>
            For the full info on Yammer's OAuth2 authentication flow, refer to:
            https://developer.yammer.com/authentication/#a-oauth2
            </para>
            <para>
            Note: Add these to your application / web config settings under appSettings and replace
            values as appropriate.
            <![CDATA[
                <!-- ServiceStack Yammer OAuth config -->
                <add key="oauth.yammer.ClientId" value=""/>
                <add key="oauth.yammer.ClientSecret" value=""/>
                <add key="oauth.yammer.AccessTokenUrl" value="https://www.yammer.com/oauth2/access_token.json"/>
                <add key="oauth.yammer.CallbackUrl" value="~/"/>
                <add key="oauth.yammer.PreAuthUrl" value="https://www.yammer.com/dialog/oauth"/>
                <add key="oauth.yammer.Realm" value="https://www.yammer.com"/>
                <add key="oauth.yammer.RedirectUrl" value="~/auth/yammer"/>
            ]]>
            </para>
            </remarks>
        </member>
        <member name="F:ServiceStack.Auth.YammerAuthProvider.Name">
            <summary>
            The OAuth provider name / identifier.
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.YammerAuthProvider.#ctor(ServiceStack.Configuration.IAppSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Auth.YammerAuthProvider"/> class.
            </summary>
            <param name="appSettings">
            The application settings (in web.config).
            </param>
        </member>
        <member name="M:ServiceStack.Auth.YammerAuthProvider.Authenticate(ServiceStack.IServiceBase,ServiceStack.Auth.IAuthSession,ServiceStack.Authenticate)">
            <summary>
            Authenticate against Yammer OAuth endpoint.
            </summary>
            <param name="authService">
            The auth service.
            </param>
            <param name="session">
            The session.
            </param>
            <param name="request">
            The request.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ServiceStack.Auth.YammerAuthProvider.LoadUserAuthInfo(ServiceStack.AuthUserSession,ServiceStack.Auth.IAuthTokens,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Load the UserAuth info into the session.
            </summary>
            <param name="userSession">
            The User session.
            </param>
            <param name="tokens">
            The OAuth tokens.
            </param>
            <param name="authInfo">
            The auth info.
            </param>
        </member>
        <member name="M:ServiceStack.Auth.YammerAuthProvider.LoadUserOAuthProvider(ServiceStack.Auth.IAuthSession,ServiceStack.Auth.IAuthTokens)">
            <summary>
            Load the UserOAuth info into the session.
            </summary>
            <param name="authSession">
            The auth session.
            </param>
            <param name="tokens">
            The OAuth tokens.
            </param>
        </member>
        <member name="P:ServiceStack.Auth.YammerAuthProvider.ClientId">
            <summary>
            Gets or sets the Yammer OAuth client id.
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.YammerAuthProvider.ClientSecret">
            <summary>
            Gets or sets the Yammer OAuth client secret.
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.YammerAuthProvider.PreAuthUrl">
            <summary>
            Gets or sets the Yammer OAuth pre-auth url.
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.EmailAddresses">
            <summary>
            The Yammer User's email addresses.
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.EmailAddresses.Type">
            <summary>
            Gets or sets the email address type (e.g. primary).
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.EmailAddresses.Address">
            <summary>
            Gets or sets the email address.
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.YandexAuthProvider">
            <summary>
              Create Yandex App at: https://oauth.yandex.ru/client/new
              The Callback URL for your app should match the CallbackUrl provided.
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.ServiceBaseUrl">
            <summary>
            The BaseUrl of the ServiceStack instance (inferred)
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.ServiceName">
            <summary>
            Name of the ServiceStack Instance (inferred)
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.ServiceDescription">
            <summary>
            Textual description of the AutoQuery Services (shown in Home Services list)
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.ServiceIconUrl">
            <summary>
            Icon for this ServiceStack Instance (shown in Home Services list)
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.Formats">
            <summary>
            The different Content Type formats to display
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.MaxLimit">
            <summary>
            The configured MaxLimit for AutoQuery
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.IsPublic">
            <summary>
            Whether to publish this Service to the public Services registry
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.OnlyShowAnnotatedServices">
            <summary>
            Only show AutoQuery Services attributed with [AutoQueryViewer]
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.ImplicitConventions">
            <summary>
            List of different Search Filters available
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.DefaultSearchField">
            <summary>
            The Column which should be selected by default
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.DefaultSearchType">
            <summary>
            The Query Type filter which should be selected by default
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.DefaultSearchText">
            <summary>
            The search text which should be populated by default
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.BrandUrl">
            <summary>
            Link to your website users can click to find out more about you
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.BrandImageUrl">
            <summary>
            A custom logo or image that users can click on to visit your site
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.TextColor">
            <summary>
            The default color of text
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.LinkColor">
            <summary>
            The default color of links
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.BackgroundColor">
            <summary>
            The default background color of each screen
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.BackgroundImageUrl">
            <summary>
            The default background image of each screen anchored to the bottom left
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.IconUrl">
            <summary>
            The default icon for each of your AutoQuery Services
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerUserInfo.IsAuthenticated">
            <summary>
            Returns true if the User Is Authenticated
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerUserInfo.QueryCount">
            <summary>
            How many queries are available to this user
            </summary>
        </member>
        <member name="M:ServiceStack.CacheClientExtensions.RemoveByPattern(ServiceStack.Caching.ICacheClient,System.String)">
            <summary>
            Removes items from cache that have keys matching the specified wildcard pattern
            </summary>
            <param name="cacheClient">Cache client</param>
            <param name="pattern">The wildcard, where "*" means any sequence of characters and "?" means any single character.</param>
        </member>
        <member name="M:ServiceStack.CacheClientExtensions.RemoveByRegex(ServiceStack.Caching.ICacheClient,System.String)">
            <summary>
            Removes items from the cache based on the specified regular expression pattern
            </summary>
            <param name="cacheClient">Cache client</param>
            <param name="regex">Regular expression pattern to search cache keys</param>
        </member>
        <member name="P:ServiceStack.CacheInfo.CacheKey">
            <summary>
            The CacheKey to be use store the response against
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.KeyBase">
            <summary>
            The base Cache Key used to cache the Service response
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.KeyModifiers">
            <summary>
            Additional CacheKey Modifiers used to cache different outputs for a single Service Response
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.ExpiresIn">
            <summary>
            How long to cache the resource for. Fallsback to HttpCacheFeature.DefaultExpiresIn
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.ETag">
            <summary>
            The unique ETag returned for this resource clients can use to determine whether their local version has changed
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.Age">
            <summary>
            The Age for this resource returned to clients
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.MaxAge">
            <summary>
            The MaxAge returned to clients to indicate how long they can use their local cache before re-validating
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.LastModified">
            <summary>
            The LastModified date to use for the Cache and HTTP Header 
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.CacheControl">
            <summary>
            Cache-Control HTTP Headers
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.VaryByUser">
            <summary>
            Create unique cache per user
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.LocalCache">
            <summary>
            Use HostContext.LocalCache or HostContext.Cache
            </summary>
        </member>
        <member name="T:ServiceStack.CacheResponseAttribute">
            <summary>
            Cache the Response of a Service
            </summary>
        </member>
        <member name="P:ServiceStack.CacheResponseAttribute.Duration">
            <summary>
            Cache expiry in seconds
            </summary>
        </member>
        <member name="P:ServiceStack.CacheResponseAttribute.MaxAge">
            <summary>
            MaxAge in seconds
            </summary>
        </member>
        <member name="P:ServiceStack.CacheResponseAttribute.CacheControl">
            <summary>
            Cache-Control HTTP Headers
            </summary>
        </member>
        <member name="P:ServiceStack.CacheResponseAttribute.VaryByUser">
            <summary>
            Vary cache per user
            </summary>
        </member>
        <member name="P:ServiceStack.CacheResponseAttribute.VaryByRoles">
            <summary>
            Vary cache for users in these roles
            </summary>
        </member>
        <member name="P:ServiceStack.CacheResponseAttribute.LocalCache">
            <summary>
            Use HostContext.LocalCache or HostContext.Cache
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.CacheAdd(System.String,System.Object,System.Nullable{System.DateTime})">
            <summary>
            Stores The value with key only if such key doesn't exist at the server yet. 
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.CacheSet(System.String,System.Object,System.DateTime)">
            <summary>
            Adds or replaces the value with key.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.CacheSet(System.String,System.Object,System.Nullable{System.DateTime},System.Nullable{System.Int64})">
            <summary>
            Adds or replaces the value with key. 
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.CacheReplace(System.String,System.Object,System.Nullable{System.DateTime})">
            <summary>
            Replace the value with specified key if it exists.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.Add``1(System.String,``0)">
            <summary>
            Add the value with key to the cache, set to never expire.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.Set``1(System.String,``0)">
            <summary>
            Add or replace the value with key to the cache, set to never expire.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.Replace``1(System.String,``0)">
            <summary>
            Replace the value with key in the cache, set to never expire.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.Add``1(System.String,``0,System.DateTime)">
            <summary>
            Add the value with key to the cache, set to expire at specified DateTime.
            </summary>
            <remarks>This method examines the DateTimeKind of expiresAt to determine if conversion to
            universal time is needed. The version of Add that takes a TimeSpan expiration is faster 
            than using this method with a DateTime of Kind other than Utc, and is not affected by 
            ambiguous local time during daylight savings/standard time transition.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.Set``1(System.String,``0,System.DateTime)">
            <summary>
            Add or replace the value with key to the cache, set to expire at specified DateTime.
            </summary>
            <remarks>This method examines the DateTimeKind of expiresAt to determine if conversion to
            universal time is needed. The version of Set that takes a TimeSpan expiration is faster 
            than using this method with a DateTime of Kind other than Utc, and is not affected by 
            ambiguous local time during daylight savings/standard time transition.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.Replace``1(System.String,``0,System.DateTime)">
            <summary>
            Replace the value with key in the cache, set to expire at specified DateTime.
            </summary>
            <remarks>This method examines the DateTimeKind of expiresAt to determine if conversion to
            universal time is needed. The version of Replace that takes a TimeSpan expiration is faster 
            than using this method with a DateTime of Kind other than Utc, and is not affected by 
            ambiguous local time during daylight savings/standard time transition.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.Add``1(System.String,``0,System.TimeSpan)">
            <summary>
            Add the value with key to the cache, set to expire after specified TimeSpan.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            Add or replace the value with key to the cache, set to expire after specified TimeSpan.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.Replace``1(System.String,``0,System.TimeSpan)">
            <summary>
            Replace the value with key in the cache, set to expire after specified TimeSpan.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.CacheEntry.#ctor(System.Object,System.Nullable{System.DateTime})">
            <summary>
            Create new instance of CacheEntry.
            </summary>
        </member>
        <member name="P:ServiceStack.Caching.MemoryCacheClient.CacheEntry.ExpiresAt">
            <summary>UTC time at which CacheEntry expires.</summary>
        </member>
        <member name="T:ServiceStack.Configuration.AppSettings">
            <summary>
            More familiar name for the new crowd.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.AppSettings.#ctor(System.String)">
            <summary>
            The tier lets you specify a retrieving a setting with the tier prefix first before falling back to the original key. 
            E.g a tier of 'Live' looks for 'Live.{Key}' or if not found falls back to '{Key}'.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.AppSettings.GetString(System.String)">
            <summary>
            Returns string if exists, otherwise null
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:ServiceStack.Configuration.Config.DefaultNamespace">
            <summary>
            Would've preferred to use [assembly: ContractNamespace] attribute but it is not supported in Mono
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetNullableAppSetting(System.String)">
            <summary>
            Gets the nullable app setting.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetAppSetting(System.String)">
            <summary>
            Gets the app setting.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.ConfigSectionExists(System.String)">
            <summary>
            Determines wheter the Config section identified by the sectionName exists.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetAppSetting(System.String,System.String)">
            <summary>
            Returns AppSetting[key] if exists otherwise defaultValue
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetAppSetting``1(System.String,``0)">
            <summary>
            Returns AppSetting[key] if exists otherwise defaultValue, for non-string values
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetConnectionStringSetting(System.String)">
            <summary>
            Gets the connection string setting.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetConnectionString(System.String)">
            <summary>
            Gets the connection string.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetListFromAppSetting(System.String)">
            <summary>
            Gets the list from app setting.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetDictionaryFromAppSetting(System.String)">
            <summary>
            Gets the dictionary from app setting.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetParseMethod(System.Type)">
            <summary>
            Get the static Parse(string) method on the type supplied
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetConstructorInfo(System.Type)">
            <summary>
            Gets the constructor info for T(string) if exists.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.ParseTextValue``1(System.String)">
            <summary>
            Returns the value returned by the 'T.Parse(string)' method if exists otherwise 'new T(string)'. 
            e.g. if T was a TimeSpan it will return TimeSpan.Parse(textValue).
            If there is no Parse Method it will attempt to create a new instance of the destined type
            </summary>
        </member>
        <member name="M:ServiceStack.ContainerTypeExtensions.RegisterAutoWiredType(Funq.Container,System.Type,System.Type,Funq.ReuseScope)">
            <summary>
            Registers the type in the IoC container and
            adds auto-wiring to the specified type.
            </summary>
            <param name="serviceType"></param>
            <param name="inFunqAsType"></param>
        </member>
        <member name="M:ServiceStack.ContainerTypeExtensions.RegisterAutoWiredType(Funq.Container,System.Type,Funq.ReuseScope)">
            <summary>
            Registers the type in the IoC container and
            adds auto-wiring to the specified type.
            The reuse scope is set to none (transient).
            </summary>
            <param name="serviceTypes"></param>
        </member>
        <member name="M:ServiceStack.ContainerTypeExtensions.RegisterAutoWiredTypes(Funq.Container,System.Collections.Generic.IEnumerable{System.Type},Funq.ReuseScope)">
            <summary>
            Registers the types in the IoC container and
            adds auto-wiring to the specified types.
            The reuse scope is set to none (transient).
            </summary>
            <param name="serviceTypes"></param>
        </member>
        <member name="M:ServiceStack.ContainerTypeExtensions.Register(Funq.Container,System.Object,System.Type)">
            <summary>
            Register a singleton instance as a runtime type
            </summary>
        </member>
        <member name="T:ServiceStack.CorsFeature">
            <summary>
            Plugin adds support for Cross-origin resource sharing (CORS, see http://www.w3.org/TR/access-control/). 
            CORS allows to access resources from different domain which usually forbidden by origin policy. 
            </summary>
        </member>
        <member name="M:ServiceStack.CorsFeature.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.Nullable{System.Int32})">
            <summary>
            Represents a default constructor with Allow Origin equals to "*", Allowed GET, POST, PUT, DELETE, OPTIONS request and allowed "Content-Type" header.
            </summary>
        </member>
        <member name="T:ServiceStack.DefaultRequestAttribute">
            <summary>
            Lets you Register new Services and the optional restPaths will be registered against 
            this default Request Type
            </summary>
        </member>
        <member name="T:ServiceStack.DefaultViewAttribute">
            <summary>
            Change the default HTML view or template used for the HTML response of this service
            </summary>
        </member>
        <member name="F:ServiceStack.DtoUtils.ResponseStatusPropertyName">
            <summary>
            Naming convention for the ResponseStatus property name on the response DTO
            </summary>
        </member>
        <member name="M:ServiceStack.DtoUtils.CreateResponseDto(System.Object,ServiceStack.ResponseStatus)">
            <summary>
            Create an instance of the service response dto type and inject it with the supplied responseStatus
            </summary>
            <param name="request"></param>
            <param name="responseStatus"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.DtoUtils.CreateErrorResponse(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="iocResolver"></param>
            <param name="request"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.DtoUtils.GetRequestErrorBody(System.Object)">
            <summary>
            Override to provide additional/less context about the Service Exception. 
            By default the request is serialized and appended to the ResponseStatus StackTrace.
            </summary>
        </member>
        <member name="T:ServiceStack.EnableCorsAttribute">
            <summary>
            Attribute marks that specific response class has support for Cross-origin resource sharing (CORS, see http://www.w3.org/TR/access-control/). CORS allows to access resources from different domain which usually forbidden by origin policy. 
            </summary>
        </member>
        <member name="M:ServiceStack.EnableCorsAttribute.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Represents a default constructor with Allow Origin equals to "*", Allowed GET, POST, PUT, DELETE, OPTIONS request and allowed "Content-Type" header.
            </summary>
        </member>
        <member name="T:ServiceStack.EnsureHttpsAttribute">
            <summary>
            Redirect to the https:// version of this url if not already.
            </summary>
        </member>
        <member name="P:ServiceStack.EnsureHttpsAttribute.SkipIfDebugMode">
            <summary>
            Don't redirect when in DebugMode
            </summary>
        </member>
        <member name="P:ServiceStack.EnsureHttpsAttribute.SkipIfXForwardedFor">
            <summary>
            Don't redirect if the request was a forwarded request, e.g. from a Load Balancer
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.AssemblyScanner">
            <summary>
            Class that can be used to find all the validators from a collection of types.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.AssemblyScanner.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a scanner that works on a sequence of types.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.AssemblyScanner.FindValidatorsInAssembly(System.Reflection.Assembly)">
            <summary>
            Finds all the validators in the specified assembly.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.AssemblyScanner.FindValidatorsInAssemblyContaining``1">
            <summary>
            Finds all the validators in the assembly containing the specified type.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.AssemblyScanner.ForEach(System.Action{ServiceStack.FluentValidation.AssemblyScanner.AssemblyScanResult})">
            <summary>
            Performs the specified action to all of the assembly scan results.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.AssemblyScanner.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:ServiceStack.FluentValidation.AssemblyScanner.AssemblyScanResult">
            <summary>
            Result of performing a scan.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.AssemblyScanner.AssemblyScanResult.#ctor(System.Type,System.Type)">
            <summary>
            Creates an instance of an AssemblyScanResult.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.AssemblyScanner.AssemblyScanResult.InterfaceType">
            <summary>
            Validator interface type, eg IValidator&lt;Foo&gt;
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.AssemblyScanner.AssemblyScanResult.ValidatorType">
            <summary>
            Concrete type that implements the InterfaceType, eg FooValidator.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Attributes.AttributedValidatorFactory">
            <summary>
            Implementation of IValidatorFactory that looks for ValidatorAttribute instances on the specified type in order to provide the validator instance.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Attributes.AttributedValidatorFactory.GetValidator``1">
            <summary>
            Gets a validator for the appropriate type.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Attributes.AttributedValidatorFactory.GetValidator(System.Type)">
            <summary>
            Gets a validator for the appropriate type.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Attributes.ValidatorAttribute">
            <summary>
            Validator attribute to define the class that will describe the Validation rules
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Attributes.ValidatorAttribute.#ctor(System.Type)">
            <summary>
            Creates an instance of the ValidatorAttribute allowing a validator type to be specified.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Attributes.ValidatorAttribute.ValidatorType">
            <summary>
            The type of the validator used to validate the current type.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.CollectionValidatorExtensions.SetCollectionValidator``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Collections.Generic.IEnumerable{``1}},ServiceStack.FluentValidation.IValidator{``1})">
            <summary>
            Associates an instance of IValidator with the current property rule and is used to validate each item within the collection.
            </summary>
            <param name="validator">The validator to use</param>
        </member>
        <member name="T:ServiceStack.FluentValidation.IRuleBuilderOptions`2">
            <summary>
            Rule builder
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.IConfigurable`2">
            <summary>
            Represents an object that is configurable.
            </summary>
            <typeparam name="TConfiguration">Type of object being configured</typeparam>
            <typeparam name="TNext">Return type</typeparam>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.IConfigurable`2.Configure(System.Action{`0})">
            <summary>
            Configures the current object.
            </summary>
            <param name="configurator">Action to configure the object.</param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.DefaultValidatorExtensions">
            <summary>
            Extension methods that provide the default set of validators.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.NotNull``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1})">
            <summary>
            Defines a 'not null' validator on the current rule builder. 
            Validation will fail if the property is null.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.NotEmpty``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1})">
            <summary>
            Defines a 'not empty' validator on the current rule builder.
            Validation will fail if the property is null, an empty or the default value for the type (for example, 0 for integers)
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Length``1(ServiceStack.FluentValidation.IRuleBuilder{``0,System.String},System.Int32,System.Int32)">
            <summary>
            Defines a length validator on the current rule builder, but only for string properties.
            Validation will fail if the length of the string is outside of the specifed range. The range is inclusive.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Length``1(ServiceStack.FluentValidation.IRuleBuilder{``0,System.String},System.Int32)">
            <summary>
            Defines a length validator on the current rule builder, but only for string properties.
            Validation will fail if the length of the string is not equal to the length specified.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Matches``1(ServiceStack.FluentValidation.IRuleBuilder{``0,System.String},System.String)">
            <summary>
            Defines a regular expression validator on the current rule builder, but only for string properties.
            Validation will fail if the value returned by the lambda does not match the regular expression.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">The regular expression to check the value against.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.EmailAddress``1(ServiceStack.FluentValidation.IRuleBuilder{``0,System.String})">
            <summary>
            Defines a regular expression validator on the current rule builder, but only for string properties.
            Validation will fail if the value returned by the lambda is not a valid email address.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.NotEqual``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},``1,System.Collections.IEqualityComparer)">
            <summary>
            Defines a 'not equal' validator on the current rule builder.
            Validation will fail if the specified value is equal to the value of the property.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="toCompare">The value to compare</param>
            <param name="comparer">Equality comparer to use</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.NotEqual``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.IEqualityComparer)">
            <summary>
            Defines a 'not equal' validator on the current rule builder using a lambda to specify the value.
            Validation will fail if the value returned by the lambda is equal to the value of the property.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">A lambda expression to provide the comparison value</param>
            <param name="comparer">Equality Comparer to use</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Equal``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},``1,System.Collections.IEqualityComparer)">
            <summary>
            Defines an 'equals' validator on the current rule builder. 
            Validation will fail if the specified value is not equal to the value of the property.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="toCompare">The value to compare</param>
            <param name="comparer">Equality Comparer to use</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Equal``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.IEqualityComparer)">
            <summary>
            Defines an 'equals' validator on the current rule builder using a lambda to specify the comparison value.
            Validation will fail if the value returned by the lambda is not equal to the value of the property.
            </summary>
            <typeparam name="T">The type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">A lambda expression to provide the comparison value</param>
            <param name="comparer">Equality comparer to use</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Must``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Defines a predicate validator on the current rule builder using a lambda expression to specify the predicate.
            Validation will fail if the specified lambda returns false. 
            Validation will succeed if the specifed lambda returns true.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="predicate">A lambda expression specifying the predicate</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Must``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            Defines a predicate validator on the current rule builder using a lambda expression to specify the predicate.
            Validation will fail if the specified lambda returns false. 
            Validation will succeed if the specifed lambda returns true.
            This overload accepts the object being validated in addition to the property being validated.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="predicate">A lambda expression specifying the predicate</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Must``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Func{``0,``1,ServiceStack.FluentValidation.Validators.PropertyValidatorContext,System.Boolean})">
            <summary>
            Defines a predicate validator on the current rule builder using a lambda expression to specify the predicate.
            Validation will fail if the specified lambda returns false. 
            Validation will succeed if the specifed lambda returns true.
            This overload accepts the object being validated in addition to the property being validated.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="predicate">A lambda expression specifying the predicate</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},``1)">
            <summary>
            Defines a 'less than' validator on the current rule builder. 
            The validation will succeed if the property value is less than the specified value.
            The validation will fail if the property value is greater than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},``1)">
            <summary>
            Defines a 'less than' validator on the current rule builder. 
            The validation will succeed if the property value is less than the specified value.
            The validation will fail if the property value is greater than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},``1)">
            <summary>
            Defines a 'less than or equal' validator on the current rule builder. 
            The validation will succeed if the property value is less than or equal to the specified value.
            The validation will fail if the property value is greater than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},``1)">
            <summary>
            Defines a 'less than or equal' validator on the current rule builder. 
            The validation will succeed if the property value is less than or equal to the specified value.
            The validation will fail if the property value is greater than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},``1)">
            <summary>
            Defines a 'greater than' validator on the current rule builder. 
            The validation will succeed if the property value is greater than the specified value.
            The validation will fail if the property value is less than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},``1)">
            <summary>
            Defines a 'greater than' validator on the current rule builder. 
            The validation will succeed if the property value is greater than the specified value.
            The validation will fail if the property value is less than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},``1)">
            <summary>
            Defines a 'greater than or equal' validator on the current rule builder. 
            The validation will succeed if the property value is greater than or equal the specified value.
            The validation will fail if the property value is less than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},``1)">
            <summary>
            Defines a 'greater than or equal' validator on the current rule builder. 
            The validation will succeed if the property value is greater than or equal the specified value.
            The validation will fail if the property value is less than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Defines a 'less than' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is less than the specified value.
            The validation will fail if the property value is greater than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">A lambda that should return the value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Defines a 'less than' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is less than the specified value.
            The validation will fail if the property value is greater than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">A lambda that should return the value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Defines a 'less than or equal' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is less than or equal to the specified value.
            The validation will fail if the property value is greater than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Defines a 'less than or equal' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is less than or equal to the specified value.
            The validation will fail if the property value is greater than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Defines a 'less than' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is greater than the specified value.
            The validation will fail if the property value is less than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Defines a 'less than' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is greater than the specified value.
            The validation will fail if the property value is less than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Defines a 'less than' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is greater than or equal the specified value.
            The validation will fail if the property value is less than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Defines a 'less than' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is greater than or equal the specified value.
            The validation will fail if the property value is less than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Validate``1(ServiceStack.FluentValidation.IValidator{``0},``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Validates certain properties of the specified instance.
            </summary>
            <param name="validator">The current validator</param>
            <param name="instance">The object to validate</param>
            <param name="propertyExpressions">Expressions to specify the properties to validate</param>
            <returns>A ValidationResult object containing any validation failures</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Validate``1(ServiceStack.FluentValidation.IValidator{``0},``0,System.String[])">
            <summary>
            Validates certain properties of the specified instance.
            </summary>
            <param name="instance">The object to validate</param>
            <param name="properties">The names of the properties to validate.</param>
            <returns>A ValidationResult object containing any validation failures.</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.ValidateAndThrow``1(ServiceStack.FluentValidation.IValidator{``0},``0)">
            <summary>
            Performs validation and then throws an exception if validation fails.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.InclusiveBetween``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},``1,``1)">
            <summary>
            Defines an 'inclusive between' validator on the current rule builder, but only for properties of types that implement IComparable.
            Validation will fail if the value of the property is outside of the specifed range. The range is inclusive.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="from">The lowest allowed value</param>
            <param name="to">The highest allowed value</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.InclusiveBetween``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},``1,``1)">
            <summary>
            Defines an 'inclusive between' validator on the current rule builder, but only for properties of types that implement IComparable.
            Validation will fail if the value of the property is outside of the specifed range. The range is inclusive.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="from">The lowest allowed value</param>
            <param name="to">The highest allowed value</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.ExclusiveBetween``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},``1,``1)">
            <summary>
            Defines an 'exclusive between' validator on the current rule builder, but only for properties of types that implement IComparable.
            Validation will fail if the value of the property is outside of the specifed range. The range is exclusive.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="from">The lowest allowed value</param>
            <param name="to">The highest allowed value</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.ExclusiveBetween``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},``1,``1)">
            <summary>
            Defines an 'exclusive between' validator on the current rule builder, but only for properties of types that implement IComparable.
            Validation will fail if the value of the property is outside of the specifed range. The range is exclusive.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="from">The lowest allowed value</param>
            <param name="to">The highest allowed value</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.CreditCard``1(ServiceStack.FluentValidation.IRuleBuilder{``0,System.String})">
            <summary>
            Defines a credit card validator for the current rule builder that ensures that the specified string is a valid credit card number.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.DefaultValidatorOptions">
            <summary>
            Default options that can be used to configure a validator.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.Cascade``2(ServiceStack.FluentValidation.IRuleBuilderInitial{``0,``1},ServiceStack.FluentValidation.CascadeMode)">
            <summary>
            Specifies the cascade mode for failures. 
            If set to 'Stop' then execution of the rule will stop once the first validator in the chain fails.
            If set to 'Continue' then all validators in the chain will execute regardless of failures.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.OnAnyFailure``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Action{``0})">
            <summary>
            Specifies a custom action to be invoked when the validator fails. 
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="rule"></param>
            <param name="onFailure"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.String)">
            <summary>
            Specifies a custom error message to use if validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="errorMessage">The error message to use</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.String,System.Object[])">
            <summary>
            Specifies a custom error message to use if validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="errorMessage">The error message to use</param>
            <param name="formatArgs">Additional arguments to be specified when formatting the custom error message.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.String,System.Func{``0,System.Object}[])">
            <summary>
            Specifies a custom error message to use if validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="errorMessage">The error message to use</param>
            <param name="funcs">Additional property values to be included when formatting the custom error message.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithLocalizedMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Linq.Expressions.Expression{System.Func{System.String}})">
            <summary>
            Specifies a custom error message resource to use when validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="resourceSelector">The resource to use as an expression, eg () => Messages.MyResource</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithLocalizedMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Linq.Expressions.Expression{System.Func{System.String}},System.Object[])">
            <summary>
            Specifies a custom error message resource to use when validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="resourceSelector">The resource to use as an expression, eg () => Messages.MyResource</param>
            <param name="formatArgs">Custom message format args</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithLocalizedMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Linq.Expressions.Expression{System.Func{System.String}},System.Func{``0,System.Object}[])">
            <summary>
            Specifies a custom error message resource to use when validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="resourceSelector">The resource to use as an expression, eg () => Messages.MyResource</param>
            <param name="formatArgs">Custom message format args</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithLocalizedMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Linq.Expressions.Expression{System.Func{System.String}},ServiceStack.FluentValidation.Resources.IResourceAccessorBuilder)">
            <summary>
            Specifies a custom error message resource to use when validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="resourceSelector">The resource to use as an expression, eg () => Messages.MyResource</param>
            <param name="resourceAccessorBuilder">The resource accessor builder to use. </param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithErrorCode``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.String)">
            <summary>
            Specifies a custom error code to use when validation fails
            </summary>
            <param name="rule">The current rule</param>
            <param name="errorCode">The error code to use</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.When``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Func{``0,System.Boolean},ServiceStack.FluentValidation.ApplyConditionTo)">
            <summary>
            Specifies a condition limiting when the validator should run. 
            The validator will only be executed if the result of the lambda returns true.
            </summary>
            <param name="rule">The current rule</param>
            <param name="predicate">A lambda expression that specifies a condition for when the validator should run</param>
            <param name="applyConditionTo">Whether the condition should be applied to the current rule or all rules in the chain</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.Unless``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Func{``0,System.Boolean},ServiceStack.FluentValidation.ApplyConditionTo)">
            <summary>
            Specifies a condition limiting when the validator should not run. 
            The validator will only be executed if the result of the lambda returns false.
            </summary>
            <param name="rule">The current rule</param>
            <param name="predicate">A lambda expression that specifies a condition for when the validator should not run</param>
            <param name="applyConditionTo">Whether the condition should be applied to the current rule or all rules in the chain</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithName``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.String)">
            <summary>
            Specifies a custom property name to use within the error message.
            </summary>
            <param name="rule">The current rule</param>
            <param name="overridePropertyName">The property name to use</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithLocalizedName``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Linq.Expressions.Expression{System.Func{System.String}},ServiceStack.FluentValidation.Resources.IResourceAccessorBuilder)">
            <summary>
            Specifies a localized name for the error message. 
            </summary>
            <param name="rule">The current rule</param>
            <param name="resourceSelector">The resource to use as an expression, eg () => Messages.MyResource</param>
            <param name="resourceAccessorBuilder">Resource accessor builder to use</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.OverridePropertyName``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.String)">
            <summary>
            Overrides the name of the property associated with this rule.
            NOTE: This is a considered to be an advanced feature. 99% of the time that you use this, you actually meant to use WithName.
            </summary>
            <param name="rule">The current rule</param>
            <param name="propertyName">The property name to use</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithState``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Func{``0,System.Object})">
            <summary>
            Specifies custom state that should be stored alongside the validation message when validation fails for this rule.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="rule"></param>
            <param name="stateProvider"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.CascadeMode">
            <summary>
            Specifies how rules should cascade when one fails.
            </summary>
        </member>
        <member name="F:ServiceStack.FluentValidation.CascadeMode.Continue">
            <summary>
            When a rule fails, execution continues to the next rule.
            </summary>
        </member>
        <member name="F:ServiceStack.FluentValidation.CascadeMode.StopOnFirstFailure">
            <summary>
            When a rule fails, validation is stopped and all other rules in the chain will not be executed.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.ApplyConditionTo">
            <summary>
            Specifies where a When/Unless condition should be applied
            </summary>
        </member>
        <member name="F:ServiceStack.FluentValidation.ApplyConditionTo.AllValidators">
            <summary>
            Applies the condition to all validators declared so far in the chain.
            </summary>
        </member>
        <member name="F:ServiceStack.FluentValidation.ApplyConditionTo.CurrentValidator">
            <summary>
            Applies the condition to the current validator only.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.InlineValidator`1">
            <summary>
            Validator implementation that allows rules to be defined without inheriting from AbstractValidator.
            </summary>
            <example>
            <code>
            public class Customer {
              public int Id { get; set; }
              public string Name { get; set; }
            
              public static readonly InlineValidator&lt;Customer&gt; Validator = new InlineValidator&lt;Customer&gt; {
                v =&gt; v.RuleFor(x =&gt; x.Name).NotNull(),
                v =&gt; v.RuleFor(x =&gt; x.Id).NotEqual(0),
              }
            }
            </code>
            </example>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.FluentValidation.InlineValidator`1.Add``1(ServiceStack.FluentValidation.InlineValidator{`0}.InlineRuleCreator{``0})">
            <summary>
            Allows configuration of the validator.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.InlineValidator`1.InlineRuleCreator`1">
            <summary>
            Delegate that specifies configuring an InlineValidator.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.PropertyRule">
            <summary>
            Defines a rule associated with a property.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.IValidationRule">
            <summary>
            Defines a rule associated with a property which can have multiple validators.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidationRule.Validate(ServiceStack.FluentValidation.ValidationContext)">
            <summary>
            Performs validation using a validation context and returns a collection of Validation Failures.
            </summary>
            <param name="context">Validation Context</param>
            <returns>A collection of validation failures</returns>
        </member>
        <member name="P:ServiceStack.FluentValidation.IValidationRule.Validators">
            <summary>
            The validators that are grouped under this rule.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.IValidationRule.RuleSet">
            <summary>
            Name of the rule-set to which this rule belongs.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.#ctor(System.Reflection.MemberInfo,System.Func{System.Object,System.Object},System.Linq.Expressions.LambdaExpression,System.Func{ServiceStack.FluentValidation.CascadeMode},System.Type,System.Type)">
            <summary>
            Creates a new property rule.
            </summary>
            <param name="member">Property</param>
            <param name="propertyFunc">Function to get the property value</param>
            <param name="expression">Lambda expression used to create the rule</param>
            <param name="cascadeModeThunk">Function to get the cascade mode.</param>
            <param name="typeToValidate">Type to validate</param>
            <param name="containerType">Container type that owns the property</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.Create``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates a new property rule from a lambda expression.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.Create``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{ServiceStack.FluentValidation.CascadeMode})">
            <summary>
            Creates a new property rule from a lambda expression.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.AddValidator(ServiceStack.FluentValidation.Validators.IPropertyValidator)">
            <summary>
            Adds a validator to the rule.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.ReplaceValidator(ServiceStack.FluentValidation.Validators.IPropertyValidator,ServiceStack.FluentValidation.Validators.IPropertyValidator)">
            <summary>
            Replaces a validator in this rule. Used to wrap validators.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.GetDisplayName">
            <summary>
            Display name for the property. 
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.Validate(ServiceStack.FluentValidation.ValidationContext)">
            <summary>
            Performs validation using a validation context and returns a collection of Validation Failures.
            </summary>
            <param name="context">Validation Context</param>
            <returns>A collection of validation failures</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.InvokePropertyValidator(ServiceStack.FluentValidation.ValidationContext,ServiceStack.FluentValidation.Validators.IPropertyValidator,System.String)">
            <summary>
            Invokes a property validator using the specified validation context.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.Member">
            <summary>
            Property associated with this rule.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.PropertyFunc">
            <summary>
            Function that can be invoked to retrieve the value of the property.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.Expression">
            <summary>
            Expression that was used to create the rule.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.DisplayName">
            <summary>
            String source that can be used to retrieve the display name (if null, falls back to the property name)
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.RuleSet">
            <summary>
            Rule set that this rule belongs to (if specified)
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.OnFailure">
            <summary>
            Function that will be invoked if any of the validators associated with this rule fail.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.CurrentValidator">
            <summary>
            The current validator being configured by this rule.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.TypeToValidate">
            <summary>
            Type of the property being validated
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.CascadeMode">
            <summary>
            Cascade mode for this rule.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.Validators">
            <summary>
            Validators associated with this rule.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.PropertyName">
            <summary>
            Returns the property name for the property being validated.
            Returns null if it is not a property being validated (eg a method call)
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.CollectionPropertyRule`1.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{`0}}},System.Func{ServiceStack.FluentValidation.CascadeMode})">
            <summary>
            Creates a new property rule from a lambda expression.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.DefaultValidatorSelector">
            <summary>
            Default validator selector that will execute all rules that do not belong to a RuleSet.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.IValidatorSelector">
            <summary>
            Determines whether or not a rule should execute.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.IValidatorSelector.CanExecute(ServiceStack.FluentValidation.IValidationRule,System.String,ServiceStack.FluentValidation.ValidationContext)">
            <summary>
            Determines whether or not a rule should execute.
            </summary>
            <param name="rule">The rule</param>
            <param name="propertyPath">Property path (eg Customer.Address.Line1)</param>
            <param name="context">Contextual information</param>
            <returns>Whether or not the validator can execute.</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.DefaultValidatorSelector.CanExecute(ServiceStack.FluentValidation.IValidationRule,System.String,ServiceStack.FluentValidation.ValidationContext)">
            <summary>
            Determines whether or not a rule should execute.
            </summary>
            <param name="rule">The rule</param>
            <param name="propertyPath">Property path (eg Customer.Address.Line1)</param>
            <param name="context">Contextual information</param>
            <returns>Whether or not the validator can execute.</returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.DelegateValidator`1">
            <summary>
            Custom IValidationRule for performing custom logic.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.DelegateValidator`1.#ctor(System.Func{`0,ServiceStack.FluentValidation.ValidationContext{`0},System.Collections.Generic.IEnumerable{ServiceStack.FluentValidation.Results.ValidationFailure}})">
            <summary>
            Creates a new DelegateValidator using the specified function to perform validation.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.DelegateValidator`1.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{ServiceStack.FluentValidation.Results.ValidationFailure}})">
            <summary>
            Creates a new DelegateValidator using the specified function to perform validation.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.DelegateValidator`1.Validate(ServiceStack.FluentValidation.ValidationContext{`0})">
            <summary>
            Performs validation using a validation context and returns a collection of Validation Failures.
            </summary>
            <param name="context">Validation Context</param>
            <returns>A collection of validation failures</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.DelegateValidator`1.Validate(ServiceStack.FluentValidation.ValidationContext)">
            <summary>
            Performs validation using a validation context and returns a collection of Validation Failures.
            </summary>
            <param name="context">Validation Context</param>
            <returns>A collection of validation failures</returns>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.DelegateValidator`1.RuleSet">
            <summary>
            Rule set to which this rule belongs.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.DelegateValidator`1.Validators">
            <summary>
            The validators that are grouped under this rule.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.Extensions">
            <summary>
            Useful extensions
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.Extensions.GetMember(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets a MemberInfo from a member expression.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.Extensions.GetMember``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets a MemberInfo from a member expression.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.Extensions.SplitPascalCase(System.String)">
            <summary>
            Splits pascal case, so "FooBar" would become "Foo Bar"
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.Extensions.GetConstantExpresionFromConstant``2(``1)">
            <summary>
            Helper method to construct a constant expression from a constant.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.Extensions.InferPropertyValidatorForChildValidator(ServiceStack.FluentValidation.Internal.PropertyRule,ServiceStack.FluentValidation.IValidator)">
            <summary>
            Based on a child validator and a propery rule, infers whether the validator should be wrapped in a ChildValidatorAdaptor or a CollectionValidatorAdaptor
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.InstanceCache">
            <summary>
            Instancace cache.
            TODO: This isn't actually completely thread safe. It would be much better to use ConcurrentDictionary, but this isn't available in Silverlight/WP7.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.InstanceCache.GetOrCreateInstance(System.Type)">
            <summary>
            Gets or creates an instance using Activator.CreateInstance
            </summary>
            <param name="type">The type to instantiate</param>
            <returns>The instantiated object</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.InstanceCache.GetOrCreateInstance(System.Type,System.Func{System.Type,System.Object})">
            <summary>
            Gets or creates an instance using a custom factory
            </summary>
            <param name="type">The type to instantiate</param>
            <param name="factory">The custom factory</param>
            <returns>The instantiated object</returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.MemberNameValidatorSelector">
            <summary>
            Selects validators that are associated with a particular property.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.MemberNameValidatorSelector.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance of MemberNameValidatorSelector.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.MemberNameValidatorSelector.CanExecute(ServiceStack.FluentValidation.IValidationRule,System.String,ServiceStack.FluentValidation.ValidationContext)">
            <summary>
            Determines whether or not a rule should execute.
            </summary>
            <param name="rule">The rule</param>
            <param name="propertyPath">Property path (eg Customer.Address.Line1)</param>
            <param name="context">Contextual information</param>
            <returns>Whether or not the validator can execute.</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.MemberNameValidatorSelector.FromExpressions``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
             Creates a MemberNameValidatorSelector from a collection of expressions.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.MessageFormatter">
            <summary>
            Assists in the construction of validation messages.
            </summary>
        </member>
        <member name="F:ServiceStack.FluentValidation.Internal.MessageFormatter.PropertyName">
            <summary>
            Default Property Name placeholder.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.MessageFormatter.AppendArgument(System.String,System.Object)">
            <summary>
            Adds a value for a validation message placeholder.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.MessageFormatter.AppendPropertyName(System.String)">
            <summary>
            Appends a property name to the message.
            </summary>
            <param name="name">The name of the property</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.MessageFormatter.AppendAdditionalArguments(System.Object[])">
            <summary>
            Adds additional arguments to the message for use with standard string placeholders.
            </summary>
            <param name="additionalArgs">Additional arguments</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.MessageFormatter.BuildMessage(System.String)">
            <summary>
            Constructs the final message from the specified template. 
            </summary>
            <param name="messageTemplate">Message template</param>
            <returns>The message with placeholders replaced with their appropriate values</returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.PropertyChain">
            <summary>
            Represents a chain of properties
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyChain.#ctor">
            <summary>
            Creates a new PropertyChain.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyChain.#ctor(ServiceStack.FluentValidation.Internal.PropertyChain)">
            <summary>
            Creates a new PropertyChain based on another.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyChain.Add(System.Reflection.MemberInfo)">
            <summary>
            Adds a MemberInfo instance to the chain
            </summary>
            <param name="member">Member to add</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyChain.Add(System.String)">
            <summary>
            Adds a property name to the chain
            </summary>
            <param name="propertyName">Name of the property to add</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyChain.AddIndexer(System.Object)">
            <summary>
            Adds an indexer to the property chain. For example, if the following chain has been constructed: 
            Parent.Child
            then calling AddIndexer(0) would convert this to:
            Parent.Child[0]
            </summary>
            <param name="indexer"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyChain.ToString">
            <summary>
            Creates a string representation of a property chain.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyChain.IsChildChainOf(ServiceStack.FluentValidation.Internal.PropertyChain)">
            <summary>
            Checks if the current chain is the child of another chain.
            For example, if chain1 were for "Parent.Child" and chain2 were for "Parent.Child.GrandChild" then
            chain2.IsChildChainOf(chain1) would be true.
            </summary>
            <param name="parentChain">The parent chain to compare</param>
            <returns>True if the current chain is the child of the other chain, otherwise false</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyChain.BuildPropertyName(System.String)">
            <summary>
            Builds a property path.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.RuleBuilder`2">
            <summary>
            Builds a validation rule and constructs a validator.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
        </member>
        <member name="T:ServiceStack.FluentValidation.IRuleBuilderInitial`2">
            <summary>
            Rule builder that starts the chain
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.RuleBuilder`2.#ctor(ServiceStack.FluentValidation.Internal.PropertyRule)">
            <summary>
            Creates a new instance of the <see cref="T:ServiceStack.FluentValidation.Internal.RuleBuilder`2">RuleBuilder</see> class.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.RuleBuilder`2.SetValidator(ServiceStack.FluentValidation.Validators.IPropertyValidator)">
            <summary>
            Sets the validator associated with the rule.
            </summary>
            <param name="validator">The validator to set</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.RuleBuilder`2.SetValidator(ServiceStack.FluentValidation.IValidator{`1})">
            <summary>
            Sets the validator associated with the rule. Use with complex properties where an IValidator instance is already declared for the property type.
            </summary>
            <param name="validator">The validator to set</param>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.RuleBuilder`2.Rule">
            <summary>
            The rule being created by this RuleBuilder.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.RulesetValidatorSelector">
            <summary>
            Selects validators that belong to the specified rulesets.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.RulesetValidatorSelector.#ctor(System.String[])">
            <summary>
            Creates a new instance of the RulesetValidatorSelector.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.RulesetValidatorSelector.CanExecute(ServiceStack.FluentValidation.IValidationRule,System.String,ServiceStack.FluentValidation.ValidationContext)">
            <summary>
            Determines whether or not a rule should execute.
            </summary>
            <param name="rule">The rule</param>
            <param name="propertyPath">Property path (eg Customer.Address.Line1)</param>
            <param name="context">Contextual information</param>
            <returns>Whether or not the validator can execute.</returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.IValidatorDescriptor">
            <summary>
            Provides metadata about a validator.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidatorDescriptor.GetName(System.String)">
            <summary>
            Gets the name display name for a property. 
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidatorDescriptor.GetMembersWithValidators">
            <summary>
            Gets a collection of validators grouped by property.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidatorDescriptor.GetValidatorsForMember(System.String)">
            <summary>
            Gets validators for a particular property.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidatorDescriptor.GetRulesForMember(System.String)">
            <summary>
            Gets rules for a property.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Resources.IResourceAccessorBuilder">
            <summary>
            Builds a delegate for retrieving a localised resource from a resource type and property name.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.IResourceAccessorBuilder.GetResourceAccessor(System.Type,System.String)">
            <summary>
            Gets a function that can be used to retrieve a message from a resource type and resource name.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Resources.StaticResourceAccessorBuilder">
            <summary>
            Builds a delegate for retrieving a localised resource from a resource type and property name.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.StaticResourceAccessorBuilder.GetResourceAccessor(System.Type,System.String)">
            <summary>
            Builds a function used to retrieve the resource.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.StaticResourceAccessorBuilder.GetResourceProperty(System.Type@,System.String@)">
            <summary>
            Gets the PropertyInfo for a resource.
            ResourceType and ResourceName are ref parameters to allow derived types
            to replace the type/name of the resource before the delegate is constructed.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Resources.FallbackAwareResourceAccessorBuilder">
            <summary>
            Implemenetation of IResourceAccessorBuilder that can fall back to the default resource provider.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.FallbackAwareResourceAccessorBuilder.GetResourceProperty(System.Type@,System.String@)">
            <summary>
            Gets the PropertyInfo for a resource.
            ResourceType and ResourceName are ref parameters to allow derived types
            to replace the type/name of the resource before the delegate is constructed.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Resources.IStringSource">
            <summary>
            Provides error message templates
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.IStringSource.GetString">
            <summary>
            Construct the error message template
            </summary>
            <returns>Error message template</returns>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.IStringSource.ResourceName">
            <summary>
            The name of the resource if localized.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.IStringSource.ResourceType">
            <summary>
            The type of the resource provider if localized.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Resources.LocalizedStringSource">
            <summary>
            Represents a localized string.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.LocalizedStringSource.#ctor(System.Type,System.String,ServiceStack.FluentValidation.Resources.IResourceAccessorBuilder)">
            <summary>
            Creates a new instance of the LocalizedErrorMessageSource class using the specified resource name and resource type.
            </summary>
            <param name="resourceType">The resource type</param>
            <param name="resourceName">The resource name</param>
            <param name="resourceAccessorBuilder">Strategy used to construct the resource accessor</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.LocalizedStringSource.CreateFromExpression(System.Linq.Expressions.Expression{System.Func{System.String}},ServiceStack.FluentValidation.Resources.IResourceAccessorBuilder)">
            <summary>
            Creates an IErrorMessageSource from an expression: () => MyResources.SomeResourceName
            </summary>
            <param name="expression">The expression </param>
            <param name="resourceProviderSelectionStrategy">Strategy used to construct the resource accessor</param>
            <returns>Error message source</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.LocalizedStringSource.GetString">
            <summary>
            Construct the error message template
            </summary>
            <returns>Error message template</returns>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.LocalizedStringSource.ResourceName">
            <summary>
            The name of the resource if localized.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.LocalizedStringSource.ResourceType">
            <summary>
            The type of the resource provider if localized.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Resources.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.Messages.CreditCardError">
            <summary>
              Looks up a localized string similar to &apos;{PropertyName}&apos; is not a valid credit card number..
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.Messages.email_error">
            <summary>
              Looks up a localized string similar to &apos;{PropertyName}&apos; is not a valid email address..
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.Messages.equal_error">
            <summary>
              Looks up a localized string similar to &apos;{PropertyName}&apos; should be equal to &apos;{PropertyValue}&apos;..
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.Messages.exact_length_error">
            <summary>
              Looks up a localized string similar to &apos;{PropertyName}&apos; must be {MaxLength} characters in length. You entered {TotalLength} characters..
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.Messages.exclusivebetween_error">
            <summary>
              Looks up a localized string similar to &apos;{PropertyName}&apos; must be between {From} and {To} (exclusive). You entered {Value}..
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.Messages.greaterthan_error">
            <summary>
              Looks up a localized string similar to &apos;{PropertyName}&apos; must be greater than &apos;{ComparisonValue}&apos;..
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.Messages.greaterthanorequal_error">
            <summary>
              Looks up a localized string similar to &apos;{PropertyName}&apos; must be greater than or equal to &apos;{ComparisonValue}&apos;..
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.Messages.inclusivebetween_error">
            <summary>
              Looks up a localized string similar to &apos;{PropertyName}&apos; must be between {From} and {To}. You entered {Value}..
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.Messages.length_error">
            <summary>
              Looks up a localized string similar to &apos;{PropertyName}&apos; must be between {MinLength} and {MaxLength} characters. You entered {TotalLength} characters..
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.Messages.lessthan_error">
            <summary>
              Looks up a localized string similar to &apos;{PropertyName}&apos; must be less than &apos;{ComparisonValue}&apos;..
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.Messages.lessthanorequal_error">
            <summary>
              Looks up a localized string similar to &apos;{PropertyName}&apos; must be less than or equal to &apos;{ComparisonValue}&apos;..
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.Messages.notempty_error">
            <summary>
              Looks up a localized string similar to &apos;{PropertyName}&apos; should not be empty..
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.Messages.notequal_error">
            <summary>
              Looks up a localized string similar to &apos;{PropertyName}&apos; should not be equal to &apos;{PropertyValue}&apos;..
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.Messages.notnull_error">
            <summary>
              Looks up a localized string similar to &apos;{PropertyName}&apos; must not be empty..
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.Messages.predicate_error">
            <summary>
              Looks up a localized string similar to The specified condition was not met for &apos;{PropertyName}&apos;..
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.Messages.regex_error">
            <summary>
              Looks up a localized string similar to &apos;{PropertyName}&apos; is not in the correct format..
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Resources.StaticStringSource">
            <summary>
            Represents a static string.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.StaticStringSource.#ctor(System.String)">
            <summary>
            Creates a new StringErrorMessageSource using the specified error message as the error template.
            </summary>
            <param name="message">The error message template.</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.StaticStringSource.GetString">
            <summary>
            Construct the error message template
            </summary>
            <returns>Error message template</returns>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.StaticStringSource.ResourceName">
            <summary>
            The name of the resource if localized.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.StaticStringSource.ResourceType">
            <summary>
            The type of the resource provider if localized.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Results.ValidationFailure.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new validation failure.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Results.ValidationFailure.#ctor(System.String,System.String,System.String,System.Object)">
            <summary>
            Creates a new ValidationFailure.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Results.ValidationFailure.ToString">
            <summary>
            Creates a textual representation of the failure.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Results.ValidationFailure.PropertyName">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Results.ValidationFailure.ErrorMessage">
            <summary>
            The error message
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Results.ValidationFailure.ErrorCode">
            <summary>
            The error code
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Results.ValidationFailure.AttemptedValue">
            <summary>
            The property value that caused the failure.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Results.ValidationFailure.CustomState">
            <summary>
            Custom state associated with the failure.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Results.ValidationFailure.PlaceholderValues">
            <summary>
            Placeholder values used for string substitution when building ErrorMessage
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.ValidatorDescriptor`1">
            <summary>
            Used for providing metadata about a validator.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Validators.PropertyValidator.CreateValidationError(ServiceStack.FluentValidation.Validators.PropertyValidatorContext)">
            <summary>
            Creates an error validation result for this validator.
            </summary>
            <param name="context">The validator context</param>
            <returns>Returns an error validation result.</returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Validators.CreditCardValidator">
            <summary>
            Ensures that the property value is a valid credit card number.
            </summary>
        </member>
        <member name="M:ServiceStack.Formats.MarkdownFormat.SerializeToStream(ServiceStack.Web.IRequest,System.Object,System.IO.Stream)">
            <summary>
            Render Markdown for text/markdown and text/plain ContentTypes
            </summary>
        </member>
        <member name="T:Funq.Container">
            <summary>
			Main container class for components, supporting container hierarchies and
			lifetime management of <see cref="T:System.IDisposable"/> instances.
		</summary>
        </member>
        <member name="M:Funq.Container.RegisterAutoWired``1">
            <summary>
            Register an autowired dependency
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Funq.Container.RegisterAutoWiredAs``2">
            <summary>
            Register an autowired dependency as a separate type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Funq.Container.RegisterAs``2">
            <summary>
            Alias for RegisterAutoWiredAs
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Funq.Container.AutoWire(System.Object)">
            <summary>
            Auto-wires an existing instance, 
            ie all public properties are tried to be resolved.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Funq.Container.GenerateAutoWireFn``1">
            <summary>
            Generates a function which creates and auto-wires <see cref="!:TService"/>.
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="lambdaParam"></param>
            <returns></returns>
        </member>
        <member name="M:Funq.Container.AutoWire(Funq.Container,System.Object)">
            <summary>
            Auto-wires an existing instance of a specific type.
            The auto-wiring progress is also cached to be faster 
            when calling next time with the same type.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Funq.Container.#ctor">
            <summary>
			Initializes a new empty container.
		</summary>
        </member>
        <member name="M:Funq.Container.CreateChildContainer">
            <summary>
			Creates a child container of the current one, which exposes its
			current service registration to the new child container.
		</summary>
        </member>
        <member name="M:Funq.Container.Dispose">
            <summary>
			Disposes the container and all instances owned by it (see
			<see cref="F:Funq.Owner.Container"/>), as well as all child containers
			created through <see cref="M:Funq.Container.CreateChildContainer"/>.
		</summary>
        </member>
        <member name="M:Funq.Container.Register``1(``0)">
            <summary>
			Registers a service instance with the container. This instance 
			will have <see cref="F:Funq.Owner.External"/> and <see cref="F:Funq.ReuseScope.Hierarchy"/> 
			behavior.
		</summary><param name="instance">Service instance to use.</param>
        </member>
        <member name="M:Funq.Container.Register``1(System.String,``0)">
            <summary>
			Registers a named service instance with the container. This instance
			will have <see cref="F:Funq.Owner.External"/> and <see cref="F:Funq.ReuseScope.Hierarchy"/>
			behavior.
		</summary><param name="name">Name of the service to register.</param><param name="instance">Service instance to use.</param>
        </member>
        <member name="M:Funq.Container.LazyResolve``1">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance 
			of the service when needed.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>The function that can resolve to the service instance when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``2">
            <!-- 未找到下列包含标记的匹配元素 --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``3">
            <!-- 未找到下列包含标记的匹配元素 --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``4">
            <!-- 未找到下列包含标记的匹配元素 --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``5">
            <!-- 未找到下列包含标记的匹配元素 --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``6">
            <!-- 未找到下列包含标记的匹配元素 --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``7">
            <!-- 未找到下列包含标记的匹配元素 --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*"/>
        </member>
        <member name="M:Funq.Container.LazyResolve``1(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service with the given name when needed.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``2(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``3(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``4(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``5(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``6(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``7(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.Register``1(System.Func{Funq.Container,``0})">
            <summary>
			Registers the given service by providing a factory delegate to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``2(System.Func{Funq.Container,``1,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg">First argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``3(System.Func{Funq.Container,``1,``2,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``4(System.Func{Funq.Container,``1,``2,``3,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``5(Funq.Func{Funq.Container,``1,``2,``3,``4,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``6(Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``7(Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``6,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg6">Sixth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``1(System.String,System.Func{Funq.Container,``0})">
            <summary>
			Registers the given named service by providing a factory delegate to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``2(System.String,System.Func{Funq.Container,``1,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg">First argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``3(System.String,System.Func{Funq.Container,``1,``2,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``4(System.String,System.Func{Funq.Container,``1,``2,``3,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``5(System.String,Funq.Func{Funq.Container,``1,``2,``3,``4,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``6(System.String,Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``7(System.String,Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``6,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg6">Sixth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Resolve``1">
            <summary>
			Resolves the given service by type, without passing any arguments for
			its construction.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``2(``1)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``3(``1,``2)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``4(``1,``2,``3)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``5(``1,``2,``3,``4)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``6(``1,``2,``3,``4,``5)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``7(``1,``2,``3,``4,``5,``6)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``1(System.String)">
            <summary>
			Resolves the given service by type and name, without passing arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``2(System.String,``1)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``3(System.String,``1,``2)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``4(System.String,``1,``2,``3)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``5(System.String,``1,``2,``3,``4)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``6(System.String,``1,``2,``3,``4,``5)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``7(System.String,``1,``2,``3,``4,``5,``6)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.TryResolve``1">
            <summary>
			Attempts to resolve the given service by type, without passing arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``2(``1)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``3(``1,``2)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``4(``1,``2,``3)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``5(``1,``2,``3,``4)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``6(``1,``2,``3,``4,``5)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``7(``1,``2,``3,``4,``5,``6)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``1(System.String)">
            <summary>
			Attempts to resolve the given service by type and name, without passing
			arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``2(System.String,``1)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``3(System.String,``1,``2)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``4(System.String,``1,``2,``3)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``5(System.String,``1,``2,``3,``4)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``6(System.String,``1,``2,``3,``4,``5)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``7(System.String,``1,``2,``3,``4,``5,``6)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null"/> if it cannot be resolved.
		</returns>
        </member>
        <member name="P:Funq.Container.DefaultOwner">
            <summary>
			Default owner for new registrations. <see cref="F:Funq.Owner.Container"/> by default.
		</summary>
        </member>
        <member name="P:Funq.Container.DefaultReuse">
            <summary>
			Default reuse scope for new registrations. <see cref="F:Funq.ReuseScope.Hierarchy"/> by default.
		</summary>
        </member>
        <member name="T:Funq.Func`6">
            <summary>
            Encapsulates a method that has five parameters and returns a value of the 
             type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
        </member>
        <member name="T:Funq.Func`7">
            <summary>
            Encapsulates a method that has six parameters and returns a value of the 
             type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
        </member>
        <member name="T:Funq.Func`8">
            <summary>
            Encapsulates a method that has seven parameters and returns a value of the 
             type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
        </member>
        <member name="T:Funq.IFluentInterface">
            <summary>
            Helper interface used to hide the base <see cref="T:System.Object"/> 
            members from the fluent API to make for much cleaner 
            Visual Studio intellisense experience.
            </summary>
        </member>
        <member name="M:Funq.IFluentInterface.GetType">
            <summary/>
        </member>
        <member name="M:Funq.IFluentInterface.GetHashCode">
            <summary/>
        </member>
        <member name="M:Funq.IFluentInterface.ToString">
            <summary/>
        </member>
        <member name="M:Funq.IFluentInterface.Equals(System.Object)">
            <summary/>
        </member>
        <member name="T:Funq.IContainerModule">
            <summary>
            Interface used by plugins to contribute registrations 
            to an existing container.
            </summary>
        </member>
        <member name="T:Funq.Owner">
            <summary>
            Determines who is responsible for disposing instances 
            registered with a container.
            </summary>
        </member>
        <member name="F:Funq.Owner.Container">
            <summary>
            Container should dispose provided instances when it is disposed. This is the 
            default.
            </summary>
        </member>
        <member name="F:Funq.Owner.External">
            <summary>
            Container does not dispose provided instances.
            </summary>
        </member>
        <member name="F:Funq.Owner.Default">
            <summary>
            Default owner, which equals <see cref="F:Funq.Owner.Container"/>.
            </summary>
        </member>
        <member name="T:Funq.ResolutionException">
            <summary>
            Exception thrown by the container when a service cannot be resolved.
            </summary>
        </member>
        <member name="M:Funq.ResolutionException.#ctor(System.Type)">
            <summary>
            Initializes the exception with the service that could not be resolved.
            </summary>
        </member>
        <member name="M:Funq.ResolutionException.#ctor(System.Type,System.String)">
            <summary>
            Initializes the exception with the service (and its name) that could not be resolved.
            </summary>
        </member>
        <member name="M:Funq.ResolutionException.#ctor(System.String)">
            <summary>
            Initializes the exception with an arbitrary message.
            </summary>
        </member>
        <member name="T:Funq.ReuseScope">
            <summary>
            Determines visibility and reuse of instances provided by the container.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.Hierarchy">
            <summary>
            Instances are reused within a container hierarchy. Instances 
            are created (if necessary) in the container where the registration
            was performed, and are reused by all descendent containers.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.Container">
            <summary>
            Instances are reused only at the given container. Descendent 
            containers do not reuse parent container instances and get  
            a new instance at their level.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.None">
            <summary>
            Each request to resolve the dependency will result in a new 
            instance being returned.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.Request">
            <summary>
            Instaces are reused within the given request
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.Default">
            <summary>
            Default scope, which equals <see cref="F:Funq.ReuseScope.Hierarchy"/>.
            </summary>
        </member>
        <member name="T:Funq.IRegistration">
            <summary>
            Fluent API for customizing the registration of a service.
            </summary>
        </member>
        <member name="T:Funq.IReusedOwned">
            <summary>
            Fluent API that exposes both <see cref="M:Funq.IReused.ReusedWithin(Funq.ReuseScope)"/>
            and owner (<see cref="M:Funq.IOwned.OwnedBy(Funq.Owner)"/>).
            </summary>
        </member>
        <member name="T:Funq.IReused">
            <summary>
            Fluent API that allows specifying the reuse instances.
            </summary>
        </member>
        <member name="M:Funq.IReused.ReusedWithin(Funq.ReuseScope)">
            <summary>
            Specifies how instances are reused within a container or hierarchy. Default 
            scope is <see cref="F:Funq.ReuseScope.Hierarchy"/>.
            </summary>
        </member>
        <member name="T:Funq.IOwned">
            <summary>
            Fluent API that allows specifying the owner of instances 
            created from a registration.
            </summary>
        </member>
        <member name="M:Funq.IOwned.OwnedBy(Funq.Owner)">
            <summary>
            Specifies the owner of instances created from this registration. Default 
            owner is <see cref="F:Funq.Owner.Container"/>.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry.Owner">
            <summary>
            Ownership setting for the service.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry.Reuse">
            <summary>
            Reuse scope setting for the service.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry.Container">
            <summary>
            The container where the entry was registered.
            </summary>
        </member>
        <member name="M:Funq.ServiceEntry.OwnedBy(Funq.Owner)">
            <summary>
            Specifies the owner for instances, which determines how 
            they will be disposed.
            </summary>
        </member>
        <member name="M:Funq.ServiceEntry.ReusedWithin(Funq.ReuseScope)">
            <summary>
            Specifies the scope for instances, which determines 
            visibility of instances across containers and hierarchies.
            </summary>
        </member>
        <member name="T:Funq.IRegistration`1">
            <summary>
            Fluent API for customizing the registration of a service.
            </summary>
        </member>
        <member name="T:Funq.IInitializable`1">
            <summary>
            Fluent API that allows registering an initializer for the 
            service.
            </summary>
        </member>
        <member name="M:Funq.IInitializable`1.InitializedBy(System.Action{Funq.Container,`0})">
            <summary>
            Specifies an initializer that should be invoked after 
            the service instance has been created by the factory.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry`2.Factory">
            <summary>
            The Func delegate that creates instances of the service.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry`2.instance">
            <summary>
            The cached service instance if the scope is <see cref="F:Funq.ReuseScope.Hierarchy"/> or 
            <see cref="F:Funq.ReuseScope.Container"/>.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry`2.Initializer">
            <summary>
            The Func delegate that initializes the object after creation.
            </summary>
        </member>
        <member name="M:Funq.ServiceEntry`2.CloneFor(Funq.Container)">
            <summary>
            Clones the service entry assigning the <see cref="T:Funq.Container"/> to the 
            <paramref name="newContainer"/>. Does not copy the <see cref="P:Funq.ServiceEntry`2.Instance"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.HostContext.CompleteRequest(ServiceStack.Web.IRequest)">
            <summary>
            Call to signal the completion of a ServiceStack-handled Request
            </summary>
        </member>
        <member name="M:ServiceStack.HostContext.ResolveService``1(System.Web.HttpContextBase)">
            <summary>
            Resolves and auto-wires a ServiceStack Service from a ASP.NET HttpContext.
            </summary>
        </member>
        <member name="M:ServiceStack.HostContext.ResolveService``1(System.Net.HttpListenerContext)">
            <summary>
            Resolves and auto-wires a ServiceStack Service from a HttpListenerContext.
            </summary>
        </member>
        <member name="M:ServiceStack.HostContext.ResolveService``1(ServiceStack.Web.IRequest)">
            <summary>
            Resolves and auto-wires a ServiceStack Service.
            </summary>
        </member>
        <member name="P:ServiceStack.HostContext.VirtualFiles">
            <summary>
            Read/Write Virtual FileSystem. Defaults to FileSystemVirtualPathProvider
            </summary>
        </member>
        <member name="P:ServiceStack.HostContext.VirtualFileSources">
            <summary>
            Cascading collection of virtual file sources, inc. Embedded Resources, File System, In Memory, S3
            </summary>
        </member>
        <member name="T:ServiceStack.Host.ActionContext">
            <summary>
            Context to capture IService action
            </summary>
        </member>
        <member name="M:ServiceStack.Host.ContainerResolveCache.CreateInstance(System.Type)">
            <summary>
            Creates instance using straight Resolve approach.
            This will throw an exception if resolution fails
            </summary>
        </member>
        <member name="M:ServiceStack.Host.ContainerResolveCache.CreateInstance(System.Type,System.Boolean)">
            <summary>
            Creates instance using the TryResolve approach if tryResolve = true.
            Otherwise uses Resolve approach, which will throw an exception if resolution fails
            </summary>
        </member>
        <member name="M:ServiceStack.Host.Cookies.AddPermanentCookie(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Sets a persistent cookie which never expires
            </summary>
        </member>
        <member name="M:ServiceStack.Host.Cookies.AddSessionCookie(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Sets a session cookie which expires after the browser session closes
            </summary>
        </member>
        <member name="M:ServiceStack.Host.Cookies.DeleteCookie(System.String)">
            <summary>
            Deletes a specified cookie by setting its value to empty and expiration to -1 days
            </summary>
        </member>
        <member name="M:ServiceStack.Host.Handlers.IndexPageHttpHandler.ProcessRequest(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.String)">
            <summary>
            Non ASP.NET requests
            </summary>
        </member>
        <member name="M:ServiceStack.Host.Handlers.IndexPageHttpHandler.ProcessRequest(System.Web.HttpContextBase)">
            <summary>
            ASP.NET requests
            </summary>
        </member>
        <member name="M:ServiceStack.Host.Handlers.RedirectHttpHandler.ProcessRequest(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.String)">
            <summary>
            Non ASP.NET requests
            </summary>
            <param name="request"></param>
            <param name="response"></param>
            <param name="operationName"></param>
        </member>
        <member name="M:ServiceStack.Host.Handlers.RedirectHttpHandler.ProcessRequest(System.Web.HttpContextBase)">
            <summary>
            ASP.NET requests
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ServiceStack.Host.Handlers.StaticFileHandler.SetDefaultFile(System.String,System.Byte[],System.DateTime)">
            <summary>
            Keep default file contents in-memory
            </summary>
            <param name="defaultFilePath"></param>
        </member>
        <member name="M:ServiceStack.Host.RestHandler.CreateRequest(ServiceStack.Web.IRequest,System.String)">
            <summary>
            Used in Unit tests
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Host.RestPath.IsMatch(System.String,System.String[])">
            <summary>
            For performance withPathInfoParts should already be a lower case string
            to minimize redundant matching operations.
            </summary>
            <param name="httpMethod"></param>
            <param name="withPathInfoParts"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Host.RestPath.IsMatch(System.String,System.String[],System.Int32@)">
            <summary>
            For performance withPathInfoParts should already be a lower case string
            to minimize redundant matching operations.
            </summary>
            <param name="httpMethod"></param>
            <param name="withPathInfoParts"></param>
            <param name="wildcardMatchCount"></param>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Host.RestPath.PathComponentsCount">
            <summary>
            The number of segments separated by '/' determinable by path.Split('/').Length
            e.g. /path/to/here.ext == 3
            </summary>
        </member>
        <member name="P:ServiceStack.Host.RestPath.TotalComponentsCount">
            <summary>
            The total number of segments after subparts have been exploded ('.') 
            e.g. /path/to/here.ext == 4
            </summary>
        </member>
        <member name="P:ServiceStack.Host.RestPath.FirstMatchHashKey">
            <summary>
            Provide for quick lookups based on hashes that can be determined from a request url
            </summary>
        </member>
        <member name="M:ServiceStack.Host.ServiceController.ExecuteMessage(ServiceStack.Messaging.IMessage)">
            <summary>
            Execute MQ
            </summary>
        </member>
        <member name="M:ServiceStack.Host.ServiceController.ExecuteMessage(ServiceStack.Messaging.IMessage,ServiceStack.Web.IRequest)">
            <summary>
            Execute MQ with requestContext
            </summary>
        </member>
        <member name="M:ServiceStack.Host.ServiceController.Execute(System.Object)">
            <summary>
            Execute using empty RequestContext
            </summary>
        </member>
        <member name="M:ServiceStack.Host.XsdMetadata.GetBaseTypeWithTheSameName(System.Type)">
            <summary>
            Gets the name of the base most type in the heirachy tree with the same.
            
            We get an exception when trying to create a schema with multiple types of the same name
            like when inheriting from a DataContract with the same name.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Html.AntiXsrf.AntiForgery">
            <summary>
            Provides access to the anti-forgery system, which provides protection against
            Cross-site Request Forgery (XSRF, also called CSRF) attacks.
            </summary>
        </member>
        <member name="M:ServiceStack.Html.AntiXsrf.AntiForgery.GetHtml">
            <summary>
            Generates an anti-forgery token for this request. This token can
            be validated by calling the Validate() method.
            </summary>
            <returns>An HTML string corresponding to an &lt;input type="hidden"&gt;
            element. This element should be put inside a &lt;form&gt;.</returns>
            <remarks>
            This method has a side effect: it may set a response cookie.
            </remarks>
        </member>
        <member name="M:ServiceStack.Html.AntiXsrf.AntiForgery.GetTokens(System.String,System.String@,System.String@)">
            <summary>
            Generates an anti-forgery token pair (cookie and form token) for this request.
            This method is similar to GetHtml(), but this method gives the caller control
            over how to persist the returned values. To validate these tokens, call the
            appropriate overload of Validate.
            </summary>
            <param name="oldCookieToken">The anti-forgery token - if any - that already existed
            for this request. May be null. The anti-forgery system will try to reuse this cookie
            value when generating a matching form token.</param>
            <param name="newCookieToken">Will contain a new cookie value if the old cookie token
            was null or invalid. If this value is non-null when the method completes, the caller
            must persist this value in the form of a response cookie, and the existing cookie value
            should be discarded. If this value is null when the method completes, the existing
            cookie value was valid and needn't be modified.</param>
            <param name="formToken">The value that should be stored in the &lt;form&gt;. The caller
            should take care not to accidentally swap the cookie and form tokens.</param>
            <remarks>
            Unlike the GetHtml() method, this method has no side effect. The caller
            is responsible for setting the response cookie and injecting the returned
            form token as appropriate.
            </remarks>
        </member>
        <member name="M:ServiceStack.Html.AntiXsrf.AntiForgery.Validate">
            <summary>
            Validates an anti-forgery token that was supplied for this request.
            The anti-forgery token may be generated by calling GetHtml().
            </summary>
            <remarks>
            Throws an HttpAntiForgeryException if validation fails.
            </remarks>
        </member>
        <member name="M:ServiceStack.Html.AntiXsrf.AntiForgery.Validate(System.String,System.String)">
            <summary>
            Validates an anti-forgery token pair that was generated by the GetTokens method.
            </summary>
            <param name="cookieToken">The token that was supplied in the request cookie.</param>
            <param name="formToken">The token that was supplied in the request form body.</param>
            <remarks>
            Throws an HttpAntiForgeryException if validation fails.
            </remarks>
        </member>
        <member name="T:ServiceStack.Html.AntiXsrf.AntiForgeryConfig">
            <summary>
            Provides programmatic configuration for the anti-forgery token system.
            </summary>
        </member>
        <member name="P:ServiceStack.Html.AntiXsrf.AntiForgeryConfig.AdditionalDataProvider">
            <summary>
            Specifies an object that can provide additional data to put into all
            generated tokens and that can validate additional data in incoming
            tokens.
            </summary>
        </member>
        <member name="P:ServiceStack.Html.AntiXsrf.AntiForgeryConfig.CookieName">
            <summary>
            Specifies the name of the cookie that is used by the anti-forgery
            system.
            </summary>
            <remarks>
            If an explicit name is not provided, the system will automatically
            generate a name.
            </remarks>
        </member>
        <member name="P:ServiceStack.Html.AntiXsrf.AntiForgeryConfig.RequireSsl">
            <summary>
            Specifies whether SSL is required for the anti-forgery system
            to operate. If this setting is 'true' and a non-SSL request
            comes into the system, all anti-forgery APIs will fail.
            </summary>
        </member>
        <member name="P:ServiceStack.Html.AntiXsrf.AntiForgeryConfig.SuppressIdentityHeuristicChecks">
            <summary>
            Specifies whether the anti-forgery system should skip checking
            for conditions that might indicate misuse of the system. Please
            use caution when setting this switch, as improper use could open
            security holes in the application.
            </summary>
            <remarks>
            Setting this switch will disable several checks, including:
            - Identity.IsAuthenticated = true without Identity.Name being set
            - special-casing claims-based identities
            </remarks>
        </member>
        <member name="P:ServiceStack.Html.AntiXsrf.AntiForgeryConfig.UniqueClaimTypeIdentifier">
            <summary>
            If claims-based authorization is in use, specifies the claim
            type from the identity that is used to uniquely identify the
            user. If this property is set, all claims-based identities
            <em>must</em> return unique values for this claim type.
            </summary>
            <remarks>
            If claims-based authorization is in use and this property has
            not been set, the anti-forgery system will automatically look
            for claim types "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"
            and "http://schemas.microsoft.com/accesscontrolservice/2010/07/claims/identityprovider".
            </remarks>
        </member>
        <member name="T:ServiceStack.Html.AntiXsrf.IAntiForgeryAdditionalDataProvider">
            <summary>
            Allows providing or validating additional custom data for anti-forgery tokens.
            For example, the developer could use this to supply a nonce when the token is
            generated, then he could validate the nonce when the token is validated.
            </summary>
            <remarks>
            The anti-forgery system already embeds the client's username within the
            generated tokens. This interface provides and consumes <em>supplemental</em>
            data. If an incoming anti-forgery token contains supplemental data but no
            additional data provider is configured, the supplemental data will not be
            validated.
            </remarks>
        </member>
        <member name="M:ServiceStack.Html.AntiXsrf.IAntiForgeryAdditionalDataProvider.GetAdditionalData(System.Web.HttpContextBase)">
            <summary>
            Provides additional data to be stored for the anti-forgery tokens generated
            during this request.
            </summary>
            <param name="context">Information about the current request.</param>
            <returns>Supplemental data to embed within the anti-forgery token.</returns>
        </member>
        <member name="M:ServiceStack.Html.AntiXsrf.IAntiForgeryAdditionalDataProvider.ValidateAdditionalData(System.Web.HttpContextBase,System.String)">
            <summary>
            Validates additional data that was embedded inside an incoming anti-forgery
            token.
            </summary>
            <param name="context">Information about the current request.</param>
            <param name="additionalData">Supplemental data that was embedded within the token.</param>
            <returns>True if the data is valid; false if the data is invalid.</returns>
        </member>
        <!-- 对于成员“T:ServiceStack.Html.HtmlCompressor”忽略有格式错误的 XML 注释 -->
        <member name="F:ServiceStack.Html.HtmlCompressor.PHP_TAG_PATTERN">
            Predefined pattern that matches <code>&lt;?php ... ?></code> tags. 
            Could be passed inside a list to {@link #setPreservePatterns(List) setPreservePatterns} method.
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.SERVER_SCRIPT_TAG_PATTERN">
            Predefined pattern that matches <code>&lt;% ... %></code> tags. 
            Could be passed inside a list to {@link #setPreservePatterns(List) setPreservePatterns} method.
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.SERVER_SIDE_INCLUDE_PATTERN">
            Predefined pattern that matches <code>&lt;--# ... --></code> tags. 
            Could be passed inside a list to {@link #setPreservePatterns(List) setPreservePatterns} method.
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.BLOCK_TAGS_MIN">
            Predefined list of tags that are very likely to be block-level. 
            Could be passed to {@link #setRemoveSurroundingSpaces(string) setRemoveSurroundingSpaces} method.
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.BLOCK_TAGS_MAX">
            Predefined list of tags that are block-level by default, excluding <code>&lt;div></code> and <code>&lt;li></code> tags. 
            Table tags are also included.
            Could be passed to {@link #setRemoveSurroundingSpaces(string) setRemoveSurroundingSpaces} method.
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.ALL_TAGS">
            Could be passed to {@link #setRemoveSurroundingSpaces(string) setRemoveSurroundingSpaces} method 
            to remove all surrounding spaces (not recommended).
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.Enabled">
            If set to <code>false</code> all compression will be bypassed. Might be useful for testing purposes. 
            Default is <code>true</code>.
            
            @param enabled set <code>false</code> to bypass all compression
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.JavaScriptCompressor">
            Gets or Sets JavaScript compressor implementation that will be used 
            to compress inline JavaScript in HTML. 
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.CssCompressor">
            Returns CSS compressor implementation that will be used 
            to compress inline CSS in HTML.
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.RemoveComments">
            If set to <code>true</code> all HTML comments will be removed.   
            Default is <code>true</code>.
            
            @param removeComments set <code>true</code> to remove all HTML comments
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.RemoveMultiSpaces">
            If set to <code>true</code> all multiple whitespace characters will be replaced with single spaces.
            Default is <code>true</code>.
            
            @param removeMultiSpaces set <code>true</code> to replace all multiple whitespace characters 
            will single spaces.
        </member>
        <!-- 对于成员“F:ServiceStack.Html.HtmlCompressor.RemoveIntertagSpaces”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:ServiceStack.Html.HtmlCompressor.RemoveQuotes”忽略有格式错误的 XML 注释 -->
        <member name="F:ServiceStack.Html.HtmlCompressor.CompressJavaScript">
            Enables JavaScript compression within &lt;script> tags 
            if set to <code>true</code>. Default is <code>false</code> for performance reasons.
             
            <p><b>Note:</b> Compressing JavaScript is not recommended if pages are 
            compressed dynamically on-the-fly because of performance impact. 
            You should consider putting JavaScript into a separate file and
            compressing it using standalone YUICompressor for example.</p>
            
            @param compressJavaScript set <code>true</code> to enable JavaScript compression. 
            Default is <code>false</code>
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.CompressCss">
            Enables CSS compression within &lt;style> tags using 
            <a href="http://developer.yahoo.com/yui/compressor/">Yahoo YUI ICompressor</a> 
            if set to <code>true</code>. Default is <code>false</code> for performance reasons.
             
            <p><b>Note:</b> Compressing CSS is not recommended if pages are 
            compressed dynamically on-the-fly because of performance impact. 
            You should consider putting CSS into a separate file and
            compressing it using standalone YUICompressor for example.</p>
            
            @param compressCss set <code>true</code> to enable CSS compression. 
            Default is <code>false</code>
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.SimpleDoctype">
            If set to <code>true</code>, existing DOCTYPE declaration will be replaced with simple <code>&lt;!DOCTYPE html></code> declaration.
            Default is <code>false</code>.
            
            @param simpleDoctype set <code>true</code> to replace existing DOCTYPE declaration with <code>&lt;!DOCTYPE html></code>
        </member>
        <!-- 对于成员“F:ServiceStack.Html.HtmlCompressor.RemoveScriptAttributes”忽略有格式错误的 XML 注释 -->
        <member name="F:ServiceStack.Html.HtmlCompressor.RemoveStyleAttributes">
            If set to <code>true</code>, <code>type="text/style"</code> attributes will be removed from <code>&lt;style></code> tags. Default is <code>false</code>.
            
            @param removeStyleAttributes set <code>true</code> to remove <code>type="text/style"</code> attributes from <code>&lt;style></code> tags
        </member>
        <!-- 对于成员“F:ServiceStack.Html.HtmlCompressor.RemoveLinkAttributes”忽略有格式错误的 XML 注释 -->
        <member name="F:ServiceStack.Html.HtmlCompressor.RemoveFormAttributes">
            If set to <code>true</code>, <code>method="get"</code> attributes will be removed from <code>&lt;form></code> tags. Default is <code>false</code>.
            
            @param removeFormAttributes set <code>true</code> to remove <code>method="get"</code> attributes from <code>&lt;form></code> tags
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.RemoveInputAttributes">
            If set to <code>true</code>, <code>type="text"</code> attributes will be removed from <code>&lt;input></code> tags. Default is <code>false</code>.
            
            @param removeInputAttributes set <code>true</code> to remove <code>type="text"</code> attributes from <code>&lt;input></code> tags
        </member>
        <!-- 对于成员“F:ServiceStack.Html.HtmlCompressor.SimpleBooleanAttributes”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:ServiceStack.Html.HtmlCompressor.RemoveJavaScriptProtocol”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:ServiceStack.Html.HtmlCompressor.RemoveHttpProtocol”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:ServiceStack.Html.HtmlCompressor.RemoveHttpsProtocol”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:ServiceStack.Html.HtmlCompressor.RemoveSurroundingSpaces”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:ServiceStack.Html.HtmlCompressor.PreservePatterns”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:ServiceStack.Html.HtmlCompressor.GenerateStatistics”忽略有格式错误的 XML 注释 -->
        <member name="F:ServiceStack.Html.HtmlCompressor.Statistics">
            Returns {@link HtmlCompressorStatistics} object containing statistics of the last HTML compression, if enabled. 
            Should be called after {@link #compress(string)}
            
            @return {@link HtmlCompressorStatistics} object containing last HTML compression statistics
            
            @see HtmlCompressorStatistics
            @see #setGenerateStatistics(bool)
        </member>
        <member name="M:ServiceStack.Html.HtmlCompressor.Compress(System.String)">
            The main method that compresses given HTML source and returns compressed
            result.
            
            @param html HTML content to compress
            @return compressed content.
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressorStatistics.OriginalMetrics">
            Returns metrics of an uncompressed document
            
            @return metrics of an uncompressed document
            @see HtmlMetrics
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressorStatistics.CompressedMetrics">
            Returns metrics of a compressed document
            
            @return metrics of a compressed document
            @see HtmlMetrics
        </member>
        <!-- 对于成员“F:ServiceStack.Html.HtmlCompressorStatistics.Time”忽略有格式错误的 XML 注释 -->
        <member name="F:ServiceStack.Html.HtmlCompressorStatistics.PreservedSize">
            Returns total size of blocks that were skipped by the compressor 
            (for example content inside <code>&lt;pre></code> tags or inside   
            <code>&lt;script></code> tags with disabled javascript compression)
            
            @return the total size of blocks that were skipped by the compressor, in bytes
        </member>
        <member name="F:ServiceStack.Html.HtmlMetrics.Filesize">
            Returns total filesize of a document
            
            @return total filesize of a document, in bytes
        </member>
        <member name="F:ServiceStack.Html.HtmlMetrics.EmptyChars">
            Returns number of empty characters (spaces, tabs, end of lines) in a document
            
            @return number of empty characters in a document
        </member>
        <member name="F:ServiceStack.Html.HtmlMetrics.InlineScriptSize">
            Returns total size of inline <code>&lt;script></code> tags
            
            @return total size of inline <code>&lt;script></code> tags, in bytes
        </member>
        <member name="F:ServiceStack.Html.HtmlMetrics.InlineStyleSize">
            Returns total size of inline <code>&lt;style></code> tags
            
            @return total size of inline <code>&lt;style></code> tags, in bytes
        </member>
        <member name="F:ServiceStack.Html.HtmlMetrics.InlineEventSize">
            Returns total size of inline event handlers (<code>onclick</code>, etc)
            
            @return total size of inline event handlers, in bytes
        </member>
        <member name="M:ServiceStack.Html.ScopeStorageDictionary.#ctor(System.Collections.Generic.IDictionary{System.Object,System.Object},System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Html.ScopeStorageDictionary"/> class.
            </summary>
            <param name="baseScope">The base scope.</param>
            <param name="backingStore">
            The dictionary to use as a storage. Since the dictionary would be used as-is, we expect the implementer to 
            use the same key-value comparison logic as we do here.
            </param>
        </member>
        <member name="T:ServiceStack.Html.ScopeStorageComparer">
            <summary>
            Custom comparer for the context dictionaries
            The comparer treats strings as a special case, performing case insesitive comparison. 
            This guaratees that we remain consistent throughout the chain of contexts since PageData dictionary 
            behaves in this manner.
            </summary>
        </member>
        <member name="M:ServiceStack.HttpExtensions.EndRequest(System.Web.HttpResponseBase,System.Boolean)">
            <summary>
            End a ServiceStack Request
            </summary>
        </member>
        <member name="M:ServiceStack.HttpExtensions.EndRequest(ServiceStack.Web.IResponse,System.Boolean)">
            <summary>
            End a ServiceStack Request
            </summary>
        </member>
        <member name="M:ServiceStack.HttpExtensions.EndHttpHandlerRequest(System.Web.HttpContextBase,System.Boolean,System.Boolean,System.Boolean,System.Action{System.Web.HttpResponseBase})">
            <summary>
            End a HttpHandler Request
            </summary>
        </member>
        <member name="M:ServiceStack.HttpExtensions.EndHttpHandlerRequest(ServiceStack.Web.IResponse,System.Boolean,System.Boolean,System.Action{ServiceStack.Web.IResponse})">
            <summary>
            End a HttpHandler Request
            </summary>
        </member>
        <member name="M:ServiceStack.HttpExtensions.EndMqRequest(ServiceStack.Web.IResponse,System.Boolean)">
            <summary>
            End an MQ Request
            </summary>
        </member>
        <member name="M:ServiceStack.HttpExtensions.EndRequestWithNoContent(ServiceStack.Web.IResponse)">
            <summary>
            End a ServiceStack Request with no content
            </summary>
        </member>
        <member name="M:ServiceStack.HttpRequestExtensions.GetItemOrCookie(ServiceStack.Web.IRequest,System.String)">
            <summary>
            Gets string value from Items[name] then Cookies[name] if exists.
            Useful when *first* setting the users response cookie in the request filter.
            To access the value for this initial request you need to set it in Items[].
            </summary>
            <returns>string value or null if it doesn't exist</returns>
        </member>
        <member name="M:ServiceStack.HttpRequestExtensions.GetParam(ServiceStack.Web.IRequest,System.String)">
            <summary>
            Gets request paramater string value by looking in the following order:
            - QueryString[name]
            - FormData[name]
            - Cookies[name]
            - Items[name]
            </summary>
            <returns>string value or null if it doesn't exist</returns>
        </member>
        <member name="F:ServiceStack.HttpRequestExtensions.Log">
                     * 
                         Input: http://localhost:96/Cambia3/Temp/Test.aspx/path/info?q=item#fragment
            
                        Some HttpRequest path and URL properties:
                        Request.ApplicationPath:	/Cambia3
                        Request.CurrentExecutionFilePath:	/Cambia3/Temp/Test.aspx
                        Request.FilePath:			/Cambia3/Temp/Test.aspx
                        Request.Path:				/Cambia3/Temp/Test.aspx/path/info
                        Request.PathInfo:			/path/info
                        Request.PhysicalApplicationPath:	D:\Inetpub\wwwroot\CambiaWeb\Cambia3\
                        Request.QueryString:		/Cambia3/Temp/Test.aspx/path/info?query=arg
                        Request.Url.AbsolutePath:	/Cambia3/Temp/Test.aspx/path/info
                        Request.Url.AbsoluteUri:	http://localhost:96/Cambia3/Temp/Test.aspx/path/info?query=arg
                        Request.Url.Fragment:	
                        Request.Url.Host:			localhost
                        Request.Url.LocalPath:		/Cambia3/Temp/Test.aspx/path/info
                        Request.Url.PathAndQuery:	/Cambia3/Temp/Test.aspx/path/info?query=arg
                        Request.Url.Port:			96
                        Request.Url.Query:			?query=arg
                        Request.Url.Scheme:			http
                        Request.Url.Segments:		/
                                                    Cambia3/
                                                    Temp/
                                                    Test.aspx/
                                                    path/
                                                    info
                     * 
        </member>
        <member name="M:ServiceStack.HttpRequestExtensions.GetRequestParams(ServiceStack.Web.IRequest)">
            <summary>
            Duplicate Params are given a unique key by appending a #1 suffix
            </summary>
        </member>
        <member name="M:ServiceStack.HttpRequestExtensions.GetFlattenedRequestParams(ServiceStack.Web.IRequest)">
            <summary>
            Duplicate params have their values joined together in a comma-delimited string
            </summary>
        </member>
        <member name="M:ServiceStack.HttpRequestExtensions.ResolveItem(ServiceStack.Web.IRequest,System.String,System.Func{ServiceStack.Web.IRequest,System.Object})">
            <summary>
            Use this to treat Request.Items[] as a cache by returning pre-computed items to save 
            calculating them multiple times.
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResponseExtensions.SetPermanentCookie(ServiceStack.Web.IResponse,System.String,System.String)">
            <summary>
            Sets a persistent cookie which never expires
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResponseExtensions.SetSessionCookie(ServiceStack.Web.IResponse,System.String,System.String)">
            <summary>
            Sets a session cookie which expires after the browser session closes
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResponseExtensions.SetCookie(ServiceStack.Web.IResponse,System.String,System.String,System.TimeSpan)">
            <summary>
            Sets a persistent cookie which expires after the given time
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResponseExtensions.SetCookie(ServiceStack.Web.IResponse,System.String,System.String,System.DateTime,System.String)">
            <summary>
            Sets a persistent cookie with an expiresAt date
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResponseExtensions.DeleteCookie(ServiceStack.Web.IResponse,System.String)">
            <summary>
            Deletes a specified cookie by setting its value to empty and expiration to -1 days
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResponseExtensionsInternal.WriteToResponse(ServiceStack.Web.IResponse,System.Object,ServiceStack.Web.ResponseSerializerDelegate,ServiceStack.Web.IRequest,System.Byte[],System.Byte[])">
            <summary>
            Writes to response.
            Response headers are customizable by implementing IHasOptions an returning Dictionary of Http headers.
            </summary>
            <param name="response">The response.</param>
            <param name="result">Whether or not it was implicity handled by ServiceStack's built-in handlers.</param>
            <param name="defaultAction">The default action.</param>
            <param name="request">The serialization context.</param>
            <param name="bodyPrefix">Add prefix to response body if any</param>
            <param name="bodySuffix">Add suffix to response body if any</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.HttpResult.SoftRedirect(System.String,System.Object)">
            <summary>
            Respond with a 'Soft redirect' so smart clients (e.g. ajax) have access to the response and 
            can decide whether or not they should redirect
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResult.TriggerEvent(System.Object,System.String,System.String)">
            <summary>
            Decorate the response with an additional client-side event to instruct participating 
            smart clients (e.g. ajax) with hints to transparently invoke client-side functionality
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResultUtils.GetDto(System.Object)">
            <summary>
            Shortcut to get the ResponseDTO whether it's bare or inside a IHttpResult
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.HttpResultUtils.GetResponseDto(System.Object)">
            <summary>
            Alias of AsDto
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResultUtils.GetDto``1(System.Object)">
            <summary>
            Shortcut to get the ResponseDTO whether it's bare or inside a IHttpResult
            </summary>
            <param name="response"></param>
            <returns>TResponse if found; otherwise null</returns>
        </member>
        <member name="M:ServiceStack.HttpResultUtils.GetResponseDto``1(System.Object)">
            <summary>
            Alias of AsDto
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResultUtils.IsErrorResponse(System.Object)">
            <summary>
            Whether the response is an IHttpError or Exception
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResultUtils.ExtractHttpRanges(System.String,System.Int64,System.Int64@,System.Int64@)">
            <summary>
            rangeHeader should be of the format "bytes=0-" or "bytes=0-12345" or "bytes=123-456"
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResultUtils.AddHttpRangeResponseHeaders(ServiceStack.Web.IResponse,System.Int64,System.Int64,System.Int64)">
            <summary>
            Adds 206 PartialContent Status, Content-Range and Content-Length headers
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResultUtils.WritePartialTo(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Writes partial range as specified by start-end, from fromStream to toStream.
            </summary>
        </member>
        <member name="T:ServiceStack.IRepository">
            <summary>
            A convenient repository base class you can inherit from to reduce the boilerplate 
            with accessing a managed IDbConnection
            </summary>
        </member>
        <member name="T:ServiceStack.ILogic">
            <summary>
            A convenient base class for your injected service dependencies that reduces the boilerplate
            with managed access to ServiceStack's built-in providers
            </summary>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.GetHtmlHelper">
            <summary>
            Ensure the same instance is used for subclasses
            </summary>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.InitHelpers">
            <summary>
            Called before page is executed
            </summary>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.OnLoad">
            <summary>
            Called after page is executed but before it's merged with the 
            website template if any.
            </summary>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.Raw(System.String)">
            <summary>
            Don't HTML encode safe output
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.Partial(System.String,System.Object)">
            <summary>
            Return the output of a different view with the specified name 
            using the supplied model
            </summary>
            <param name="viewName"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Markdown.MarkdownViewBase.Get``1">
            <summary>
            Resolve registered Assemblies
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.ViewEngine">
            <summary>
            Reference to MarkdownViewEngine
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.AppHost">
            <summary>
            The AppHost so you can access configuration and resolve dependencies, etc.
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.MarkdownPage">
            <summary>
            This precompiled Markdown page with Metadata
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.Html">
            <summary>
            ASP.NET MVC's HtmlHelper
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.ScopeArgs">
            <summary>
            All variables passed to and created by your page. 
            The Response DTO is stored and accessible via the 'Model' variable.
             
            All variables and outputs created are stored in ScopeArgs which is what's available
            to your website template. The Generated page is stored in the 'Body' variable.
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.RenderHtml">
            <summary>
            Whether HTML or Markdown output is requested
            </summary>
        </member>
        <member name="P:ServiceStack.Markdown.MarkdownViewBase.Model">
            <summary>
            The Response DTO
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.IMessageHandlerFactory">
            <summary>
            Encapsulates creating a new message handler
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.MessageHandler`1">
            <summary>
            Processes all messages in a Normal and Priority Queue.
            Expects to be called in 1 thread. i.e. Non Thread-Safe.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.Metadata.ServiceEndpointsMetadataConfig.Create(System.String)">
            <summary>
            Changes the links for the servicestack/metadata page
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.BaseProfilerProvider">
            <summary>
            BaseProfilerProvider.  This providers some helper methods which provide access to
            internals not otherwise available.
            To use, override the <see cref="M:ServiceStack.MiniProfiler.BaseProfilerProvider.Start(ServiceStack.MiniProfiler.ProfileLevel)"/>, <see cref="M:ServiceStack.MiniProfiler.BaseProfilerProvider.Stop(System.Boolean)"/> and <see cref="M:ServiceStack.MiniProfiler.BaseProfilerProvider.GetCurrentProfiler"/>
            methods.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.IProfilerProvider">
            <summary>
            A provider used to create <see cref="T:ServiceStack.MiniProfiler.Profiler"/> instances and maintain the current instance.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.IProfilerProvider.Start(ServiceStack.MiniProfiler.ProfileLevel)">
            <summary>
            Starts a new MiniProfiler and sets it to be current.  By the end of this method
            <see cref="M:ServiceStack.MiniProfiler.IProfilerProvider.GetCurrentProfiler"/> should return the new MiniProfiler.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.IProfilerProvider.Stop(System.Boolean)">
            <summary>
            Ends the current profiling session, if one exists.
            </summary>
            <param name="discardResults">
            When true, clears the <see cref="P:ServiceStack.MiniProfiler.Profiler.Current"/> for this HttpContext, allowing profiling to 
            be prematurely stopped and discarded. Useful for when a specific route does not need to be profiled.
            </param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.IProfilerProvider.GetCurrentProfiler">
            <summary>
            Returns the current MiniProfiler.  This is used by <see cref="P:ServiceStack.MiniProfiler.Profiler.Current"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.BaseProfilerProvider.Start(ServiceStack.MiniProfiler.ProfileLevel)">
            <summary>
            Starts a new MiniProfiler and sets it to be current.  By the end of this method
            <see cref="M:ServiceStack.MiniProfiler.BaseProfilerProvider.GetCurrentProfiler"/> should return the new MiniProfiler.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.BaseProfilerProvider.Stop(System.Boolean)">
            <summary>
            Stops the current MiniProfiler (if any is currently running).
            <see cref="M:ServiceStack.MiniProfiler.BaseProfilerProvider.SaveProfiler(ServiceStack.MiniProfiler.Profiler)"/> should be called if <paramref name="discardResults"/> is false
            </summary>
            <param name="discardResults">If true, any current results will be thrown away and nothing saved</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.BaseProfilerProvider.GetCurrentProfiler">
            <summary>
            Returns the current MiniProfiler.  This is used by <see cref="P:ServiceStack.MiniProfiler.Profiler.Current"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.BaseProfilerProvider.SetProfilerActive(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Sets <paramref name="profiler"/> to be active (read to start profiling)
            This should be called once a new MiniProfiler has been created.
            </summary>
            <param name="profiler">The profiler to set to active</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="profiler"/> is null</exception>
        </member>
        <member name="M:ServiceStack.MiniProfiler.BaseProfilerProvider.StopProfiler(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Stops the profiler and marks it as inactive.
            </summary>
            <param name="profiler">The profiler to stop</param>
            <returns>True if successful, false if Stop had previously been called on this profiler</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="profiler"/> is null</exception>
        </member>
        <member name="M:ServiceStack.MiniProfiler.BaseProfilerProvider.SaveProfiler(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Calls <see cref="M:ServiceStack.MiniProfiler.Profiler.Settings.EnsureStorageStrategy"/> to save the current
            profiler using the current storage settings
            </summary>
            <param name="current"></param>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.Link`2">
            <summary>
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledDbCommand.BindByName">
            <summary>
            If the underlying command supports BindByName, this sets/clears the underlying
            implementation accordingly. This is required to support OracleCommand from dapper-dot-net
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.ProfiledDbConnection">
            <summary>
            Wraps a database connection, allowing sql execution timings to be collected when a <see cref="T:ServiceStack.MiniProfiler.Profiler"/> session is started.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbConnection.#ctor(System.Data.Common.DbConnection,ServiceStack.MiniProfiler.Data.IDbProfiler,System.Boolean)">
            <summary>
            Returns a new <see cref="T:ServiceStack.MiniProfiler.Data.ProfiledDbConnection"/> that wraps <paramref name="connection"/>, 
            providing query execution profiling.  If profiler is null, no profiling will occur.
            </summary>
            <param name="connection">Your provider-specific flavor of connection, e.g. SqlConnection, OracleConnection</param>
            <param name="profiler">The currently started <see cref="T:ServiceStack.MiniProfiler.Data.IDbProfiler"/> or null.</param>
            <param name="autoDisposeConnection">Determines whether the ProfiledDbConnection will dispose the underlying connection.</param>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledDbConnection._conn">
            <summary>
            This will be made private; use <see cref="P:ServiceStack.MiniProfiler.Data.ProfiledConnection.InnerConnection"/>
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledDbConnection._profiler">
            <summary>
            This will be made private; use <see cref="T:ServiceStack.MiniProfiler.Profiler"/>
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.ProfiledDbProviderFactory">
            <summary>
            Wrapper for a db provider factory to enable profiling
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ProfiledDbProviderFactory.Instance">
            <summary>
            Every provider factory must have an Instance public field
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbProviderFactory.#ctor">
            <summary>
            Used for db provider apis internally 
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbProviderFactory.CreateCommand">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledDbProviderFactory.CreateConnection">
            <summary>
            proxy
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Helpers.ExtensionMethods">
            <summary>
            Common extension methods to use only in this project
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Helpers.ExtensionMethods.IsNullOrWhiteSpace(System.String)">
            <summary>
            Answers true if this String is either null or empty.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Helpers.ExtensionMethods.HasValue(System.String)">
            <summary>
            Answers true if this String is neither null or empty.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Helpers.ExtensionMethods.EnsureTrailingSlash(System.String)">
            <summary>
            Removes trailing / characters from a path and leaves just one
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Helpers.ExtensionMethods.RemoveLeadingSlash(System.String)">
            <summary>
            Removes any leading / characters from a path
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Helpers.ExtensionMethods.RemoveTrailingSlash(System.String)">
            <summary>
            Removes any leading / characters from a path
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Helpers.ExtensionMethods.ToJson(System.Object)">
            <summary>
            Serializes <paramref name="o"/> to a json string.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Helpers.StackTraceSnippet">
            <summary>
            Gets part of a stack trace containing only methods we care about.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Helpers.StackTraceSnippet.Get">
            <summary>
            Gets the current formatted and filted stack trace.
            </summary>
            <returns>Space separated list of methods</returns>
        </member>
        <member name="T:ServiceStack.MiniProfiler.IpAddressIdentity">
            <summary>
            Identifies users based on ip address.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.IUserProvider">
            <summary>
            Provides functionality to identify which user is profiling a request.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.IUserProvider.GetUser(System.Web.HttpRequest)">
            <summary>
            Returns a string to identify the user profiling the current 'request'.
            </summary>
            <param name="request">The current HttpRequest being profiled.</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.IpAddressIdentity.GetUser(System.Web.HttpRequest)">
            <summary>
            Returns the paramter HttpRequest's client ip address.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Profiler">
            <summary>
            A single MiniProfiler can be used to represent any number of steps/levels in a call-graph, via Step()
            </summary>
            <remarks>Totally baller.</remarks>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.GetInProgressCommands">
            <summary>
            Returns all currently open commands on this connection
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.GetSqlTimings">
            <summary>
            Returns all <see cref="T:ServiceStack.MiniProfiler.SqlTiming"/> results contained in all child <see cref="T:ServiceStack.MiniProfiler.Timing"/> steps.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Profiler._sqlExecutionCounts">
            <summary>
            Contains any sql statements that are executed, along with how many times those statements are executed.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.AddSqlTiming(ServiceStack.MiniProfiler.SqlTiming)">
            <summary>
            Adds <paramref name="stats"/> to the current <see cref="T:ServiceStack.MiniProfiler.Timing"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.GetExecutedCount(ServiceStack.MiniProfiler.Data.ExecuteType)">
            <summary>
            Returns the number of sql statements of <paramref name="type"/> that were executed in all <see cref="T:ServiceStack.MiniProfiler.Timing"/>s.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Profiler._sw">
            <summary>
            Starts when this profiler is instantiated. Each <see cref="T:ServiceStack.MiniProfiler.Timing"/> step will use this Stopwatch's current ticks as
            their starting time.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.#ctor(System.String,ServiceStack.MiniProfiler.ProfileLevel)">
            <summary>
            Creates and starts a new MiniProfiler for the root <paramref name="url"/>, filtering <see cref="T:ServiceStack.MiniProfiler.Timing"/> steps to <paramref name="level"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.ToString">
            <summary>
            Returns the <see cref="P:ServiceStack.MiniProfiler.Profiler.Root"/>'s <see cref="P:ServiceStack.MiniProfiler.Timing.Name"/> and <see cref="P:ServiceStack.MiniProfiler.Profiler.DurationMilliseconds"/> this profiler recorded.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.Equals(System.Object)">
            <summary>
            Returns true if Ids match.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.GetHashCode">
            <summary>
            Returns hashcode of Id.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.#ctor">
            <summary>
            Obsolete - used for serialization.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.GetTimingHierarchy">
            <summary>
            Walks the <see cref="T:ServiceStack.MiniProfiler.Timing"/> hierarchy contained in this profiler, starting with <see cref="P:ServiceStack.MiniProfiler.Profiler.Root"/>, and returns each Timing found.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.GetRoundedMilliseconds(System.Int64)">
            <summary>
            Returns milliseconds based on Stopwatch's Frequency.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.Start(ServiceStack.MiniProfiler.ProfileLevel)">
            <summary>
            Starts a new MiniProfiler based on the current <see cref="T:ServiceStack.MiniProfiler.IProfilerProvider"/>. This new profiler can be accessed by
            <see cref="P:ServiceStack.MiniProfiler.Profiler.Current"/>
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.Stop(System.Boolean)">
            <summary>
            Ends the current profiling session, if one exists.
            </summary>
            <param name="discardResults">
            When true, clears the <see cref="P:ServiceStack.MiniProfiler.Profiler.Current"/> for this HttpContext, allowing profiling to 
            be prematurely stopped and discarded. Useful for when a specific route does not need to be profiled.
            </param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.StepStatic(System.String,ServiceStack.MiniProfiler.ProfileLevel)">
            <summary>
            Returns an <see cref="T:System.IDisposable"/> that will time the code between its creation and disposal. Use this method when you
            do not wish to include the MvcMiniProfiler namespace for the <see cref="M:ServiceStack.MiniProfiler.MiniProfilerExtensions.Step(ServiceStack.MiniProfiler.Profiler,System.String,ServiceStack.MiniProfiler.ProfileLevel)"/> extension method.
            </summary>
            <param name="name">A descriptive name for the code that is encapsulated by the resulting IDisposable's lifetime.</param>
            <param name="level">This step's visibility level; allows filtering when <see cref="M:ServiceStack.MiniProfiler.Profiler.Start(ServiceStack.MiniProfiler.ProfileLevel)"/> is called.</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.RenderIncludes(System.Nullable{ServiceStack.MiniProfiler.RenderPosition},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Returns the css and javascript includes needed to display the MiniProfiler results UI.
            </summary>
            <param name="position">Which side of the page the profiler popup button should be displayed on (defaults to left)</param>
            <param name="showTrivial">Whether to show trivial timings by default (defaults to false)</param>
            <param name="showTimeWithChildren">Whether to show time the time with children column by default (defaults to false)</param>
            <param name="maxTracesToShow">The maximum number of trace popups to show before removing the oldest (defaults to 15)</param>
            <param name="xhtml">xhtml rendering mode, ensure script tag is closed ... etc</param>
            <param name="showControls">when true, shows buttons to minimize and clear MiniProfiler results</param>
            <returns>Script and link elements normally; an empty string when there is no active profiling session.</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.ToJson">
            <summary>
            Renders the current <see cref="T:ServiceStack.MiniProfiler.Profiler"/> to json.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.ToJson(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Renders the parameter <see cref="T:ServiceStack.MiniProfiler.Profiler"/> to json.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.FromJson(System.String)">
            <summary>
            Deserializes the json string parameter to a <see cref="T:ServiceStack.MiniProfiler.Profiler"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.Clone">
            <summary>
            Create a DEEP clone of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.SqlProfiler">
            <summary>
            Contains information about queries executed during this profiling session.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.DurationMillisecondsInSql">
            <summary>
            Milliseconds, to one decimal place, that this MiniProfiler was executing sql.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.HasSqlTimings">
            <summary>
            Returns true when we have profiled queries.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.HasDuplicateSqlTimings">
            <summary>
            Returns true when any child Timings have duplicate queries.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.ExecutedReaders">
            <summary>
            How many sql data readers were executed in all <see cref="T:ServiceStack.MiniProfiler.Timing"/> steps.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.ExecutedScalars">
            <summary>
            How many sql scalar queries were executed in all <see cref="T:ServiceStack.MiniProfiler.Timing"/> steps.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.ExecutedNonQueries">
            <summary>
            How many sql non-query statements were executed in all <see cref="T:ServiceStack.MiniProfiler.Timing"/> steps.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Id">
            <summary>
            Identifies this Profiler so it may be stored/cached.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Name">
            <summary>
            A display name for this profiling session.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Started">
            <summary>
            When this profiler was instantiated.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.MachineName">
            <summary>
            Where this profiler was run.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Level">
            <summary>
            Allows filtering of <see cref="T:ServiceStack.MiniProfiler.Timing"/> steps based on what <see cref="T:ServiceStack.MiniProfiler.ProfileLevel"/> 
            the steps are created with.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Root">
            <summary>
            The first <see cref="T:ServiceStack.MiniProfiler.Timing"/> that is created and started when this profiler is instantiated.
            All other <see cref="T:ServiceStack.MiniProfiler.Timing"/>s will be children of this one.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.User">
            <summary>
            A string identifying the user/client that is profiling this request.  Set <see cref="!:Profiler.Settings.UserProvider"/>
            with an <see cref="T:ServiceStack.MiniProfiler.IUserProvider"/>-implementing class to provide a custom value.
            </summary>
            <remarks>
            If this is not set manually at some point, the <see cref="!:Profiler.Settings.UserProvider"/> implementation will be used;
            by default, this will be the current request's ip address.
            </remarks>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.HasUserViewed">
            <summary>
            Returns true when this MiniProfiler has been viewed by the <see cref="P:ServiceStack.MiniProfiler.Profiler.User"/> that recorded it.
            </summary>
            <remarks>
            Allows POSTs that result in a redirect to be profiled. <see cref="P:ServiceStack.MiniProfiler.Profiler.Settings.Storage"/> implementation
            will keep a list of all profilers that haven't been fetched down.
            </remarks>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Stopwatch">
            <summary>
            For unit testing, returns the timer.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.DurationMilliseconds">
            <summary>
            Milliseconds, to one decimal place, that this MiniProfiler ran.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.HasTrivialTimings">
            <summary>
            Returns true when <see cref="P:ServiceStack.MiniProfiler.Profiler.Root"/> or any of its <see cref="P:ServiceStack.MiniProfiler.Timing.Children"/> are <see cref="P:ServiceStack.MiniProfiler.Timing.IsTrivial"/>.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.HasAllTrivialTimings">
            <summary>
            Returns true when all child <see cref="T:ServiceStack.MiniProfiler.Timing"/>s are <see cref="P:ServiceStack.MiniProfiler.Timing.IsTrivial"/>.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.TrivialDurationThresholdMilliseconds">
            <summary>
            Any Timing step with a duration less than or equal to this will be hidden by default in the UI; defaults to 2.0 ms.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.ElapsedTicks">
            <summary>
            Ticks since this MiniProfiler was started.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Json">
            <summary>
            Json representing the collection of CustomTimings relating to this Profiler
            </summary>
            <remarks>
            Is used when storing the Profiler in SqlStorage
            </remarks>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Head">
            <summary>
            Points to the currently executing Timing. 
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Current">
            <summary>
            Gets the currently running MiniProfiler for the current HttpContext; null if no MiniProfiler was <see cref="M:ServiceStack.MiniProfiler.Profiler.Start(ServiceStack.MiniProfiler.ProfileLevel)"/>ed.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Profiler.Settings">
            <summary>
            Various configuration properties.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.Settings.ExcludeAssembly(System.String)">
            <summary>
            Excludes the specified assembly from the stack trace output.
            </summary>
            <param name="assemblyName">The short name of the assembly. AssemblyName.Name</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.Settings.ExcludeType(System.String)">
            <summary>
            Excludes the specified type from the stack trace output.
            </summary>
            <param name="typeToExclude">The System.Type name to exclude</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.Settings.ExcludeMethod(System.String)">
            <summary>
            Excludes the specified method name from the stack trace output.
            </summary>
            <param name="methodName">The name of the method</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Profiler.Settings.EnsureStorageStrategy">
            <summary>
            Make sure we can at least store profiler results to the http runtime cache.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.AssembliesToExclude">
            <summary>
            Assemblies to exclude from the stack trace report.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.TypesToExclude">
            <summary>
            Types to exclude from the stack trace report.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.MethodsToExclude">
            <summary>
            Methods to exclude from the stack trace report.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.StackMaxLength">
            <summary>
            The max length of the stack string to report back; defaults to 120 chars.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.TrivialDurationThresholdMilliseconds">
            <summary>
            Any Timing step with a duration less than or equal to this will be hidden by default in the UI; defaults to 2.0 ms.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.PopupShowTimeWithChildren">
            <summary>
            Dictates if the "time with children" column is displayed by default, defaults to false.
            For a per-page override you can use .RenderIncludes(showTimeWithChildren: true/false)
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.PopupShowTrivial">
            <summary>
            Dictates if trivial timings are displayed by default, defaults to false.
            For a per-page override you can use .RenderIncludes(showTrivial: true/false)
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.PopupMaxTracesToShow">
            <summary>
            Determines how many traces to show before removing the oldest; defaults to 15.
            For a per-page override you can use .RenderIncludes(maxTracesToShow: 10)
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.PopupRenderPosition">
            <summary>
            Dictates on which side of the page the profiler popup button is displayed; defaults to left.
            For a per-page override you can use .RenderIncludes(position: RenderPosition.Left/Right)
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.ShowControls">
            <summary>
            Determines if min-max, clear, etc are rendered; defaults to false.
            For a per-page override you can use .RenderIncludes(showControls: true/false)
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.ExcludeStackTraceSnippetFromSqlTimings">
            <summary>
            By default, SqlTimings will grab a stack trace to help locate where queries are being executed.
            When this setting is true, no stack trace will be collected, possibly improving profiler performance.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.IgnoredPaths">
            <summary>
            When <see cref="M:ServiceStack.MiniProfiler.Profiler.Start(ServiceStack.MiniProfiler.ProfileLevel)"/> is called, if the current request url contains any items in this property,
            no profiler will be instantiated and no results will be displayed.
            Default value is { "/ssr-", "/content/", "/scripts/", "/favicon.ico" }.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.RouteBasePath">
            <summary>
            The path under which ALL routes are registered in, defaults to the application root.  For example, "~/myDirectory/" would yield
            "/myDirectory/ssr-includes.js" rather than just "/mini-profiler-includes.js"
            Any setting here should be in APP RELATIVE FORM, e.g. "~/myDirectory/"
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.Storage">
            <summary>
            Understands how to save and load MiniProfilers. Used for caching between when
            a profiling session ends and results can be fetched to the client, and for showing shared, full-page results.
            </summary>
            <remarks>
            The normal profiling session life-cycle is as follows:
            1) request begins
            2) profiler is started
            3) normal page/controller/request execution
            4) profiler is stopped
            5) profiler is cached with <see cref="P:ServiceStack.MiniProfiler.Profiler.Settings.Storage"/>'s implementation of <see cref="M:ServiceStack.MiniProfiler.Storage.IStorage.Save(ServiceStack.MiniProfiler.Profiler)"/>
            6) request ends
            7) page is displayed and profiling results are ajax-fetched down, pulling cached results from 
               <see cref="P:ServiceStack.MiniProfiler.Profiler.Settings.Storage"/>'s implementation of <see cref="M:ServiceStack.MiniProfiler.Storage.IStorage.Load(System.Guid)"/>
            </remarks>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.SqlFormatter">
            <summary>
            The formatter applied to the SQL being rendered (used only for UI)
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.Version">
            <summary>
            Assembly version of this dank MiniProfiler.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.ProfilerProvider">
            <summary>
            The provider used to provider the current instance of a provider
            This is also 
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.Results_Authorize">
            <summary>
            A function that determines who can access the MiniProfiler results url.  It should return true when
            the request client has access, false for a 401 to be returned. HttpRequest parameter is the current request and
            MiniProfiler parameter is the results that were profiled.
            </summary>
            <remarks>
            Both the HttpRequest and MiniProfiler parameters that will be passed into this function should never be null.
            </remarks>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Profiler.Settings.StopwatchProvider">
            <summary>
            Allows switching out stopwatches for unit testing.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.ProfileLevel">
            <summary>
            Categorizes individual <see cref="T:ServiceStack.MiniProfiler.Timing"/> steps to allow filtering.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.ProfileLevel.Info">
            <summary>
            Default level given to Timings.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.ProfileLevel.Verbose">
            <summary>
            Useful when profiling many items in a loop, but you don't wish to always see this detail.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.RenderPosition">
            <summary>
            Dictates on which side of the page the profiler popup button is displayed; defaults to left.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.RenderPosition.Left">
            <summary>
            Profiler popup button is displayed on the left.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.RenderPosition.Right">
            <summary>
            Profiler popup button is displayed on the right.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.MiniProfilerExtensions">
            <summary>
            Contains helper methods that ease working with null <see cref="T:ServiceStack.MiniProfiler.Profiler"/>s.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.MiniProfilerExtensions.Inline``1(ServiceStack.MiniProfiler.Profiler,System.Func{``0},System.String)">
            <summary>
            Wraps <paramref name="selector"/> in a <see cref="M:ServiceStack.MiniProfiler.MiniProfilerExtensions.Step(ServiceStack.MiniProfiler.Profiler,System.String,ServiceStack.MiniProfiler.ProfileLevel)"/> call and executes it, returning its result.
            </summary>
            <param name="profiler">The current profiling session or null.</param>
            <param name="selector">Method to execute and profile.</param>
            <param name="name">The <see cref="T:ServiceStack.MiniProfiler.Timing"/> step name used to label the profiler results.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.MiniProfilerExtensions.Step(ServiceStack.MiniProfiler.Profiler,System.String,ServiceStack.MiniProfiler.ProfileLevel)">
            <summary>
            Returns an <see cref="T:System.IDisposable"/> that will time the code between its creation and disposal.
            </summary>
            <param name="profiler">The current profiling session or null.</param>
            <param name="name">A descriptive name for the code that is encapsulated by the resulting IDisposable's lifetime.</param>
            <param name="level">This step's visibility level; allows filtering when <see cref="M:ServiceStack.MiniProfiler.Profiler.Start(ServiceStack.MiniProfiler.ProfileLevel)"/> is called.</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.MiniProfilerExtensions.AddProfilerResults(ServiceStack.MiniProfiler.Profiler,ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Adds <paramref name="externalProfiler"/>'s <see cref="T:ServiceStack.MiniProfiler.Timing"/> hierarchy to this profiler's current Timing step,
            allowing other threads, remote calls, etc. to be profiled and joined into this profiling session.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.MiniProfilerExtensions.Render(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Returns an html-encoded string with a text-representation of <paramref name="profiler"/>; returns "" when profiler is null.
            </summary>
            <param name="profiler">The current profiling session or null.</param>
        </member>
        <member name="T:ServiceStack.MiniProfiler.SqlFormatters.InlineFormatter">
            <summary>
            Formats any SQL query with inline parameters, optionally including the value type
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.SqlFormatters.ISqlFormatter">
            <summary>
            Takes a SqlTiming and returns a formatted SQL string, for parameter replacement, etc.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlFormatters.ISqlFormatter.FormatSql(ServiceStack.MiniProfiler.SqlTiming)">
            <summary>
            Return SQL the way you want it to look on the in the trace. Usually used to format parameters 
            </summary>
            <param name="timing"></param>
            <returns>Formatted SQL</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlFormatters.InlineFormatter.#ctor(System.Boolean)">
            <summary>
            Creates a new Inline SQL Formatter, optionally including the parameter type info in comments beside the replaced value
            </summary>
            <param name="includeTypeInfo">whether to include a comment after the value, indicating the type, e.g. /* @myParam DbType.Int32 */</param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlFormatters.InlineFormatter.FormatSql(ServiceStack.MiniProfiler.SqlTiming)">
            <summary>
            Formats the SQL in a generic frieldly format, including the parameter type information in a comment if it was specified in the InlineFormatter constructor
            </summary>
            <param name="timing">The SqlTiming to format</param>
            <returns>A formatted SQL string</returns>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlFormatters.InlineFormatter.GetParameterValue(ServiceStack.MiniProfiler.SqlTimingParameter)">
            <summary>
            Returns a string representation of the parameter's value, including the type
            </summary>
            <param name="p">The parameter to get a value for</param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.MiniProfiler.SqlFormatters.OracleFormatter">
            <summary>
            NOT IMPLEMENTED - will format statements with paramters in an Oracle friendly way
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlFormatters.OracleFormatter.FormatSql(ServiceStack.MiniProfiler.SqlTiming)">
            <summary>
            Does NOTHING, implement me!
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.SqlFormatters.SqlServerFormatter">
            <summary>
            Formats SQL server queries with a DECLARE up top for parameter values
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlFormatters.SqlServerFormatter.FormatSql(ServiceStack.MiniProfiler.SqlTiming)">
            <summary>
            Formats the SQL in a SQL-Server friendly way, with DECLARE statements for the parameters up top.
            </summary>
            <param name="timing">The SqlTiming to format</param>
            <returns>A formatted SQL string</returns>
        </member>
        <member name="T:ServiceStack.MiniProfiler.SqlProfiler">
            <summary>
            Contains helper code to time sql statements.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlProfiler.#ctor(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Returns a new SqlProfiler to be used in the 'profiler' session.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlProfiler.ExecuteStartImpl(System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType)">
            <summary>
            Tracks when 'command' is started.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlProfiler.GetInProgressCommands">
            <summary>
            Returns all currently open commands on this connection
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlProfiler.ExecuteFinishImpl(System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType,System.Data.Common.DbDataReader)">
            <summary>
            Finishes profiling for 'command', recording durations.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlProfiler.ReaderFinishedImpl(System.Data.Common.DbDataReader)">
            <summary>
            Called when 'reader' finishes its iterations and is closed.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlProfiler.Profiler">
            <summary>
            The profiling session this SqlProfiler is part of.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.SqlProfilerExtensions">
            <summary>
            Helper methods that allow operation on SqlProfilers, regardless of their instantiation.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlProfilerExtensions.ExecuteStart(ServiceStack.MiniProfiler.SqlProfiler,System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType)">
            <summary>
            Tracks when 'command' is started.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlProfilerExtensions.ExecuteFinish(ServiceStack.MiniProfiler.SqlProfiler,System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType,System.Data.Common.DbDataReader)">
            <summary>
            Finishes profiling for 'command', recording durations.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlProfilerExtensions.ReaderFinish(ServiceStack.MiniProfiler.SqlProfiler,System.Data.Common.DbDataReader)">
            <summary>
            Called when 'reader' finishes its iterations and is closed.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.SqlTiming">
            <summary>
            Profiles a single sql execution.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTiming.#ctor(System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType,ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Creates a new SqlTiming to profile 'command'.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTiming.#ctor">
            <summary>
            Obsolete - used for serialization.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTiming.ToString">
            <summary>
            Returns a snippet of the sql command and the duration.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTiming.Equals(System.Object)">
            <summary>
            Returns true if Ids match.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTiming.GetHashCode">
            <summary>
            Returns hashcode of Id.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTiming.ExecutionComplete(System.Boolean)">
            <summary>
            Called when command execution is finished to determine this SqlTiming's duration.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTiming.ReaderFetchComplete">
            <summary>
            Called when database reader is closed, ending profiling for <see cref="F:ServiceStack.MiniProfiler.Data.ExecuteType.Reader"/> SqlTimings.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTiming.AddSpacesToParameters(System.String)">
            <summary>
            To help with display, put some space around sammiched commas
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.Id">
            <summary>
            Unique identifier for this SqlTiming.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.ExecuteType">
            <summary>
            Category of sql statement executed.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.CommandString">
            <summary>
            The sql that was executed.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.FormattedCommandString">
            <summary>
            The command string with special formatting applied based on MiniProfiler.Settings.SqlFormatter
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.StackTraceSnippet">
            <summary>
            Roughly where in the calling code that this sql was executed.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.StartMilliseconds">
            <summary>
            Offset from main MiniProfiler start that this sql began.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.DurationMilliseconds">
            <summary>
            How long this sql statement took to execute.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.FirstFetchDurationMilliseconds">
            <summary>
            When executing readers, how long it took to come back initially from the database, 
            before all records are fetched and reader is closed.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.Parameters">
            <summary>
            Stores any parameter names and values used by the profiled DbCommand.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.ParentTimingId">
            <summary>
            Id of the Timing this statement was executed in.
            </summary>
            <remarks>
            Needed for database deserialization.
            </remarks>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.ParentTiming">
            <summary>
            The Timing step that this sql execution occurred in.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTiming.IsDuplicate">
            <summary>
            True when other identical sql statements have been executed during this MiniProfiler session.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.SqlTimingParameter">
            <summary>
            Information about a DbParameter used in the sql statement profiled by SqlTiming.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTimingParameter.Equals(System.Object)">
            <summary>
            Returns true if this has the same parent <see cref="P:ServiceStack.MiniProfiler.SqlTiming.Id"/>, <see cref="P:ServiceStack.MiniProfiler.SqlTimingParameter.Name"/> and <see cref="P:ServiceStack.MiniProfiler.SqlTimingParameter.Value"/> as <paramref name="obj"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.SqlTimingParameter.GetHashCode">
            <summary>
            Returns the XOR of certain properties.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTimingParameter.ParentSqlTimingId">
            <summary>
            Which SqlTiming this Parameter was executed with.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTimingParameter.Name">
            <summary>
            Parameter name, e.g. "@routeName"
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTimingParameter.Value">
            <summary>
            The value submitted to the database.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTimingParameter.DbType">
            <summary>
            System.Data.DbType, e.g. "String", "Bit"
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.SqlTimingParameter.Size">
            <summary>
            How large the type is, e.g. for string, size could be 4000
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Storage.HttpRuntimeCacheStorage">
            <summary>
            Understands how to store a <see cref="T:ServiceStack.MiniProfiler.Profiler"/> to the <see cref="P:System.Web.HttpRuntime.Cache"/> with absolute expiration.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Storage.HttpRuntimeCacheStorage.CacheKeyPrefix">
            <summary>
            The string that prefixes all keys that MiniProfilers are saved under, e.g.
            "mini-profiler-ecfb0050-7ce8-4bf1-bf82-2cb38e90e31e".
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.HttpRuntimeCacheStorage.#ctor(System.TimeSpan)">
            <summary>
            Returns a new HttpRuntimeCacheStorage class that will cache MiniProfilers for the specified duration.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.HttpRuntimeCacheStorage.Save(ServiceStack.MiniProfiler.Profiler)">
            <summary>
            Saves <paramref name="profiler"/> to the HttpRuntime.Cache under a key concated with <see cref="F:ServiceStack.MiniProfiler.Storage.HttpRuntimeCacheStorage.CacheKeyPrefix"/>
            and the parameter's <see cref="P:ServiceStack.MiniProfiler.Profiler.Id"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.HttpRuntimeCacheStorage.Load(System.Guid)">
            <summary>
            Returns the saved <see cref="T:ServiceStack.MiniProfiler.Profiler"/> identified by <paramref name="id"/>. Also marks the resulting
            profiler <see cref="P:ServiceStack.MiniProfiler.Profiler.HasUserViewed"/> to true.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Storage.HttpRuntimeCacheStorage.GetUnviewedIds(System.String)">
            <summary>
            Returns a list of <see cref="P:ServiceStack.MiniProfiler.Profiler.Id"/>s that haven't been seen by <paramref name="user"/>.
            </summary>
            <param name="user">User identified by the current <see cref="!:Profiler.Settings.UserProvider"/>.</param>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Storage.HttpRuntimeCacheStorage.AddPerUserUnviewedIdsLock">
            <summary>
            Syncs access to runtime cache when adding a new list of ids for a user.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Storage.HttpRuntimeCacheStorage.CacheDuration">
            <summary>
            How long to cache each <see cref="T:ServiceStack.MiniProfiler.Profiler"/> for (i.e. the absolute expiration parameter of 
            <see cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemUpdateCallback)"/>)
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Timing">
            <summary>
            An individual profiling step that can contain child steps.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.RebuildParentTimings">
            <summary>
            Rebuilds all the parent timings on deserialization calls
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Timing._startTicks">
            <summary>
            Offset from parent MiniProfiler's creation that this Timing was created.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.#ctor(ServiceStack.MiniProfiler.Profiler,ServiceStack.MiniProfiler.Timing,System.String)">
            <summary>
            Creates a new Timing named 'name' in the 'profiler's session, with 'parent' as this Timing's immediate ancestor.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.#ctor">
            <summary>
            Obsolete - used for serialization.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.ToString">
            <summary>
            Returns this Timing's Name.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.Equals(System.Object)">
            <summary>
            Returns true if Ids match.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.GetHashCode">
            <summary>
            Returns hashcode of Id.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.AddKeyValue(System.String,System.String)">
            <summary>
            Adds arbitrary string 'value' under 'key', allowing custom properties to be stored in this Timing step.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.Stop">
            <summary>
            Completes this Timing's duration and sets the MiniProfiler's Head up one level.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.AddChild(ServiceStack.MiniProfiler.Timing)">
            <summary>
            Add the parameter 'timing' to this Timing's Children collection.
            </summary>
            <remarks>
            Used outside this assembly for custom deserialization when creating an <see cref="!:IStorage"/> implementation.
            </remarks>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.AddSqlTiming(ServiceStack.MiniProfiler.SqlTiming)">
            <summary>
            Adds the parameter 'sqlTiming' to this Timing's SqlTimings collection.
            </summary>
            <param name="sqlTiming">A sql statement profiling that was executed in this Timing step.</param>
            <remarks>
            Used outside this assembly for custom deserialization when creating an <see cref="!:IStorage"/> implementation.
            </remarks>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Timing.GetExecutedCount(ServiceStack.MiniProfiler.Data.ExecuteType)">
            <summary>
            Returns the number of sql statements of <paramref name="type"/> that were executed in this <see cref="T:ServiceStack.MiniProfiler.Timing"/>.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.Id">
            <summary>
            Unique identifer for this timing; set during construction.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.Name">
            <summary>
            Text displayed when this Timing is rendered.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.DurationMilliseconds">
            <summary>
            How long this Timing step took in ms; includes any <see cref="P:ServiceStack.MiniProfiler.Timing.Children"/> Timings' durations.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.StartMilliseconds">
            <summary>
            The offset from the start of profiling.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.Children">
            <summary>
            All sub-steps that occur within this Timing step. Add new children through <see cref="M:ServiceStack.MiniProfiler.Timing.AddChild(ServiceStack.MiniProfiler.Timing)"/>
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.KeyValues">
            <summary>
            Stores arbitrary key/value strings on this Timing step. Add new tuples through <see cref="M:ServiceStack.MiniProfiler.Timing.AddKeyValue(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.SqlTimings">
            <summary>
            Any queries that occurred during this Timing step.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.ParentTimingId">
            <summary>
            Needed for database deserialization and JSON serialization.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.ParentTiming">
            <summary>
            Which Timing this Timing is under - the duration that this step takes will be added to its parent's duration.
            </summary>
            <remarks>This will be null for the root (initial) Timing.</remarks>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.DurationWithoutChildrenMilliseconds">
            <summary>
            Gets the elapsed milliseconds in this step without any children's durations.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.SqlTimingsDurationMilliseconds">
            <summary>
            Gets the aggregate elapsed milliseconds of all SqlTimings executed in this Timing, excluding Children Timings.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.IsTrivial">
            <summary>
            Returns true when this <see cref="P:ServiceStack.MiniProfiler.Timing.DurationWithoutChildrenMilliseconds"/> is less than the configured
            <see cref="P:ServiceStack.MiniProfiler.Profiler.Settings.TrivialDurationThresholdMilliseconds"/>, by default 2.0 ms.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.Profiler">
            <summary>
            Reference to the containing profiler, allowing this Timing to affect the Head and get Stopwatch readings.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.HasChildren">
            <summary>
            Returns true when this Timing has inner Timing steps.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.HasSqlTimings">
            <summary>
            Returns true if this Timing step collected sql execution timings.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.HasDuplicateSqlTimings">
            <summary>
            Returns true if any <see cref="T:ServiceStack.MiniProfiler.SqlTiming"/>s executed in this step are detected as duplicate statements.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.IsRoot">
            <summary>
            Returns true when this Timing is the first one created in a MiniProfiler session.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.Depth">
            <summary>
            How far away this Timing is from the Profiler's Root.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.ExecutedReaders">
            <summary>
            How many sql data readers were executed in this Timing step. Does not include queries in any child Timings.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.ExecutedScalars">
            <summary>
            How many sql scalar queries were executed in this Timing step. Does not include queries in any child Timings.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Timing.ExecutedNonQueries">
            <summary>
            How many sql non-query statements were executed in this Timing step. Does not include queries in any child Timings.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.UI.MiniProfilerHandler">
            <summary>
            Understands how to route and respond to MiniProfiler UI urls.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.UI.MiniProfilerHandler.ProcessRequest(System.Web.HttpContextBase)">
            <summary>
            Returns either includes' css/javascript or results' html.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.UI.MiniProfilerHandler.Includes(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.String)">
            <summary>
            Handles rendering static content files.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.UI.MiniProfilerHandler.Results(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse)">
            <summary>
            Handles rendering a previous MiniProfiler session, identified by its "?id=GUID" on the query.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.UI.MiniProfilerHandler._ResourceCache">
            <summary>
            Embedded resource contents keyed by filename.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.UI.MiniProfilerHandler.NotFound(ServiceStack.Web.IResponse,System.String,System.String)">
            <summary>
            Helper method that sets a proper 404 response code.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.UI.MiniProfilerHandler.IsReusable">
            <summary>
            Try to keep everything static so we can easily be reused.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.WebRequestProfilerProvider">
            <summary>
            HttpContext based profiler provider.  This is the default provider to use in a web context.
            The current profiler is associated with a HttpContext.Current ensuring that profilers are 
            specific to a individual HttpRequest.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.WebRequestProfilerProvider.#ctor">
            <summary>
            Public constructor.  This also registers any UI routes needed to display results
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.WebRequestProfilerProvider.Start(ServiceStack.MiniProfiler.ProfileLevel)">
            <summary>
            Starts a new MiniProfiler and associates it with the current <see cref="P:System.Web.HttpContext.Current"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.WebRequestProfilerProvider.Stop(System.Boolean)">
            <summary>
            Ends the current profiling session, if one exists.
            </summary>
            <param name="discardResults">
            When true, clears the <see cref="P:ServiceStack.MiniProfiler.Profiler.Current"/> for this HttpContext, allowing profiling to 
            be prematurely stopped and discarded. Useful for when a specific route does not need to be profiled.
            </param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.WebRequestProfilerProvider.EnsureName(ServiceStack.MiniProfiler.Profiler,System.Web.HttpRequest)">
            <summary>
            Makes sure 'profiler' has a Name, pulling it from route data or url.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.WebRequestProfilerProvider.GetCurrentProfiler">
            <summary>
            Returns the current profiler
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.MiniProfiler.WebRequestProfilerProvider.Current">
            <summary>
            Gets the currently running MiniProfiler for the current HttpContext; null if no MiniProfiler was <see cref="M:ServiceStack.MiniProfiler.WebRequestProfilerProvider.Start(ServiceStack.MiniProfiler.ProfileLevel)"/>ed.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.WebRequestProfilerProvider.Settings">
            <summary>
            WebRequestProfilerProvider specific configurations
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.WebRequestProfilerProvider.Settings.UserProvider">
            <summary>
            Provides user identification for a given profiling request.
            </summary>
        </member>
        <member name="P:ServiceStack.PostmanFeature.DefaultVerbsForAny">
            <summary>
            Only generate specified Verb entries for "ANY" routes
            </summary>
        </member>
        <member name="T:ServiceStack.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.Registration_CantRegisterContainer">
            <summary>
              Looks up a localized string similar to Container service is built-in and read-only..
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.Registration_IncompatibleAsType">
            <summary>
              Looks up a localized string similar to Service type {0} does not inherit or implement {1}..
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.ResolutionException_MissingNamedType">
            <summary>
              Looks up a localized string similar to Required dependency of type {0} named &apos;{1}&apos; could not be resolved..
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.ResolutionException_MissingType">
            <summary>
              Looks up a localized string similar to Required dependency of type {0} could not be resolved..
            </summary>
        </member>
        <member name="P:ServiceStack.Properties.Resources.ResolutionException_UnknownScope">
            <summary>
              Looks up a localized string similar to Unknown scope..
            </summary>
        </member>
        <member name="F:ServiceStack.RedisErrorLoggerFeature.UrnServiceErrorType">
            <summary>
            Service error logs are kept in 'urn:ServiceErrors:{ServiceName}'
            </summary>
        </member>
        <member name="F:ServiceStack.RedisErrorLoggerFeature.CombinedServiceLogId">
            <summary>
            Combined service error logs are maintained in 'urn:ServiceErrors:All'
            </summary>
        </member>
        <member name="T:ServiceStack.RegistrationFeature">
            <summary>
            Enable the Registration feature and configure the RegistrationService.
            </summary>
        </member>
        <member name="F:ServiceStack.RequestContext.UseThreadStatic">
            <summary>
            Tell ServiceStack to use ThreadStatic Items Collection for RequestScoped items.
            Warning: ThreadStatic Items aren't pinned to the same request in async services which callback on different threads.
            </summary>
        </member>
        <member name="M:ServiceStack.RequestContext.TrackDisposable(System.IDisposable)">
            <summary>
            Track any IDisposable's to dispose of at the end of the request in IAppHost.OnEndRequest()
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:ServiceStack.RequestContext.ReleaseDisposables">
            <summary>
            Release currently registered dependencies for this request
            </summary>
            <returns>true if any dependencies were released</returns>
        </member>
        <member name="P:ServiceStack.RequestContext.Items">
            <summary>
            Gets a list of items for this request. 
            </summary>
            <remarks>This list will be cleared on every request and is specific to the original thread that is handling the request.
            If a handler uses additional threads, this data will not be available on those threads.
            </remarks>
        </member>
        <member name="M:ServiceStack.RequestExtensions.ToOptimizedResult``1(ServiceStack.Web.IRequest,``0)">
            <summary>
            Returns the optimized result for the IRequestContext. 
            Does not use or store results in any cache.
            </summary>
            <param name="request"></param>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.RequestExtensions.ToOptimizedResultUsingCache``1(ServiceStack.Web.IRequest,ServiceStack.Caching.ICacheClient,System.String,System.Func{``0})">
            <summary>
            Overload for the <see cref="!:ContentCacheManager.Resolve"/> method returning the most
            optimized result based on the MimeType and CompressionType from the IRequestContext.
            </summary>
        </member>
        <member name="M:ServiceStack.RequestExtensions.ToOptimizedResultUsingCache``1(ServiceStack.Web.IRequest,ServiceStack.Caching.ICacheClient,System.String,System.Nullable{System.TimeSpan},System.Func{``0})">
            <summary>
            Overload for the <see cref="!:ContentCacheManager.Resolve"/> method returning the most
            optimized result based on the MimeType and CompressionType from the IRequestContext.
            <param name="expireCacheIn">How long to cache for, null is no expiration</param>
            </summary>
        </member>
        <member name="M:ServiceStack.RequestExtensions.RemoveFromCache(ServiceStack.Web.IRequest,ServiceStack.Caching.ICacheClient,System.String[])">
            <summary>
            Clears all the serialized and compressed caches set 
            by the 'Resolve' method for the cacheKey provided
            </summary>
            <param name="requestContext"></param>
            <param name="cacheClient"></param>
            <param name="cacheKeys"></param>
        </member>
        <member name="M:ServiceStack.RequestExtensions.SetItem(ServiceStack.Web.IRequest,System.String,System.Object)">
            <summary>
            Store an entry in the IHttpRequest.Items Dictionary
            </summary>
        </member>
        <member name="M:ServiceStack.RequestExtensions.GetItem(ServiceStack.Web.IRequest,System.String)">
            <summary>
            Get an entry from the IHttpRequest.Items Dictionary
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.AtRestPath">
            <summary>
            RequestLogs service Route, default is /requestlogs
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.EnableSessionTracking">
            <summary>
            Turn On/Off Session Tracking
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.EnableRequestBodyTracking">
            <summary>
            Turn On/Off Logging of Raw Request Body, default is Off
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.EnableResponseTracking">
            <summary>
            Turn On/Off Tracking of Responses
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.EnableErrorTracking">
            <summary>
            Turn On/Off Tracking of Exceptions
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.Capacity">
            <summary>
            Size of InMemoryRollingRequestLogger circular buffer
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.RequiredRoles">
            <summary>
            Limit access to /requestlogs service to these roles
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.RequestLogger">
            <summary>
            Change the RequestLogger provider. Default is InMemoryRollingRequestLogger
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.ExcludeRequestDtoTypes">
            <summary>
            Don't log requests of these types. By default RequestLog's are excluded
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.HideRequestBodyForRequestDtoTypes">
            <summary>
            Don't log request bodys for services with sensitive information.
            By default Auth and Registration requests are hidden.
            </summary>
        </member>
        <member name="T:ServiceStack.RequiredPermissionAttribute">
            <summary>
            Indicates that the request dto, which is associated with this attribute,
            can only execute, if the user has specific permissions.
            </summary>
        </member>
        <member name="T:ServiceStack.RequiredRoleAttribute">
            <summary>
            Indicates that the request dto, which is associated with this attribute,
            can only execute, if the user has specific roles.
            </summary>
        </member>
        <member name="M:ServiceStack.RequiredRoleAttribute.AssertRequiredRoles(ServiceStack.Web.IRequest,System.String[])">
            <summary>
            Check all session is in all supplied roles otherwise a 401 HttpError is thrown
            </summary>
            <param name="req"></param>
            <param name="requiredRoles"></param>
        </member>
        <member name="T:ServiceStack.RequiresAnyPermissionAttribute">
            <summary>
            Indicates that the request dto, which is associated with this attribute,
            can only execute, if the user has specific permissions.
            </summary>
        </member>
        <member name="T:ServiceStack.RequiresAnyRoleAttribute">
            <summary>
            Indicates that the request dto, which is associated with this attribute,
            can only execute, if the user has any of the specified roles.
            </summary>
        </member>
        <member name="M:ServiceStack.RequiresAnyRoleAttribute.AssertRequiredRoles(ServiceStack.Web.IRequest,System.String[])">
            <summary>
            Check all session is in any supplied roles otherwise a 401 HttpError is thrown
            </summary>
            <param name="request"></param>
            <param name="requiredRoles"></param>
        </member>
        <member name="T:ServiceStack.ResponseFilterAttribute">
            <summary>
            Base class to create response filter attributes only for specific HTTP methods (GET, POST...)
            </summary>
        </member>
        <member name="M:ServiceStack.ResponseFilterAttribute.#ctor(ServiceStack.ApplyTo)">
            <summary>
            Creates a new <see cref="T:ServiceStack.ResponseFilterAttribute"/>
            </summary>
            <param name="applyTo">Defines when the filter should be executed</param>
        </member>
        <member name="M:ServiceStack.ResponseFilterAttribute.Execute(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.Object)">
            <summary>
            This method is only executed if the HTTP method matches the <see cref="P:ServiceStack.ResponseFilterAttribute.ApplyTo"/> property.
            </summary>
            <param name="req">The http request wrapper</param>
            <param name="res">The http response wrapper</param>
            <param name="requestDto">The response DTO</param>
        </member>
        <member name="M:ServiceStack.ResponseFilterAttribute.Copy">
            <summary>
            Create a ShallowCopy of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ServiceStack.ServiceExtensions.DefaultCache">
            <summary>
            If they don't have an ICacheClient configured use an In Memory one.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceRoutesExtensions.AddFromAssembly(ServiceStack.Web.IServiceRoutes,System.Reflection.Assembly[])">
             <summary>
                 Scans the supplied Assemblies to infer REST paths and HTTP verbs.
             </summary>
            <param name="routes">The <see cref="T:ServiceStack.Web.IServiceRoutes"/> instance.</param>
            <param name="assembliesWithServices">
                 The assemblies with REST services.
             </param>
             <returns>The same <see cref="T:ServiceStack.Web.IServiceRoutes"/> instance;
            		never <see langword="null"/>.</returns>
        </member>
        <member name="M:ServiceStack.ServiceStackProvider.SessionAs``1">
            <summary>
            Typed UserSession
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceStackProvider.session">
            <summary>
            Dynamic Session Bag
            </summary>
        </member>
        <member name="T:ServiceStack.SessionExtensions">
            <summary>
            Configure ServiceStack to have ISession support
            </summary>
        </member>
        <member name="M:ServiceStack.SessionExtensions.CreateSessionId(ServiceStack.Web.IResponse,ServiceStack.Web.IRequest)">
            <summary>
            Create the active Session or Permanent Session Id cookie.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.SessionExtensions.CreateSessionIds(ServiceStack.Web.IResponse,ServiceStack.Web.IRequest)">
            <summary>
            Create both Permanent and Session Id cookies and return the active sessionId
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amib.Threading.Internal.CallerThreadContext">
            <summary>
            This class stores the caller call context in order to restore
            it when the work item is executed in the thread pool environment. 
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.CallerThreadContext.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.CallerThreadContext.Capture(System.Boolean,System.Boolean)">
            <summary>
            Captures the current thread context
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amib.Threading.Internal.CallerThreadContext.Apply(Amib.Threading.Internal.CallerThreadContext)">
            <summary>
            Applies the thread context stored earlier
            </summary>
            <param name="callerThreadContext"></param>
        </member>
        <member name="T:Amib.Threading.Internal.EventWaitHandleFactory">
            <summary>
            EventWaitHandleFactory class.
            This is a static class that creates AutoResetEvent and ManualResetEvent objects.
            In WindowCE the WaitForMultipleObjects API fails to use the Handle property 
            of XxxResetEvent. It can use only handles that were created by the CreateEvent API.
            Consequently this class creates the needed XxxResetEvent and replaces the handle if
            it's a WindowsCE OS.
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.EventWaitHandleFactory.CreateAutoResetEvent">
            <summary>
            Create a new AutoResetEvent object
            </summary>
            <returns>Return a new AutoResetEvent object</returns>
        </member>
        <member name="M:Amib.Threading.Internal.EventWaitHandleFactory.CreateManualResetEvent(System.Boolean)">
            <summary>
            Create a new ManualResetEvent object
            </summary>
            <returns>Return a new ManualResetEvent object</returns>
        </member>
        <member name="T:Amib.Threading.WorkItemCancelException">
            <summary>
            Represents an exception in case IWorkItemResult.GetResult has been canceled
            </summary>
            <summary>
            Represents an exception in case IWorkItemResult.GetResult has been canceled
            </summary>
        </member>
        <member name="T:Amib.Threading.WorkItemTimeoutException">
            <summary>
            Represents an exception in case IWorkItemResult.GetResult has been timed out
            </summary>
            <summary>
            Represents an exception in case IWorkItemResult.GetResult has been timed out
            </summary>
        </member>
        <member name="T:Amib.Threading.WorkItemResultException">
            <summary>
            Represents an exception in case IWorkItemResult.GetResult has been timed out
            </summary>
            <summary>
            Represents an exception in case IWorkItemResult.GetResult has been timed out
            </summary>
        </member>
        <member name="T:Amib.Threading.WorkItemCallback">
            <summary>
            A delegate that represents the method to run as the work item
            </summary>
            <param name="state">A state object for the method to run</param>
        </member>
        <member name="T:Amib.Threading.PostExecuteWorkItemCallback">
            <summary>
            A delegate to call after the WorkItemCallback completed
            </summary>
            <param name="wir">The work item result object</param>
        </member>
        <member name="T:Amib.Threading.PostExecuteWorkItemCallback`1">
            <summary>
            A delegate to call after the WorkItemCallback completed
            </summary>
            <param name="wir">The work item result object</param>
        </member>
        <member name="T:Amib.Threading.WorkItemsGroupIdleHandler">
            <summary>
            A delegate to call when a WorkItemsGroup becomes idle
            </summary>
            <param name="workItemsGroup">A reference to the WorkItemsGroup that became idle</param>
        </member>
        <member name="T:Amib.Threading.ThreadInitializationHandler">
            <summary>
            A delegate to call after a thread is created, but before 
            it's first use.
            </summary>
        </member>
        <member name="T:Amib.Threading.ThreadTerminationHandler">
            <summary>
            A delegate to call when a thread is about to exit, after 
            it is no longer belong to the pool.
            </summary>
        </member>
        <member name="T:Amib.Threading.WorkItemPriority">
            <summary>
            Defines the availeable priorities of a work item.
            The higher the priority a work item has, the sooner
            it will be executed.
            </summary>
        </member>
        <member name="T:Amib.Threading.IWorkItemsGroup">
            <summary>
            IWorkItemsGroup interface
            Created by SmartThreadPool.CreateWorkItemsGroup()
            </summary>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.GetStates">
            <summary>
            Get an array with all the state objects of the currently running items.
            The array represents a snap shot and impact performance.
            </summary>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.Start">
            <summary>
            Starts to execute work items
            </summary>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.Cancel">
            <summary>
            Cancel all the work items.
            Same as Cancel(false)
            </summary>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.Cancel(System.Boolean)">
            <summary>
            Cancel all work items using thread abortion
            </summary>
            <param name="abortExecution">True to stop work items by raising ThreadAbortException</param>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.WaitForIdle">
            <summary>
            Wait for all work item to complete.
            </summary>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.WaitForIdle(System.TimeSpan)">
            <summary>
            Wait for all work item to complete, until timeout expired
            </summary>
            <param name="timeout">How long to wait for the work items to complete</param>
            <returns>Returns true if work items completed within the timeout, otherwise false.</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.WaitForIdle(System.Int32)">
            <summary>
            Wait for all work item to complete, until timeout expired
            </summary>
            <param name="millisecondsTimeout">How long to wait for the work items to complete in milliseconds</param>
            <returns>Returns true if work items completed within the timeout, otherwise false.</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem(Amib.Threading.WorkItemCallback)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <returns>Returns a work item result</returns>        
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem(Amib.Threading.WorkItemCallback,Amib.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="workItemPriority">The priority of the work item</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem(Amib.Threading.WorkItemCallback,System.Object)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem(Amib.Threading.WorkItemCallback,System.Object,Amib.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem(Amib.Threading.WorkItemCallback,System.Object,Amib.Threading.PostExecuteWorkItemCallback)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem(Amib.Threading.WorkItemCallback,System.Object,Amib.Threading.PostExecuteWorkItemCallback,Amib.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem(Amib.Threading.WorkItemCallback,System.Object,Amib.Threading.PostExecuteWorkItemCallback,Amib.Threading.CallToPostExecute)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="callToPostExecute">Indicates on which cases to call to the post execute callback</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem(Amib.Threading.WorkItemCallback,System.Object,Amib.Threading.PostExecuteWorkItemCallback,Amib.Threading.CallToPostExecute,Amib.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="callToPostExecute">Indicates on which cases to call to the post execute callback</param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem(Amib.Threading.WorkItemInfo,Amib.Threading.WorkItemCallback)">
            <summary>
            Queue a work item
            </summary>
            <param name="workItemInfo">Work item info</param>
            <param name="callback">A callback to execute</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem(Amib.Threading.WorkItemInfo,Amib.Threading.WorkItemCallback,System.Object)">
            <summary>
            Queue a work item
            </summary>
            <param name="workItemInfo">Work item information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem(Amib.Threading.Action,Amib.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult object, but its GetResult() will always return null</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem``1(System.Action{``0},``0,Amib.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult object, but its GetResult() will always return null</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem``2(Amib.Threading.Action{``0,``1},``0,``1,Amib.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult object, but its GetResult() will always return null</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem``3(Amib.Threading.Action{``0,``1,``2},``0,``1,``2,Amib.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult object, but its GetResult() will always return null</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem``4(Amib.Threading.Action{``0,``1,``2,``3},``0,``1,``2,``3,Amib.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult object, but its GetResult() will always return null</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem``1(Amib.Threading.Func{``0},Amib.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult&lt;TResult&gt; object. 
            its GetResult() returns a TResult object</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem``2(Amib.Threading.Func{``0,``1},``0,Amib.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult&lt;TResult&gt; object. 
            its GetResult() returns a TResult object</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem``3(Amib.Threading.Func{``0,``1,``2},``0,``1,Amib.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult&lt;TResult&gt; object. 
            its GetResult() returns a TResult object</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem``4(Amib.Threading.Func{``0,``1,``2,``3},``0,``1,``2,Amib.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult&lt;TResult&gt; object. 
            its GetResult() returns a TResult object</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemsGroup.QueueWorkItem``5(Amib.Threading.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,Amib.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult&lt;TResult&gt; object. 
            its GetResult() returns a TResult object</returns>
        </member>
        <member name="P:Amib.Threading.IWorkItemsGroup.Name">
            <summary>
            Get/Set the name of the WorkItemsGroup
            </summary>
        </member>
        <member name="P:Amib.Threading.IWorkItemsGroup.Concurrency">
            <summary>
            Get/Set the maximum number of workitem that execute cocurrency on the thread pool
            </summary>
        </member>
        <member name="P:Amib.Threading.IWorkItemsGroup.WaitingCallbacks">
            <summary>
            Get the number of work items waiting in the queue.
            </summary>
        </member>
        <member name="P:Amib.Threading.IWorkItemsGroup.WIGStartInfo">
            <summary>
            Get the WorkItemsGroup start information
            </summary>
        </member>
        <member name="P:Amib.Threading.IWorkItemsGroup.IsIdle">
            <summary>
            IsIdle is true when there are no work items running or queued.
            </summary>
        </member>
        <member name="E:Amib.Threading.IWorkItemsGroup.OnIdle">
            <summary>
            This event is fired when all work items are completed.
            (When IsIdle changes to true)
            This event only work on WorkItemsGroup. On SmartThreadPool
            it throws the NotImplementedException.
            </summary>
        </member>
        <member name="F:Amib.Threading.CallToPostExecute.Never">
            <summary>
            Never call to the PostExecute call back
            </summary>
        </member>
        <member name="F:Amib.Threading.CallToPostExecute.WhenWorkItemCanceled">
            <summary>
            Call to the PostExecute only when the work item is cancelled
            </summary>
        </member>
        <member name="F:Amib.Threading.CallToPostExecute.WhenWorkItemNotCanceled">
            <summary>
            Call to the PostExecute only when the work item is not cancelled
            </summary>
        </member>
        <member name="F:Amib.Threading.CallToPostExecute.Always">
            <summary>
            Always call to the PostExecute
            </summary>
        </member>
        <member name="T:Amib.Threading.IWaitableResult">
            <summary>
            The common interface of IWorkItemResult and IWorkItemResult&lt;T&gt;
            </summary>
        </member>
        <member name="M:Amib.Threading.IWaitableResult.GetWorkItemResult">
            <summary>
            This method intent is for internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amib.Threading.IWaitableResult.GetWorkItemResultT``1">
            <summary>
            This method intent is for internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amib.Threading.IWorkItemResult">
            <summary>
            IWorkItemResult interface.
            Created when a WorkItemCallback work item is queued.
            </summary>
        </member>
        <member name="T:Amib.Threading.IWorkItemResult`1">
            <summary>
            IWorkItemResult&lt;TResult&gt; interface.
            Created when a Func&lt;TResult&gt; work item is queued.
            </summary>
        </member>
        <member name="M:Amib.Threading.IWorkItemResult`1.GetResult">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits.
            </summary>
            <returns>The result of the work item</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemResult`1.GetResult(System.Int32,System.Boolean)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout.
            </summary>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
        </member>
        <member name="M:Amib.Threading.IWorkItemResult`1.GetResult(System.TimeSpan,System.Boolean)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout.
            </summary>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
        </member>
        <member name="M:Amib.Threading.IWorkItemResult`1.GetResult(System.Int32,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout or until the cancelWaitHandle is signaled.
            </summary>
            <param name="millisecondsTimeout">Timeout in milliseconds, or -1 for infinite</param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the blocking if needed</param>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
            On cancel throws WorkItemCancelException
        </member>
        <member name="M:Amib.Threading.IWorkItemResult`1.GetResult(System.TimeSpan,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout or until the cancelWaitHandle is signaled.
            </summary>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
            On cancel throws WorkItemCancelException
        </member>
        <member name="M:Amib.Threading.IWorkItemResult`1.GetResult(System.Exception@)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits.
            </summary>
            <param name="e">Filled with the exception if one was thrown</param>
            <returns>The result of the work item</returns>
        </member>
        <member name="M:Amib.Threading.IWorkItemResult`1.GetResult(System.Int32,System.Boolean,System.Exception@)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout.
            </summary>
            <param name="millisecondsTimeout"></param>
            <param name="exitContext"></param>
            <param name="e">Filled with the exception if one was thrown</param>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
        </member>
        <member name="M:Amib.Threading.IWorkItemResult`1.GetResult(System.TimeSpan,System.Boolean,System.Exception@)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout.
            </summary>
            <param name="exitContext"></param>
            <param name="e">Filled with the exception if one was thrown</param>
            <param name="timeout"></param>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
        </member>
        <member name="M:Amib.Threading.IWorkItemResult`1.GetResult(System.Int32,System.Boolean,System.Threading.WaitHandle,System.Exception@)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout or until the cancelWaitHandle is signaled.
            </summary>
            <param name="millisecondsTimeout">Timeout in milliseconds, or -1 for infinite</param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the blocking if needed</param>
            <param name="e">Filled with the exception if one was thrown</param>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
            On cancel throws WorkItemCancelException
        </member>
        <member name="M:Amib.Threading.IWorkItemResult`1.GetResult(System.TimeSpan,System.Boolean,System.Threading.WaitHandle,System.Exception@)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout or until the cancelWaitHandle is signaled.
            </summary>
            <returns>The result of the work item</returns>
            <param name="cancelWaitHandle"></param>
            <param name="e">Filled with the exception if one was thrown</param>
            <param name="timeout"></param>
            <param name="exitContext"></param>
            On timeout throws WorkItemTimeoutException
            On cancel throws WorkItemCancelException
        </member>
        <member name="M:Amib.Threading.IWorkItemResult`1.Cancel">
            <summary>
            Same as Cancel(false).
            </summary>
        </member>
        <member name="M:Amib.Threading.IWorkItemResult`1.Cancel(System.Boolean)">
            <summary>
            Cancel the work item execution.
            If the work item is in the queue then it won't execute
            If the work item is completed, it will remain completed
            If the work item is in progress then the user can check the SmartThreadPool.IsWorkItemCanceled
              property to check if the work item has been cancelled. If the abortExecution is set to true then
              the Smart Thread Pool will send an AbortException to the running thread to stop the execution 
              of the work item. When an in progress work item is canceled its GetResult will throw WorkItemCancelException.
            If the work item is already cancelled it will remain cancelled
            </summary>
            <param name="abortExecution">When true send an AbortException to the executing thread.</param>
            <returns>Returns true if the work item was not completed, otherwise false.</returns>
        </member>
        <member name="P:Amib.Threading.IWorkItemResult`1.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:Amib.Threading.IWorkItemResult`1.IsCanceled">
            <summary>
            Gets an indication whether the asynchronous operation has been canceled.
            </summary>
        </member>
        <member name="P:Amib.Threading.IWorkItemResult`1.State">
            <summary>
            Gets the user-defined object that contains context data 
            for the work item method.
            </summary>
        </member>
        <member name="P:Amib.Threading.IWorkItemResult`1.WorkItemPriority">
            <summary>
            Get the work item's priority
            </summary>
        </member>
        <member name="P:Amib.Threading.IWorkItemResult`1.Result">
            <summary>
            Return the result, same as GetResult()
            </summary>
        </member>
        <member name="P:Amib.Threading.IWorkItemResult`1.Exception">
            <summary>
            Returns the exception if occured otherwise returns null.
            </summary>
        </member>
        <member name="T:Amib.Threading.Internal.WorkItemStateCallback">
            <summary>
            An internal delegate to call when the WorkItem starts or completes
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.IInternalWaitableResult.GetWorkItemResult">
            <summary>
            This method is intent for internal use.
            </summary>   
        </member>
        <member name="T:Amib.Threading.Internal.PriorityQueue">
            <summary>
            PriorityQueue class
            This class is not thread safe because we use external lock
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.PriorityQueue._queuesCount">
            <summary>
            The number of queues, there is one for each type of priority
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.PriorityQueue._queues">
            <summary>
            Work items queues. There is one for each type of priority
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.PriorityQueue._workItemsCount">
            <summary>
            The total number of work items within the queues 
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.PriorityQueue._version">
            <summary>
            Use with IEnumerable interface
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.PriorityQueue.Enqueue(Amib.Threading.Internal.IHasWorkItemPriority)">
            <summary>
            Enqueue a work item.
            </summary>
            <param name="workItem">A work item</param>
        </member>
        <member name="M:Amib.Threading.Internal.PriorityQueue.Dequeue">
            <summary>
            Dequeque a work item.
            </summary>
            <returns>Returns the next work item</returns>
        </member>
        <member name="M:Amib.Threading.Internal.PriorityQueue.GetNextNonEmptyQueue(System.Int32)">
            <summary>
            Find the next non empty queue starting at queue queueIndex+1
            </summary>
            <param name="queueIndex">The index-1 to start from</param>
            <returns>
            The index of the next non empty queue or -1 if all the queues are empty
            </returns>
        </member>
        <member name="M:Amib.Threading.Internal.PriorityQueue.Clear">
            <summary>
            Clear all the work items 
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.PriorityQueue.GetEnumerator">
            <summary>
            Returns an enumerator to iterate over the work items
            </summary>
            <returns>Returns an enumerator</returns>
        </member>
        <member name="P:Amib.Threading.Internal.PriorityQueue.Count">
            <summary>
            The number of work items 
            </summary>
        </member>
        <member name="T:Amib.Threading.Internal.PriorityQueue.PriorityQueueEnumerator">
            <summary>
            The class the implements the enumerator
            </summary>
        </member>
        <member name="T:Amib.Threading.SmartThreadPool">
            <summary>
            Smart thread pool class.
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItemsGroupBase._name">
            <summary>
            Contains the name of this instance of SmartThreadPool.
            Can be changed by the user.
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsGroupBase.Cancel">
            <summary>
            Cancel all the work items.
            Same as Cancel(false)
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsGroupBase.WaitForIdle">
            <summary>
            Wait for the SmartThreadPool/WorkItemsGroup to be idle
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsGroupBase.WaitForIdle(System.TimeSpan)">
            <summary>
            Wait for the SmartThreadPool/WorkItemsGroup to be idle
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(Amib.Threading.WorkItemCallback)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(Amib.Threading.WorkItemCallback,Amib.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="workItemPriority">The priority of the work item</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(Amib.Threading.WorkItemInfo,Amib.Threading.WorkItemCallback)">
            <summary>
            Queue a work item
            </summary>
            <param name="workItemInfo">Work item info</param>
            <param name="callback">A callback to execute</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(Amib.Threading.WorkItemCallback,System.Object)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(Amib.Threading.WorkItemCallback,System.Object,Amib.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(Amib.Threading.WorkItemInfo,Amib.Threading.WorkItemCallback,System.Object)">
            <summary>
            Queue a work item
            </summary>
            <param name="workItemInfo">Work item information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(Amib.Threading.WorkItemCallback,System.Object,Amib.Threading.PostExecuteWorkItemCallback)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(Amib.Threading.WorkItemCallback,System.Object,Amib.Threading.PostExecuteWorkItemCallback,Amib.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(Amib.Threading.WorkItemCallback,System.Object,Amib.Threading.PostExecuteWorkItemCallback,Amib.Threading.CallToPostExecute)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="callToPostExecute">Indicates on which cases to call to the post execute callback</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsGroupBase.QueueWorkItem(Amib.Threading.WorkItemCallback,System.Object,Amib.Threading.PostExecuteWorkItemCallback,Amib.Threading.CallToPostExecute,Amib.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="callToPostExecute">Indicates on which cases to call to the post execute callback</param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="P:Amib.Threading.Internal.WorkItemsGroupBase.Name">
            <summary>
            Get/Set the name of the SmartThreadPool/WorkItemsGroup instance
            </summary>
        </member>
        <member name="P:Amib.Threading.Internal.WorkItemsGroupBase.IsIdle">
            <summary>
            IsIdle is true when there are no work items running or queued.
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.DefaultMinWorkerThreads">
            <summary>
            Default minimum number of threads the thread pool contains. (0)
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.DefaultMaxWorkerThreads">
            <summary>
            Default maximum number of threads the thread pool contains. (25)
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.DefaultIdleTimeout">
            <summary>
            Default idle timeout in milliseconds. (One minute)
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.DefaultUseCallerCallContext">
            <summary>
            Indicate to copy the security context of the caller and then use it in the call. (false)
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.DefaultUseCallerHttpContext">
            <summary>
            Indicate to copy the HTTP context of the caller and then use it in the call. (false)
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.DefaultDisposeOfStateObjects">
            <summary>
            Indicate to dispose of the state objects if they support the IDispose interface. (false)
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.DefaultCallToPostExecute">
            <summary>
            The default option to run the post execute (CallToPostExecute.Always)
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.DefaultWorkItemPriority">
            <summary>
            The default work item priority (WorkItemPriority.Normal)
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.DefaultStartSuspended">
            <summary>
            The default is to work on work items as soon as they arrive
            and not to wait for the start. (false)
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.DefaultThreadPriority">
            <summary>
            The default thread priority (ThreadPriority.Normal)
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.DefaultThreadPoolName">
            <summary>
            The default thread pool name. (SmartThreadPool)
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.DefaultFillStateWithArgs">
            <summary>
            The default fill state with params. (false)
            It is relevant only to QueueWorkItem of Action&lt;...&gt;/Func&lt;...&gt;
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.DefaultAreThreadsBackground">
            <summary>
            The default thread backgroundness. (true)
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.DefaultApartmentState">
            <summary>
            The default apartment state of a thread in the thread pool. 
            The default is ApartmentState.Unknown which means the STP will not 
            set the apartment of the thread. It will use the .NET default.
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.DefaultPostExecuteWorkItemCallback">
            <summary>
            The default post execute method to run. (None)
            When null it means not to call it.
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.DefaultPerformanceCounterInstanceName">
            <summary>
            The default name to use for the performance counters instance. (null)
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.DefaultMaxStackSize">
            <summary>
            The default Max Stack Size. (SmartThreadPool)
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool._workerThreads">
            <summary>
            Dictionary of all the threads in the thread pool.
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool._workItemsQueue">
            <summary>
            Queue of work items.
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool._workItemsProcessed">
            <summary>
            Count the work items handled.
            Used by the performance counter.
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool._inUseWorkerThreads">
            <summary>
            Number of threads that currently work (not idle).
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool._stpStartInfo">
            <summary>
            Stores a copy of the original STPStartInfo.
            It is used to change the MinThread and MaxThreads
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool._currentWorkItemsCount">
            <summary>
            Total number of work items that are stored in the work items queue 
            plus the work items that the threads in the pool are working on.
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool._isIdleWaitHandle">
            <summary>
            Signaled when the thread pool is idle, i.e. no thread is busy
            and the work items queue is empty
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool._shuttingDownEvent">
            <summary>
            An event to signal all the threads to quit immediately.
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool._isSuspended">
            <summary>
            A flag to indicate if the Smart Thread Pool is now suspended.
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool._shutdown">
            <summary>
            A flag to indicate the threads to quit.
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool._threadCounter">
            <summary>
            Counts the threads created in the pool.
            It is used to name the threads.
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool._isDisposed">
            <summary>
            Indicate that the SmartThreadPool has been disposed
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool._workItemsGroups">
            <summary>
            Holds all the WorkItemsGroup instaces that have at least one 
            work item int the SmartThreadPool
            This variable is used in case of Shutdown
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool._canceledSmartThreadPool">
            <summary>
            A common object for all the work items int the STP
            so we can mark them to cancel in O(1)
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool._windowsPCs">
            <summary>
            Windows STP performance counters
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool._localPCs">
            <summary>
            Local STP performance counters
            </summary>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="idleTimeout">Idle timeout in milliseconds</param>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="idleTimeout">Idle timeout in milliseconds</param>
            <param name="maxWorkerThreads">Upper limit of threads in the pool</param>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="idleTimeout">Idle timeout in milliseconds</param>
            <param name="maxWorkerThreads">Upper limit of threads in the pool</param>
            <param name="minWorkerThreads">Lower limit of threads in the pool</param>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.#ctor(Amib.Threading.STPStartInfo)">
            <summary>
            Constructor
            </summary>
            <param name="stpStartInfo">A SmartThreadPool configuration that overrides the default behavior</param>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.Dequeue">
            <summary>
            Waits on the queue for a work item, shutdown, or timeout.
            </summary>
            <returns>
            Returns the WaitingCallback or null in case of timeout or shutdown.
            </returns>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.Enqueue(Amib.Threading.Internal.WorkItem)">
            <summary>
            Put a new work item in the queue
            </summary>
            <param name="workItem">A work item to queue</param>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.InformCompleted">
            <summary>
            Inform that the current thread is about to quit or quiting.
            The same thread may call this method more than once.
            </summary>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.StartThreads(System.Int32)">
            <summary>
            Starts new threads
            </summary>
            <param name="threadsCount">The number of threads to start</param>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.ProcessQueuedItems">
            <summary>
            A worker thread method that processes work items from the work items queue.
            </summary>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.Shutdown">
            <summary>
            Force the SmartThreadPool to shutdown
            </summary>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.Shutdown(System.Boolean,System.TimeSpan)">
            <summary>
            Force the SmartThreadPool to shutdown with timeout
            </summary>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.Shutdown(System.Boolean,System.Int32)">
            <summary>
            Empties the queue of work items and abort the threads in the pool.
            </summary>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.WaitAll(Amib.Threading.IWaitableResult[])">
            <summary>
            Wait for all work items to complete
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <returns>
            true when every work item in workItemResults has completed; otherwise false.
            </returns>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.WaitAll(Amib.Threading.IWaitableResult[],System.TimeSpan,System.Boolean)">
            <summary>
            Wait for all work items to complete
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="timeout">The number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. </param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <returns>
            true when every work item in workItemResults has completed; otherwise false.
            </returns>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.WaitAll(Amib.Threading.IWaitableResult[],System.TimeSpan,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Wait for all work items to complete
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="timeout">The number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. </param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the wait if needed</param>
            <returns>
            true when every work item in workItemResults has completed; otherwise false.
            </returns>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.WaitAll(Amib.Threading.IWaitableResult[],System.Int32,System.Boolean)">
            <summary>
            Wait for all work items to complete
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <returns>
            true when every work item in workItemResults has completed; otherwise false.
            </returns>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.WaitAll(Amib.Threading.IWaitableResult[],System.Int32,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Wait for all work items to complete
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the wait if needed</param>
            <returns>
            true when every work item in workItemResults has completed; otherwise false.
            </returns>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.WaitAny(Amib.Threading.IWaitableResult[])">
            <summary>
            Waits for any of the work items in the specified array to complete, cancel, or timeout
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <returns>
            The array index of the work item result that satisfied the wait, or WaitTimeout if any of the work items has been canceled.
            </returns>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.WaitAny(Amib.Threading.IWaitableResult[],System.TimeSpan,System.Boolean)">
            <summary>
            Waits for any of the work items in the specified array to complete, cancel, or timeout
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="timeout">The number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. </param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <returns>
            The array index of the work item result that satisfied the wait, or WaitTimeout if no work item result satisfied the wait and a time interval equivalent to millisecondsTimeout has passed or the work item has been canceled.
            </returns>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.WaitAny(Amib.Threading.IWaitableResult[],System.TimeSpan,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Waits for any of the work items in the specified array to complete, cancel, or timeout
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="timeout">The number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely. </param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the wait if needed</param>
            <returns>
            The array index of the work item result that satisfied the wait, or WaitTimeout if no work item result satisfied the wait and a time interval equivalent to millisecondsTimeout has passed or the work item has been canceled.
            </returns>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.WaitAny(Amib.Threading.IWaitableResult[],System.Int32,System.Boolean)">
            <summary>
            Waits for any of the work items in the specified array to complete, cancel, or timeout
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <returns>
            The array index of the work item result that satisfied the wait, or WaitTimeout if no work item result satisfied the wait and a time interval equivalent to millisecondsTimeout has passed or the work item has been canceled.
            </returns>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.WaitAny(Amib.Threading.IWaitableResult[],System.Int32,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Waits for any of the work items in the specified array to complete, cancel, or timeout
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the wait if needed</param>
            <returns>
            The array index of the work item result that satisfied the wait, or WaitTimeout if no work item result satisfied the wait and a time interval equivalent to millisecondsTimeout has passed or the work item has been canceled.
            </returns>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.CreateWorkItemsGroup(System.Int32)">
            <summary>
            Creates a new WorkItemsGroup.
            </summary>
            <param name="concurrency">The number of work items that can be run concurrently</param>
            <returns>A reference to the WorkItemsGroup</returns>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.CreateWorkItemsGroup(System.Int32,Amib.Threading.WIGStartInfo)">
            <summary>
            Creates a new WorkItemsGroup.
            </summary>
            <param name="concurrency">The number of work items that can be run concurrently</param>
            <param name="wigStartInfo">A WorkItemsGroup configuration that overrides the default behavior</param>
            <returns>A reference to the WorkItemsGroup</returns>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.AbortOnWorkItemCancel">
            <summary>
            Checks if the work item has been cancelled, and if yes then abort the thread.
            Can be used with Cancel and timeout
            </summary>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.GetStates">
            <summary>
            Get an array with all the state objects of the currently running items.
            The array represents a snap shot and impact performance.
            </summary>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.Start">
            <summary>
            Start the thread pool if it was started suspended.
            If it is already running, this method is ignored.
            </summary>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.Cancel(System.Boolean)">
            <summary>
            Cancel all work items using thread abortion
            </summary>
            <param name="abortExecution">True to stop work items by raising ThreadAbortException</param>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.WaitForIdle(System.Int32)">
            <summary>
            Wait for the thread pool to be idle
            </summary>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.Join(System.Collections.Generic.IEnumerable{Amib.Threading.Action})">
            <summary>
            Executes all actions in parallel.
            Returns when they all finish.
            </summary>
            <param name="actions">Actions to execute</param>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.Join(Amib.Threading.Action[])">
            <summary>
            Executes all actions in parallel.
            Returns when they all finish.
            </summary>
            <param name="actions">Actions to execute</param>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.Choice(System.Collections.Generic.IEnumerable{Amib.Threading.Action})">
            <summary>
            Executes all actions in parallel
            Returns when the first one completes
            </summary>
            <param name="actions">Actions to execute</param>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.Choice(Amib.Threading.Action[])">
            <summary>
            Executes all actions in parallel
            Returns when the first one completes
            </summary>
            <param name="actions">Actions to execute</param>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.Pipe``1(``0,System.Collections.Generic.IEnumerable{System.Action{``0}})">
            <summary>
            Executes actions in sequence asynchronously.
            Returns immediately.
            </summary>
            <param name="pipeState">A state context that passes </param>
            <param name="actions">Actions to execute in the order they should run</param>
        </member>
        <member name="M:Amib.Threading.SmartThreadPool.Pipe``1(``0,System.Action{``0}[])">
            <summary>
            Executes actions in sequence asynchronously.
            Returns immediately.
            </summary>
            <param name="pipeState"></param>
            <param name="actions">Actions to execute in the order they should run</param>
        </member>
        <member name="E:Amib.Threading.SmartThreadPool._onThreadInitialization">
            <summary>
            An event to call after a thread is created, but before 
            it's first use.
            </summary>
        </member>
        <member name="E:Amib.Threading.SmartThreadPool._onThreadTermination">
            <summary>
            An event to call when a thread is about to exit, after 
            it is no longer belong to the pool.
            </summary>
        </member>
        <member name="P:Amib.Threading.SmartThreadPool.CurrentThreadEntry">
            <summary>
            A reference to the current work item a thread from the thread pool 
            is executing.
            </summary>
        </member>
        <member name="E:Amib.Threading.SmartThreadPool.OnThreadInitialization">
            <summary>
            This event is fired when a thread is created.
            Use it to initialize a thread before the work items use it.
            </summary>
        </member>
        <member name="E:Amib.Threading.SmartThreadPool.OnThreadTermination">
            <summary>
            This event is fired when a thread is terminating.
            Use it for cleanup.
            </summary>
        </member>
        <member name="P:Amib.Threading.SmartThreadPool.MinThreads">
            <summary>
            Get/Set the lower limit of threads in the pool.
            </summary>
        </member>
        <member name="P:Amib.Threading.SmartThreadPool.MaxThreads">
            <summary>
            Get/Set the upper limit of threads in the pool.
            </summary>
        </member>
        <member name="P:Amib.Threading.SmartThreadPool.ActiveThreads">
            <summary>
            Get the number of threads in the thread pool.
            Should be between the lower and the upper limits.
            </summary>
        </member>
        <member name="P:Amib.Threading.SmartThreadPool.InUseThreads">
            <summary>
            Get the number of busy (not idle) threads in the thread pool.
            </summary>
        </member>
        <member name="P:Amib.Threading.SmartThreadPool.IsWorkItemCanceled">
            <summary>
            Returns true if the current running work item has been cancelled.
            Must be used within the work item's callback method.
            The work item should sample this value in order to know if it
            needs to quit before its completion.
            </summary>
        </member>
        <member name="P:Amib.Threading.SmartThreadPool.STPStartInfo">
            <summary>
            Thread Pool start information (readonly)
            </summary>
        </member>
        <member name="P:Amib.Threading.SmartThreadPool.PerformanceCountersReader">
            <summary>
            Return the local calculated performance counters
            Available only if STPStartInfo.EnableLocalPerformanceCounters is true.
            </summary>
        </member>
        <member name="P:Amib.Threading.SmartThreadPool.Concurrency">
            <summary>
            Get/Set the maximum number of work items that execute cocurrency on the thread pool
            </summary>
        </member>
        <member name="P:Amib.Threading.SmartThreadPool.WaitingCallbacks">
            <summary>
            Get the number of work items in the queue.
            </summary>
        </member>
        <member name="P:Amib.Threading.SmartThreadPool.WIGStartInfo">
            <summary>
            WorkItemsGroup start information (readonly)
            </summary>
        </member>
        <member name="E:Amib.Threading.SmartThreadPool.OnIdle">
            <summary>
            This event is fired when all work items are completed.
            (When IsIdle changes to true)
            This event only work on WorkItemsGroup. On SmartThreadPool
            it throws the NotImplementedException.
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.ThreadEntry._creationTime">
            <summary>
            The thread creation time
            The value is stored as UTC value.
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.ThreadEntry._lastAliveTime">
            <summary>
            The last time this thread has been running
            It is updated by IAmAlive() method
            The value is stored as UTC value.
            </summary>
        </member>
        <member name="F:Amib.Threading.SmartThreadPool.ThreadEntry._associatedSmartThreadPool">
            <summary>
            A reference from each thread in the thread pool to its SmartThreadPool
            object container.
            With this variable a thread can know whatever it belongs to a 
            SmartThreadPool.
            </summary>
        </member>
        <member name="P:Amib.Threading.SmartThreadPool.ThreadEntry.CurrentWorkItem">
            <summary>
            A reference to the current work item a thread from the thread pool 
            is executing.
            </summary>            
        </member>
        <member name="T:Amib.Threading.Internal.STPPerformanceCounter">
            <summary>
            Summary description for STPPerformanceCounter.
            </summary>
        </member>
        <member name="T:Amib.Threading.STPStartInfo">
            <summary>
            Summary description for STPStartInfo.
            </summary>
        </member>
        <member name="T:Amib.Threading.WIGStartInfo">
            <summary>
            Summary description for WIGStartInfo.
            </summary>
        </member>
        <member name="M:Amib.Threading.WIGStartInfo.AsReadOnly">
            <summary>
            Get a readonly version of this WIGStartInfo
            </summary>
            <returns>Returns a readonly reference to this WIGStartInfoRO</returns>
        </member>
        <member name="P:Amib.Threading.WIGStartInfo.UseCallerCallContext">
            <summary>
            Get/Set if to use the caller's security context
            </summary>
        </member>
        <member name="P:Amib.Threading.WIGStartInfo.UseCallerHttpContext">
            <summary>
            Get/Set if to use the caller's HTTP context
            </summary>
        </member>
        <member name="P:Amib.Threading.WIGStartInfo.DisposeOfStateObjects">
            <summary>
            Get/Set if to dispose of the state object of a work item
            </summary>
        </member>
        <member name="P:Amib.Threading.WIGStartInfo.CallToPostExecute">
            <summary>
            Get/Set the run the post execute options
            </summary>
        </member>
        <member name="P:Amib.Threading.WIGStartInfo.PostExecuteWorkItemCallback">
            <summary>
            Get/Set the default post execute callback
            </summary>
        </member>
        <member name="P:Amib.Threading.WIGStartInfo.StartSuspended">
            <summary>
            Get/Set if the work items execution should be suspended until the Start()
            method is called.
            </summary>
        </member>
        <member name="P:Amib.Threading.WIGStartInfo.WorkItemPriority">
            <summary>
            Get/Set the default priority that a work item gets when it is enqueued
            </summary>
        </member>
        <member name="P:Amib.Threading.WIGStartInfo.FillStateWithArgs">
            <summary>
            Get/Set the if QueueWorkItem of Action&lt;...&gt;/Func&lt;...&gt; fill the
            arguments as an object array into the state of the work item.
            The arguments can be access later by IWorkItemResult.State.
            </summary>
        </member>
        <member name="M:Amib.Threading.STPStartInfo.AsReadOnly">
            <summary>
            Get a readonly version of this STPStartInfo.
            </summary>
            <returns>Returns a readonly reference to this STPStartInfo</returns>
        </member>
        <member name="P:Amib.Threading.STPStartInfo.IdleTimeout">
            <summary>
            Get/Set the idle timeout in milliseconds.
            If a thread is idle (starved) longer than IdleTimeout then it may quit.
            </summary>
        </member>
        <member name="P:Amib.Threading.STPStartInfo.MinWorkerThreads">
            <summary>
            Get/Set the lower limit of threads in the pool.
            </summary>
        </member>
        <member name="P:Amib.Threading.STPStartInfo.MaxWorkerThreads">
            <summary>
            Get/Set the upper limit of threads in the pool.
            </summary>
        </member>
        <member name="P:Amib.Threading.STPStartInfo.ThreadPriority">
            <summary>
            Get/Set the scheduling priority of the threads in the pool.
            The Os handles the scheduling.
            </summary>
        </member>
        <member name="P:Amib.Threading.STPStartInfo.ThreadPoolName">
            <summary>
            Get/Set the thread pool name. Threads will get names depending on this.
            </summary>
        </member>
        <member name="P:Amib.Threading.STPStartInfo.PerformanceCounterInstanceName">
            <summary>
            Get/Set the performance counter instance name of this SmartThreadPool
            The default is null which indicate not to use performance counters at all.
            </summary>
        </member>
        <member name="P:Amib.Threading.STPStartInfo.EnableLocalPerformanceCounters">
            <summary>
            Enable/Disable the local performance counter.
            This enables the user to get some performance information about the SmartThreadPool 
            without using Windows performance counters. (Useful on WindowsCE, Silverlight, etc.)
            The default is false.
            </summary>
        </member>
        <member name="P:Amib.Threading.STPStartInfo.AreThreadsBackground">
            <summary>
            Get/Set backgroundness of thread in thread pool.
            </summary>
        </member>
        <member name="P:Amib.Threading.STPStartInfo.ApartmentState">
            <summary>
            Get/Set the apartment state of threads in the thread pool
            </summary>
        </member>
        <member name="P:Amib.Threading.STPStartInfo.MaxStackSize">
            <summary>
            Get/Set the max stack size of threads in the thread pool
            </summary>
        </member>
        <member name="T:Amib.Threading.Internal.WorkItem">
            <summary>
            Holds a callback delegate and the state for that delegate.
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItem._callback">
            <summary>
            Callback delegate for the callback.
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItem._state">
            <summary>
            State with which to call the callback delegate.
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItem._callerContext">
            <summary>
            Stores the caller's context
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItem._result">
            <summary>
            Holds the result of the mehtod
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItem._exception">
            <summary>
            Hold the exception if the method threw it
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItem._workItemState">
            <summary>
            Hold the state of the work item
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItem._workItemCompleted">
            <summary>
            A ManualResetEvent to indicate that the result is ready
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItem._workItemCompletedRefCount">
            <summary>
            A reference count to the _workItemCompleted. 
            When it reaches to zero _workItemCompleted is Closed
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItem._workItemResult">
            <summary>
            Represents the result state of the work item
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItem._workItemInfo">
            <summary>
            Work item info
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItem._canceledWorkItemsGroup">
            <summary>
            A reference to an object that indicates whatever the 
            WorkItemsGroup has been canceled
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItem._canceledSmartThreadPool">
            <summary>
            A reference to an object that indicates whatever the 
            SmartThreadPool has been canceled
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItem._workItemsGroup">
            <summary>
            The work item group this work item belong to.
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItem._executingThread">
            <summary>
            The thread that executes this workitem.
            This field is available for the period when the work item is executed, before and after it is null.
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItem._expirationTime">
            <summary>
            The absulote time when the work item will be timeout
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItem._waitingOnQueueStopwatch">
            <summary>
            Stores how long the work item waited on the stp queue
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItem._processingStopwatch">
            <summary>
            Stores how much time it took the work item to execute after it went out of the queue
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItem.#ctor(Amib.Threading.IWorkItemsGroup,Amib.Threading.WorkItemInfo,Amib.Threading.WorkItemCallback,System.Object)">
            <summary>
            Initialize the callback holding object.
            </summary>
            <param name="workItemsGroup">The workItemGroup of the workitem</param>
            <param name="workItemInfo">The WorkItemInfo of te workitem</param>
            <param name="callback">Callback delegate for the callback.</param>
            <param name="state">State with which to call the callback delegate.</param>
            
            We assume that the WorkItem object is created within the thread
            that meant to run the callback
        </member>
        <member name="M:Amib.Threading.Internal.WorkItem.StartingWorkItem">
            <summary>
            Change the state of the work item to in progress if it wasn't canceled.
            </summary>
            <returns>
            Return true on success or false in case the work item was canceled.
            If the work item needs to run a post execute then the method will return true.
            </returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItem.Execute">
            <summary>
            Execute the work item and the post execute
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItem.ExecuteWorkItem">
            <summary>
            Execute the work item
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItem.PostExecute">
            <summary>
            Runs the post execute callback
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItem.SetResult(System.Object,System.Exception)">
            <summary>
            Set the result of the work item to return
            </summary>
            <param name="result">The result of the work item</param>
            <param name="exception">The exception that was throw while the workitem executed, null
            if there was no exception.</param>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItem.GetWorkItemResult">
            <summary>
            Returns the work item result
            </summary>
            <returns>The work item result</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItem.WaitAll(Amib.Threading.IWaitableResult[],System.Int32,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Wait for all work items to complete
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the wait if needed</param>
            <returns>
            true when every work item in waitableResults has completed; otherwise false.
            </returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItem.WaitAny(Amib.Threading.IWaitableResult[],System.Int32,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Waits for any of the work items in the specified array to complete, cancel, or timeout
            </summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the wait if needed</param>
            <returns>
            The array index of the work item result that satisfied the wait, or WaitTimeout if no work item result satisfied the wait and a time interval equivalent to millisecondsTimeout has passed or the work item has been canceled.
            </returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItem.GetWaitHandles(Amib.Threading.IWaitableResult[],System.Threading.WaitHandle[])">
            <summary>
            Fill an array of wait handles with the work items wait handles.
            </summary>
            <param name="waitableResults">An array of work item results</param>
            <param name="waitHandles">An array of wait handles to fill</param>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItem.ReleaseWaitHandles(Amib.Threading.IWaitableResult[])">
            <summary>
            Release the work items' wait handles
            </summary>
            <param name="waitableResults">An array of work item results</param>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItem.SetWorkItemState(Amib.Threading.Internal.WorkItem.WorkItemState)">
            <summary>
            Sets the work item's state
            </summary>
            <param name="workItemState">The state to set the work item to</param>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItem.SignalComplete(System.Boolean)">
            <summary>
            Signals that work item has been completed or canceled
            </summary>
            <param name="canceled">Indicates that the work item has been canceled</param>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItem.Cancel(System.Boolean)">
            <summary>
            Cancel the work item if it didn't start running yet.
            </summary>
            <returns>Returns true on success or false if the work item is in progress or already completed</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItem.GetResult(System.Int32,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits for the result, timeout, or cancel.
            In case of error the method throws and exception
            </summary>
            <returns>The result of the work item</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItem.GetResult(System.Int32,System.Boolean,System.Threading.WaitHandle,System.Exception@)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits for the result, timeout, or cancel.
            In case of error the e argument is filled with the exception
            </summary>
            <returns>The result of the work item</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItem.GetWaitHandle">
            <summary>
            A wait handle to wait for completion, cancel, or timeout 
            </summary>
        </member>
        <member name="E:Amib.Threading.Internal.WorkItem._workItemStartedEvent">
            <summary>
            Called when the WorkItem starts
            </summary>
        </member>
        <member name="E:Amib.Threading.Internal.WorkItem._workItemCompletedEvent">
            <summary>
            Called when the WorkItem completes
            </summary>
        </member>
        <member name="P:Amib.Threading.Internal.WorkItem.IsCompleted">
            <summary>
            Returns true when the work item has completed or canceled
            </summary>
        </member>
        <member name="P:Amib.Threading.Internal.WorkItem.IsCanceled">
            <summary>
            Returns true when the work item has canceled
            </summary>
        </member>
        <member name="P:Amib.Threading.Internal.WorkItem.WorkItemPriority">
            <summary>
            Returns the priority of the work item
            </summary>
        </member>
        <member name="T:Amib.Threading.Internal.WorkItem.WorkItemState">
            <summary>
            Indicates the state of the work item in the thread pool
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItem.WorkItemResult._workItem">
            <summary>
            A back reference to the work item
            </summary>
        </member>
        <member name="P:Amib.Threading.Internal.WorkItem.WorkItemResult.Result">
            <summary>
            Return the result, same as GetResult()
            </summary>
        </member>
        <member name="P:Amib.Threading.Internal.WorkItem.WorkItemResult.Exception">
            <summary>
            Returns the exception if occured otherwise returns null.
            This value is valid only after the work item completed,
            before that it is always null.
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemFactory.CreateWorkItem(Amib.Threading.IWorkItemsGroup,Amib.Threading.WIGStartInfo,Amib.Threading.WorkItemCallback)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The WorkItemsGroup of this workitem</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemFactory.CreateWorkItem(Amib.Threading.IWorkItemsGroup,Amib.Threading.WIGStartInfo,Amib.Threading.WorkItemCallback,Amib.Threading.WorkItemPriority)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The WorkItemsGroup of this workitem</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="workItemPriority">The priority of the work item</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemFactory.CreateWorkItem(Amib.Threading.IWorkItemsGroup,Amib.Threading.WIGStartInfo,Amib.Threading.WorkItemInfo,Amib.Threading.WorkItemCallback)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The WorkItemsGroup of this workitem</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="workItemInfo">Work item info</param>
            <param name="callback">A callback to execute</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemFactory.CreateWorkItem(Amib.Threading.IWorkItemsGroup,Amib.Threading.WIGStartInfo,Amib.Threading.WorkItemCallback,System.Object)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The WorkItemsGroup of this workitem</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemFactory.CreateWorkItem(Amib.Threading.IWorkItemsGroup,Amib.Threading.WIGStartInfo,Amib.Threading.WorkItemCallback,System.Object,Amib.Threading.WorkItemPriority)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The work items group</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemFactory.CreateWorkItem(Amib.Threading.IWorkItemsGroup,Amib.Threading.WIGStartInfo,Amib.Threading.WorkItemInfo,Amib.Threading.WorkItemCallback,System.Object)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The work items group</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="workItemInfo">Work item information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemFactory.CreateWorkItem(Amib.Threading.IWorkItemsGroup,Amib.Threading.WIGStartInfo,Amib.Threading.WorkItemCallback,System.Object,Amib.Threading.PostExecuteWorkItemCallback)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The work items group</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemFactory.CreateWorkItem(Amib.Threading.IWorkItemsGroup,Amib.Threading.WIGStartInfo,Amib.Threading.WorkItemCallback,System.Object,Amib.Threading.PostExecuteWorkItemCallback,Amib.Threading.WorkItemPriority)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The work items group</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemFactory.CreateWorkItem(Amib.Threading.IWorkItemsGroup,Amib.Threading.WIGStartInfo,Amib.Threading.WorkItemCallback,System.Object,Amib.Threading.PostExecuteWorkItemCallback,Amib.Threading.CallToPostExecute)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The work items group</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="callToPostExecute">Indicates on which cases to call to the post execute callback</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemFactory.CreateWorkItem(Amib.Threading.IWorkItemsGroup,Amib.Threading.WIGStartInfo,Amib.Threading.WorkItemCallback,System.Object,Amib.Threading.PostExecuteWorkItemCallback,Amib.Threading.CallToPostExecute,Amib.Threading.WorkItemPriority)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The work items group</param>
            <param name="wigStartInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="callToPostExecute">Indicates on which cases to call to the post execute callback</param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="T:Amib.Threading.WorkItemInfo">
            <summary>
            Summary description for WorkItemInfo.
            </summary>
        </member>
        <member name="P:Amib.Threading.WorkItemInfo.UseCallerCallContext">
            <summary>
            Get/Set if to use the caller's security context
            </summary>
        </member>
        <member name="P:Amib.Threading.WorkItemInfo.UseCallerHttpContext">
            <summary>
            Get/Set if to use the caller's HTTP context
            </summary>
        </member>
        <member name="P:Amib.Threading.WorkItemInfo.DisposeOfStateObjects">
            <summary>
            Get/Set if to dispose of the state object of a work item
            </summary>
        </member>
        <member name="P:Amib.Threading.WorkItemInfo.CallToPostExecute">
            <summary>
            Get/Set the run the post execute options
            </summary>
        </member>
        <member name="P:Amib.Threading.WorkItemInfo.PostExecuteWorkItemCallback">
            <summary>
            Get/Set the post execute callback
            </summary>
        </member>
        <member name="P:Amib.Threading.WorkItemInfo.WorkItemPriority">
            <summary>
            Get/Set the work item's priority
            </summary>
        </member>
        <member name="P:Amib.Threading.WorkItemInfo.Timeout">
            <summary>
            Get/Set the work item's timout in milliseconds.
            This is a passive timout. When the timout expires the work item won't be actively aborted!
            </summary>
        </member>
        <member name="T:Amib.Threading.Internal.WorkItemsGroup">
            <summary>
            Summary description for WorkItemsGroup.
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItemsGroup._stp">
            <summary>
            A reference to the SmartThreadPool instance that created this 
            WorkItemsGroup.
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItemsGroup._isSuspended">
            <summary>
            A flag to indicate if the Work Items Group is now suspended.
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItemsGroup._concurrency">
            <summary>
            Defines how many work items of this WorkItemsGroup can run at once.
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItemsGroup._workItemsQueue">
            <summary>
            Priority queue to hold work items before they are passed 
            to the SmartThreadPool.
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItemsGroup._workItemsInStpQueue">
            <summary>
            Indicate how many work items are waiting in the SmartThreadPool
            queue.
            This value is used to apply the concurrency.
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItemsGroup._workItemsExecutingInStp">
            <summary>
            Indicate how many work items are currently running in the SmartThreadPool.
            This value is used with the Cancel, to calculate if we can send new 
            work items to the STP.
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItemsGroup._workItemsGroupStartInfo">
            <summary>
            WorkItemsGroup start information
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItemsGroup._isIdleWaitHandle">
            <summary>
            Signaled when all of the WorkItemsGroup's work item completed.
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItemsGroup._canceledWorkItemsGroup">
            <summary>
            A common object for all the work items that this work items group
            generate so we can mark them to cancel in O(1)
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsGroup.Start">
            <summary>
            Start the Work Items Group if it was started suspended
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsGroup.WaitForIdle(System.Int32)">
            <summary>
            Wait for the thread pool to be idle
            </summary>
        </member>
        <member name="E:Amib.Threading.Internal.WorkItemsGroup._onIdle">
            <summary>
            The OnIdle event
            </summary>
        </member>
        <member name="P:Amib.Threading.Internal.WorkItemsGroup.WIGStartInfo">
            <summary>
            WorkItemsGroup start information
            </summary>
        </member>
        <member name="T:Amib.Threading.Internal.WorkItemsQueue">
            <summary>
            WorkItemsQueue class.
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItemsQueue._headWaiterEntry">
            <summary>
            Waiters queue (implemented as stack).
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItemsQueue._waitersCount">
            <summary>
            Waiters count
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItemsQueue._workItems">
            <summary>
            Work items queue
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItemsQueue._isWorkItemsQueueActive">
            <summary>
            Indicate that work items are allowed to be queued
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItemsQueue._isDisposed">
            <summary>
            A flag that indicates if the WorkItemsQueue has been disposed.
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsQueue.EnqueueWorkItem(Amib.Threading.Internal.WorkItem)">
            <summary>
            Enqueue a work item to the queue.
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsQueue.DequeueWorkItem(System.Int32,System.Threading.WaitHandle)">
            <summary>
            Waits for a work item or exits on timeout or cancel
            </summary>
            <param name="millisecondsTimeout">Timeout in milliseconds</param>
            <param name="cancelEvent">Cancel wait handle</param>
            <returns>Returns true if the resource was granted</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsQueue.Cleanup">
            <summary>
            Cleanup the work items queue, hence no more work 
            items are allowed to be queue
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsQueue.GetThreadWaiterEntry">
            <summary>
            Returns the WaiterEntry of the current thread
            </summary>
            <returns></returns>
            In order to avoid creation and destuction of WaiterEntry
            objects each thread has its own WaiterEntry object.
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsQueue.PushWaiter(Amib.Threading.Internal.WorkItemsQueue.WaiterEntry)">
            <summary>
            Push a new waiter into the waiter's stack
            </summary>
            <param name="newWaiterEntry">A waiter to put in the stack</param>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsQueue.PopWaiter">
            <summary>
            Pop a waiter from the waiter's stack
            </summary>
            <returns>Returns the first waiter in the stack</returns>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsQueue.RemoveWaiter(Amib.Threading.Internal.WorkItemsQueue.WaiterEntry,System.Boolean)">
            <summary>
            Remove a waiter from the stack
            </summary>
            <param name="waiterEntry">A waiter entry to remove</param>
            <param name="popDecrement">If true the waiter count is always decremented</param>
        </member>
        <member name="P:Amib.Threading.Internal.WorkItemsQueue.CurrentWaiterEntry">
            <summary>
            Each thread in the thread pool keeps its own waiter entry.
            </summary>
        </member>
        <member name="P:Amib.Threading.Internal.WorkItemsQueue.Count">
            <summary>
            Returns the current number of work items in the queue
            </summary>
        </member>
        <member name="P:Amib.Threading.Internal.WorkItemsQueue.WaitersCount">
            <summary>
            Returns the current number of waiters
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItemsQueue.WaiterEntry._waitHandle">
            <summary>
            Event to signal the waiter that it got the work item.
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItemsQueue.WaiterEntry._isTimedout">
            <summary>
            Flag to know if this waiter already quited from the queue 
            because of a timeout.
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItemsQueue.WaiterEntry._isSignaled">
            <summary>
            Flag to know if the waiter was signaled and got a work item. 
            </summary>
        </member>
        <member name="F:Amib.Threading.Internal.WorkItemsQueue.WaiterEntry._workItem">
            <summary>
            A work item that passed directly to the waiter withou going 
            through the queue
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsQueue.WaiterEntry.Signal(Amib.Threading.Internal.WorkItem)">
            <summary>
            Signal the waiter that it got a work item.
            </summary>
            <returns>Return true on success</returns>
            The method fails if Timeout() preceded its call
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsQueue.WaiterEntry.Timeout">
            <summary>
            Mark the wait entry that it has been timed out
            </summary>
            <returns>Return true on success</returns>
            The method fails if Signal() preceded its call
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsQueue.WaiterEntry.Reset">
            <summary>
            Reset the wait entry so it can be used again
            </summary>
        </member>
        <member name="M:Amib.Threading.Internal.WorkItemsQueue.WaiterEntry.Close">
            <summary>
            Free resources
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.AutoHyperlink">
            <summary>
            when true, (most) bare plain URLs are auto-hyperlinked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.AutoNewlines">
            <summary>
            when true, RETURN becomes a literal newline  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.EmptyElementSuffix">
            <summary>
            use ">" for HTML output, or " />" for XHTML output
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.EncodeProblemUrlCharacters">
            <summary>
            when true, problematic URL characters like [, ], (, and so forth will be encoded 
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.LinkEmails">
            <summary>
            when false, email addresses will never be auto-linked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.MarkdownOptions.StrictBoldItalic">
            <summary>
            when true, bold and italic require non-word characters on either side  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="T:MarkdownSharp.Markdown">
            <summary>
            Markdown is a text-to-HTML conversion tool for web writers. 
            Markdown allows you to write using an easy-to-read, easy-to-write plain text format, 
            then convert it to structurally valid XHTML (or HTML).
            </summary>
        </member>
        <member name="F:MarkdownSharp.Markdown._tabWidth">
            <summary>
            Tabs are automatically converted to spaces as part of the transform  
            this constant determines how "wide" those tabs become in spaces  
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#ctor">
            <summary>
            Create a new Markdown instance using default options
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#ctor(System.Boolean)">
            <summary>
            Create a new Markdown instance and optionally load options from a configuration
            file. There they should be stored in the appSettings section, available options are:
            
                Markdown.StrictBoldItalic (true/false)
                Markdown.EmptyElementSuffix (">" or " />" without the quotes)
                Markdown.LinkEmails (true/false)
                Markdown.AutoNewLines (true/false)
                Markdown.AutoHyperlink (true/false)
                Markdown.EncodeProblemUrlCharacters (true/false) 
                
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#ctor(MarkdownSharp.MarkdownOptions)">
            <summary>
            Create a new Markdown instance and set the options from the MarkdownOptions object.
            </summary>
        </member>
        <member name="F:MarkdownSharp.Markdown._nestDepth">
            <summary>
            maximum nested depth of [] and () supported by the transform; implementation detail
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.#cctor">
            <summary>
            In the static constuctor we'll initialize what stays the same across all transforms.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.Transform(System.String)">
            <summary>
            Transforms the provided Markdown-formatted text to HTML;  
            see http://en.wikipedia.org/wiki/Markdown
            </summary>
            <remarks>
            The order in which other subs are called here is
            essential. Link and image substitutions need to happen before
            EscapeSpecialChars(), so that any *'s or _'s in the a
            and img tags get encoded.
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.RunBlockGamut(System.String,System.Boolean)">
            <summary>
            Perform transformations that form block-level tags like paragraphs, headers, and list items.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.RunSpanGamut(System.String)">
            <summary>
            Perform transformations that occur *within* block-level tags like paragraphs, headers, and list items.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.FormParagraphs(System.String,System.Boolean)">
            <summary>
            splits on two or more newlines, to form "paragraphs";    
            each paragraph is then unhashed (if it is a hash and unhashing isn't turned off) or wrapped in HTML p tag
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.GetNestedBracketsPattern">
            <summary>
            Reusable pattern to match balanced [brackets]. See Friedl's 
            "Mastering Regular Expressions", 2nd Ed., pp. 328-331.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.GetNestedParensPattern">
            <summary>
            Reusable pattern to match balanced (parens). See Friedl's 
            "Mastering Regular Expressions", 2nd Ed., pp. 328-331.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.StripLinkDefinitions(System.String)">
            <summary>
            Strips link definitions from text, stores the URLs and titles in hash references.
            </summary>
            <remarks>
            ^[id]: url "optional title"
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.GetBlockPattern">
            <summary>
            derived pretty much verbatim from PHP Markdown
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.HashHTMLBlocks(System.String)">
            <summary>
            replaces any block-level HTML blocks with hash entries
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.TokenizeHTML(System.String)">
            <summary>
            returns an array of HTML tokens comprising the input string. Each token is 
            either a tag (possibly with nested, tags contained therein, such 
            as &lt;a href="&lt;MTFoo&gt;"&gt;, or a run of text between tags. Each element of the 
            array is a two-element array; the first is either 'tag' or 'text'; the second is 
            the actual value.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoAnchors(System.String)">
            <summary>
            Turn Markdown link shortcuts into HTML anchor tags
            </summary>
            <remarks>
            [link text](url "title") 
            [link text][id] 
            [id] 
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoImages(System.String)">
            <summary>
            Turn Markdown image shortcuts into HTML img tags. 
            </summary>
            <remarks>
            ![alt text][id]
            ![alt text](url "optional title")
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoHeaders(System.String)">
            <summary>
            Turn Markdown headers into HTML header tags
            </summary>
            <remarks>
            Header 1  
            ========  
            
            Header 2  
            --------  
            
            # Header 1  
            ## Header 2  
            ## Header 2 with closing hashes ##  
            ...  
            ###### Header 6  
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoHorizontalRules(System.String)">
            <summary>
            Turn Markdown horizontal rules into HTML hr tags
            </summary>
            <remarks>
            ***  
            * * *  
            ---
            - - -
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoLists(System.String)">
            <summary>
            Turn Markdown lists into HTML ul and ol and li tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.ProcessListItems(System.String,System.String)">
            <summary>
            Process the contents of a single ordered or unordered list, splitting it
            into individual list items.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoCodeBlocks(System.String)">
            <summary>
            /// Turn Markdown 4-space indented code into HTML pre code blocks
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoCodeSpans(System.String)">
            <summary>
            Turn Markdown `code spans` into HTML code tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoItalicsAndBold(System.String)">
            <summary>
            Turn Markdown *italics* and **bold** into HTML strong and em tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoHardBreaks(System.String)">
            <summary>
            Turn markdown line breaks (two space at end of line) into HTML break tags
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoBlockQuotes(System.String)">
            <summary>
            Turn Markdown > quoted blocks into HTML blockquote blocks
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.DoAutoLinks(System.String)">
            <summary>
            Turn angle-delimited URLs into HTML anchor tags
            </summary>
            <remarks>
            &lt;http://www.example.com&gt;
            </remarks>
        </member>
        <member name="M:MarkdownSharp.Markdown.Outdent(System.String)">
            <summary>
            Remove one level of line-leading spaces
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeEmailAddress(System.String)">
            <summary>
            encodes email address randomly  
            roughly 10% raw, 45% hex, 45% dec 
            note that @ is always encoded and : never is
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeCode(System.String)">
            <summary>
            Encode/escape certain Markdown characters inside code blocks and spans where they are literals
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeAmpsAndAngles(System.String)">
            <summary>
            Encode any ampersands (that aren't part of an HTML entity) and left or right angle brackets
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EscapeBackslashes(System.String)">
            <summary>
            Encodes any escaped characters such as \`, \*, \[ etc
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.Unescape(System.String)">
            <summary>
            swap back in all the special characters we've hidden
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EscapeBoldItalic(System.String)">
            <summary>
            escapes Bold [ * ] and Italic [ _ ] characters
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EncodeProblemUrlChars(System.String)">
            <summary>
            hex-encodes some unusual "problem" chars in URLs to avoid URL detection problems 
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.EscapeSpecialCharsWithinTagAttributes(System.String)">
            <summary>
            Within tags -- meaning between &lt; and &gt; -- encode [\ ` * _] so they 
            don't conflict with their use in Markdown for code, italics and strong. 
            We're replacing each such character with its corresponding hash 
            value; this is likely overkill, but it should prevent us from colliding 
            with the escape values by accident.
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.Normalize(System.String)">
            <summary>
            convert all tabs to _tabWidth spaces; 
            standardizes line endings from DOS (CR LF) or Mac (CR) to UNIX (LF); 
            makes sure text ends with a couple of newlines; 
            removes any blank lines (only spaces) in the text
            </summary>
        </member>
        <member name="M:MarkdownSharp.Markdown.RepeatString(System.String,System.Int32)">
            <summary>
            this is to emulate what's evailable in PHP
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.EmptyElementSuffix">
            <summary>
            use ">" for HTML output, or " />" for XHTML output
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.LinkEmails">
            <summary>
            when false, email addresses will never be auto-linked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.StrictBoldItalic">
            <summary>
            when true, bold and italic require non-word characters on either side  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.AutoNewLines">
            <summary>
            when true, RETURN becomes a literal newline  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.AutoHyperlink">
            <summary>
            when true, (most) bare plain URLs are auto-hyperlinked  
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.EncodeProblemUrlCharacters">
            <summary>
            when true, problematic URL characters like [, ], (, and so forth will be encoded 
            WARNING: this is a significant deviation from the markdown spec
            </summary>
        </member>
        <member name="P:MarkdownSharp.Markdown.Version">
            <summary>
            current version of MarkdownSharp;  
            see http://code.google.com/p/markdownsharp/ for the latest code or to contribute
            </summary>
        </member>
        <member name="T:ServiceStack.Support.WebHost.GzipOptimizationTest">
            <summary>
            Highly optimized code to find if GZIP is supported from:
             - http://dotnetperls.com/gzip-request
            
            Other resources for GZip, deflate resources:
            - http://www.west-wind.com/Weblog/posts/10564.aspx
            	- http://www.west-wind.com/WebLog/posts/102969.aspx
            - ICSharpCode 
            </summary>
        </member>
        <member name="T:ServiceStack.SuppressFormsAuthenticationRedirectModule">
            <summary>
            This class interecepts 401 requests and changes them to 402 errors.   When this happens the FormAuthentication module
            will no longer hijack it and redirect back to login because it is a 402 error, not a 401.
            When the request ends, this class sets the status code back to 401 and everything works as it should.
            
            PathToSupress is the path inside your website where the above swap should happen.
            
            If you can build for .net 4.5, you do not have to do this swap. You can take advantage of a new flag (SuppressFormsAuthenticationRedirect)
            that tells the FormAuthenticationModule to not redirect, which also means you will not need the EndRequest code.
            </summary>
        </member>
        <member name="T:ServiceStack.Templates.HtmlTemplates">
            <summary>
            Load Embedded Resource Templates in ServiceStack.
            To get ServiceStack to use your own instead just add a copy of one or more of the following to your Web Root:
            ~/Templates/IndexOperations.html
            ~/Templates/OperationControl.html
            ~/Templates/HtmlFormat.html
            </summary>
        </member>
        <member name="M:ServiceStack.ValidationResultExtensions.ToErrorResult(ServiceStack.FluentValidation.Results.ValidationResult)">
            <summary>
            Converts the validation result to an error result which will be serialized by ServiceStack in a clean and human-readable way.
            </summary>
            <param name="result">The validation result</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ValidationResultExtensions.ToException(ServiceStack.FluentValidation.Results.ValidationResult)">
            <summary>
            Converts the validation result to an error exception which will be serialized by ServiceStack in a clean and human-readable way
            if the returned exception is thrown.
            </summary>
            <param name="result">The validation result</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Validation.MultiRuleSetValidatorSelector.#ctor(System.String[])">
            <summary>
            Creates a new instance of the RulesetValidatorSelector.
            </summary>
        </member>
        <member name="M:ServiceStack.Validation.MultiRuleSetValidatorSelector.CanExecute(ServiceStack.FluentValidation.IValidationRule,System.String,ServiceStack.FluentValidation.ValidationContext)">
            <summary>
            Determines whether or not a rule should execute.
            </summary>
            <param name="rule">The rule</param>
            <param name="propertyPath">Property path (eg Customer.Address.Line1)</param>
            <param name="context">Contextual information</param>
            <returns>Whether or not the validator can execute.</returns>
        </member>
        <member name="M:ServiceStack.Validation.ValidationFeature.Register(ServiceStack.IAppHost)">
            <summary>
            Activate the validation mechanism, so every request DTO with an existing validator
            will be validated.
            </summary>
            <param name="appHost">The app host</param>
        </member>
        <member name="M:ServiceStack.Validation.ValidationFeature.GetRequestErrorBody(System.Object)">
            <summary>
            Override to provide additional/less context about the Service Exception. 
            By default the request is serialized and appended to the ResponseStatus StackTrace.
            </summary>
        </member>
        <member name="M:ServiceStack.Validation.ValidationExtensions.RegisterValidators(Funq.Container,System.Reflection.Assembly[])">
            <summary>
            Auto-scans the provided assemblies for a <see cref="T:ServiceStack.FluentValidation.IValidator"/>
            and registers it in the provided IoC container.
            </summary>
            <param name="container">The IoC container</param>
            <param name="assemblies">The assemblies to scan for a validator</param>
        </member>
        <member name="M:ServiceStack.VirtualFileExtensions.Refresh(ServiceStack.IO.IVirtualFile)">
            <summary>
            Refresh file stats for this node if supported
            </summary>
        </member>
        <member name="T:ServiceStack.VirtualPath.InMemoryVirtualPathProvider">
            <summary>
            In Memory Virtual Path Provider.
            </summary>
        </member>
    </members>
</doc>
